module {
  func.func @main() -> tensor<32000x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<32000x288xf32>
    return %cst : tensor<32000x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<768xf32>
    return %cst : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<6.92820311> : tensor<2xf32>
    return %cst : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    return %cst : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0xFF800000> : tensor<f32>
    return %cst : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<9.99999974E-6> : tensor<f32>
    return %cst : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<2.880000e+02> : tensor<f32>
    return %cst : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<5.000000e-01> : tensor<f32>
    return %cst : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    return %cst : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<144x2x2xf32> {
    %cst = stablehlo.constant dense<"0xtensor<144x2x2xf32>
    return %cst : tensor<144x2x2xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:288] : (tensor<6x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.sqrt %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:1, 0:288] : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:1, 0:288] : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [0:48] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [48:96] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf3Operation name: stablehlo.constant
Verifying module
Operation name: stablehlo.constant
Verifying module
Operation name: stablehlo.constant
Verifying module
Operation name: stablehlo.constant
Verifying module
Operation name: stablehlo.constant
Verifying module
Operation name: stablehlo.constant
Verifying module
Operation name: stablehlo.constant
Verifying module
Operation name: stablehlo.constant
Verifying module
Operation name: stablehlo.constant
Verifying module
Operation name: stablehlo.constant
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.sqrt
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximu2>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [96:144] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [144:192] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 m
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stab= stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [192:240] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [240:288] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant denlehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.sqrt
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name:se<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:288] : (tensor<6x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.sqrt %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x768x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:768, 0:288] : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x768x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:768, 0:288] : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.exponential %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x768xf32>
    %0 = stablehlo.slice %cst [0:1, 0:288, 0:768] : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
    return %0 : tensor<1x288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x768xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
    return %0 : tensor<288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288xf32>
    %0 = stablehlo.slice %cst [1:2, 0:288] : (tensor<6x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.sqrt %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [1:2, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [1:2, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [1:2, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x1x288xf32>
    %0 = stablehlo.slice %cst [1:2, 0:1, 0:288] : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x1x288xf32>
    %0 = stablehlo.slice %cst [1:2, 0:1, 0:288] : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [0:48] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehl stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.sqrt
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Oo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [48:96] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [96:144] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [144:192] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant denperation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponentialse<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [192:240] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [240:288] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [1:2, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.ad
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehd %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288xf32>
    %0 = stablehlo.slice %cst [1:2, 0:288] : (tensor<6x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.sqrt %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x768x288xf32>
    %0 = stablehlo.slice %cst [1:2, 0:768, 0:288] : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x768x288xf32>
    %0 = stablehlo.slice %cst [1:2, 0:768, 0:288] : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.exponential %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x768xf32>
    %0 = stablehlo.slice %cst [1:2, 0:288, 0:768] : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
    return %0 : tensor<1x288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x768xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
    return %0 : tensor<288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288xf32>
    %0 = stablehlo.slice %cst [2:3, 0:288] : (tensor<6x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.sqrt %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [2:3, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [2:3, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [2:3, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x1x288xf32>
    %0 = stablehlo.slice %cst [2:3, 0:1, 0:288] : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x1x288xf32>
    %0 = stablehlo.slice %cst [2:3, 0:1, 0:288] : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [0:48] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stabllo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.sqrt
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.sqrt
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation naehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [48:96] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [96:144] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
   me: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
O return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [144:192] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [192:240] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [240:288] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

peration name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifyinmodule {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [2:3, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288xf32>
    %0 = stablehlo.slice %cst [2:3, 0:288] : (tensor<6x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.sqrt %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x768x288xf32>
    %0 = stablehlo.slice %cst [2:3, 0:768, 0:288] : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x768x288xf32>
    %0 = stablehlo.slice %cst [2:3, 0:768, 0:288] : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.exponential %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x768xf32>
    %0 = stablehlo.slice %cst [2:3, 0:288, 0:768] : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
    return %0 : tensor<1x288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x768xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
    return %0 : tensor<288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288xf32>
    %0 = stablehlo.slice %cst [3:4, 0:288] : (tensor<6x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.sqrt %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [3:4, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [3:4, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [3:4, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x1x288xf32>
    %0 = stablehlo.slice %cst [3:4, 0:1, 0:288] : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf3g module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.sqrt
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.sqrt
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.retur2>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x1x288xf32>
    %0 = stablehlo.slice %cst [3:4, 0:1, 0:288] : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [0:48] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [48:96] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [96:144] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (ten
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablnsor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [144:192] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [192:240] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [240:288] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
   ehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Op return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [3:4, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288xf32>
    %0 = stablehlo.slice %cst [3:4, 0:288] : (tensor<6x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.sqrt %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x768x288xf32>
    %0 = stablehlo.slice %cst [3:4, 0:768, 0:288] : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x768x288xf32>
    %0 = stablehlo.slice %cst [3:4, 0:768, 0:288] : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.exponential %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x768xf32>
    %0 = stablehlo.slice %cst [3:4, 0:288, 0:768] : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
    return %0 : tensor<1x288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x768xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
    return %0 : tensor<288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288xf32>
    %0 = stablehlo.slice %cst [4:5, 0:288] : (tensor<6x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.sqrt %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [4:5, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [4:5, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contraeration name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.sqrt
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.sqrt
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying mcting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [4:5, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x1x288xf32>
    %0 = stablehlo.slice %cst [4:5, 0:1, 0:288] : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x1x288xf32>
    %0 = stablehlo.slice %cst [4:5, 0:1, 0:288] : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [0:48] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [48:96] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [96:144] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant deodule
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
nse<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [144:192] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [192:240] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stabl> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [240:288] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [4:5, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288xf32>
    %0 = stablehlo.slice %cst [4:5, 0:288] : (tensor<6x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.sqrt %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x768x288xf32>
    %0 = stablehlo.slice %cst [4:5, 0:768, 0:288] : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x768x288xf32>
    %0 = stablehlo.slice %cst [4:5, 0:768, 0:288] : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.exponential %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x768xf32>
    %0 = stablehlo.slice %cst [4:5, 0:288, 0:768] : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
    return %0 : tensor<1x288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x768xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
    return %0 : tensor<288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288xf32>
    %0 = stablehlo.slice %cst [5:6, 0:288] : (tensor<6x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.sqrt %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %ehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.sqrt
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.sqrt
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name:0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [5:6, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [5:6, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [5:6, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x1x288xf32>
    %0 = stablehlo.slice %cst [5:6, 0:1, 0:288] : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x1x288xf32>
    %0 = stablehlo.slice %cst [5:6, 0:1, 0:288] : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [0:48] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [48:96] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 48:96] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [96:144] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
     stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
O%cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 96:144] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [144:192] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 144:192] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [192:240] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xfperation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 192:240] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [240:288] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.maximum %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.maximum across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.compare  EQ, %cst, %cst_0,  FLOAT : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
    return %0 : tensor<2xi1>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %c = stablehlo.constant dense<false> : tensor<2xi1>
    %0 = stablehlo.convert %c : (tensor<2xi1>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.subtract %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.exponential %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [0:1] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.slice %cst [1:2] : (tensor<2xf32>) -> tensor<1xf32>
    return %0 : tensor<1xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1xf32>
    %0 = stablehlo.reshape %cst : (tensor<1xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.slice %cst [0:1, 240:288] : (tensor<1x288xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, dim = 0 : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x288xf32>
    %0 = stablehlo.slice %cst [5:6, 0:288, 0:288] : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288xf32>
    %0 = stablehlo.slice %cst [5:6, 0:288] : (tensor<6x288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.sqrt %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x768x288xf32>
    %0 = stablehlo.slice %cst [5:6, 0:768, 0:288] : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x768x288xf32>
    %0 = stablehlo.slice %cst [5:6, 0:768, 0:288] : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.exponential %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<6x288x768xf32>
    %0 = stablehlo.slice %cst [5:6, 0:288, 0:768] : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
    return %0 : tensor<1x288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x768xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
    return %0 : tensor<288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.sqrt %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.maximum
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.compare
Verifying module
Operation name: stablehlo.convert
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.subtract
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.sqrt
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.exponential
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.sqrt
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifyin dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [0:48] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [48:96] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [96:144] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [144:192] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [192:240] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [240:288] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [g module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.bro], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensoradcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduc<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [1] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [1] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

moe
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: sdule {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [0:48] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [48:96] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [96:144] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [144:192] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [192:240] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [240:288] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
tablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stabl    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
ehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stableh  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [1] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [1] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> lo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation n: tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [0:48] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [48:96] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [96:144] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [144:192] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [192:240] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [240:288] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32ame: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation nam>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehe: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation nalo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [1] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [1] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    rme: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
eturn %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [0:48] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [48:96] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [96:144] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [144:192] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [192:240] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [240:288] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000eOperation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Opera+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant tion name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operdense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [1] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [1] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 :ation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying modu (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [0:48] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [48:96] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [96:144] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [144:192] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [192:240] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [240:288] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %le
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying mcst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, odule
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying modulDEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [1] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [1] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>)e
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifyi -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<6x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>) -> tensor<6x768x288xf32>
    return %0 : tensor<6x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.negate %cst : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<768xf32>
    return %0 : tensor<768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [0:48] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [48:96] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [96:144] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [144:192] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [192:240] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.slice %cst [240:288] : (tensor<288xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constantng module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Ve dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehrifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dimlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.negate %cst : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<2xf32>
    return %0 : tensor<2xf32>
  }
}

module {
  func.func @main() -> tensor<48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
    return %0 : tensor<48xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [1] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<6x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>) -> tensor<6x288x288xf32>
    return %0 : tensor<6x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<144x2xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<144x2x2xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, batching_dims = [0] x [0], contracting_dims = [1] x [1], precision = [DEFAULT, DEFAULT] : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
    return %0 : tensor<144x2xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<144x2xf32>
    %0 = stablehlo.reshape %cst : (tensor<144x2xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<6x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>) -> tensor<6x288x288xf32>
    return %0 : tensor<6x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<6x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>) -> tensor<6x1x288xf32>
    return %0 : tensor<6x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<2x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<48xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
    return %0 : tensor<2x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 :
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.broadcast_in_dim
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation na tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [0:1, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x48xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<2x48xf32>
    %0 = stablehlo.slice %cst [1:2, 0:48] : (tensor<2x48xf32>) -> tensor<1x48xf32>
    return %0 : tensor<1x48xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x48xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 1 : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    "stablehlo.return"(%0) : (tensor<f32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reduce(%cst init: %cst_0) applies stablehlo.add across dimensions = [0] : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.negate %cst : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<f32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.divide %cst, %cst_0 : tensor<f32>
    return %0 : tensor<f32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.add %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
    return %0 : tensor<288x768xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
    return %0 : tensor<1x288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
    return %0 : tensor<288x768xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
    return %0 : tensor<1x288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
    return %0 : tensor<288x768xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
    return %0 : tensor<1x288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
    return %0 : tensor<288x768xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
    return %0 : tensor<1x288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf3me: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.slice
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.return
Verifying module
Operation name: stablehlo.reduce
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.negate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.divide
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.add
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: sta2>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
    return %0 : tensor<288x768xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
    return %0 : tensor<1x288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<6x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>) -> tensor<6x288xf32>
    return %0 : tensor<6x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<6x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>) -> tensor<6x288x288xf32>
    return %0 : tensor<6x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
    return %0 : tensor<1x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<6x1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x1x288xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>) -> tensor<6x1x288xf32>
    return %0 : tensor<6x1x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
    return %0 : tensor<288x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
    return %0 : tensor<1x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<6x288x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x288xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>) -> tensor<6x288x288xf32>
    return %0 : tensor<6x288x288xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

module {
  func.func @main() -> tensor<1x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.reshape %cst : (tensor<288xf32>) -> tensor<1x288xf32>
    return %0 : tensor<1x288xf32>
  }
}

module {
  func.func @main() -> tensor<6x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x288xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>) -> tensor<6x288xf32>
    return %0 : tensor<6x288xf32>
  }
}

module {
  func.func @main() -> tensor<768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
    return %0 : tensor<768x288xf32>
  }
}

module {
  func.func @main() -> tensor<1x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<768x288xf32>
    %0 = stablehlo.reshape %cst : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
    return %0 : tensor<1x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<6x768x288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x768x288xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>) -> tensor<6x768x288xf32>
    return %0 : tensor<6x768x288xf32>
  }
}

module {
  func.func @main() -> tensor<288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<768xf32>
    %0 = stablehlo.dot_general %cst, %cst_0, contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
    return %0 : tensor<288x768xf32>
  }
}

module {
  func.func @main() -> tensor<1x288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288x768xf32>
    %0 = stablehlo.reshape %cst : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
    return %0 : tensor<1x288x768xf32>
  }
}

module {
  func.func @main() -> tensor<6x288x768xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x288x768xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x768xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x768xf32>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x768xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x768xf32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<1x288x768xf32>
    %0 = stablehlo.concatenate %cst, %cst_0, %cst_1, %cst_2, %cst_3, %cst_4, dim = 0 : (tensor<1x288x768xf32>, tensor<1x288x768xf32>, tensor<1x288x768xf32>, tensor<1x288x768xf32>, tensor<1x288x768xf32>, tensor<1x288x768xf32>) -> tensor<6x288x768xf32>
    return %0 : tensor<6x288x768xf32>
  }
}

module {
  func.func @main() -> tensor<288xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<288xf32>
    %0 = stablehlo.multiply %cst, %cst_0 : tensor<288xf32>
    return %0 : tensor<288xf32>
  }
}

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<288xf32>}> : () -> tensor<288xf32>
    %1 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<6x288xf32>}> : () -> tensor<6x288xf32>
    %2 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<6x288xf32>}> : () -> tensor<6x288xf32>
    %3 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<288xf32>}> : () -> tensor<288xf32>
    %4 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<6x768x288xf32>}> : () -> tensor<6x768x288xf32>
    %5 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<6x288x768xf32>}> : () -> tensor<6x288x768xf32>
    %6 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<6x768x288xf32>}> : () -> tensor<6x768x288xf32>
    %7 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<32000x288xf32>}> : () -> tensor<32000x288xf32>
    %8 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<6x288x288xf32>}> : () -> tensor<6x288x288xf32>
    %9 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<6x288x288xf32>}> : () -> tensor<6x288x288xf32>
    %10 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<6x288x288xf32>}> : () -> tensor<6x288x288xf32>
    %11 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<6x288x288xf32>}> : () -> tensor<6x288x288xf32>
    %12 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<6x1x288xf32>}> : () -> tensor<6x1x288xf32>
    %13 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<6x1x288xf32>}> : () -> tensor<6x1x288xf32>
    "func.return"(%0, %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13) : (tensor<288xf32>, tensor<6x288xf32>, tensor<6x288xf32>, tensor<288xf32>, tensor<6x768x288xf32>, tensor<6x288x768xf32>, tensor<6x768x288xf32>, tensor<32000x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x1x288xf32>, tensor<6x1x288xf32>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    "func.func"() <{arg_attrs = [{mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}], function_type = (tensor<288xf32>, tensor<6x288xf32>, tensor<6x288xf32>, tensor<288xf32>, tensor<6x768x288xf32>, tensor<6x288x768xf32>, tensor<6x768x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x1x288xf32>, tensor<6x1x288xf32>, tensor<288xf32>) -> (tensor<288xf32>, tensor<6x288xf32>, tensor<6x288xf32>, tensor<288xf32>, tensor<6x768x288xf32>, tensor<6x288x768xf32>, tensor<6x768x288xf32>, tensor<32000x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x1x288xf32>, tensor<6x1x288xf32>), res_attrs = [{jax.result_info = "[0]", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['rms_att_weight']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['rms_ffn_weight']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['rms_final_weight']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['w1']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['w2']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['w3']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['wcls']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['wk']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['wo']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['wq']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['wv']", mhlo.layout_mode = "default"}, {jax.result_info = "[2]", mhlo.layout_mode = "default"}, {jax.result_info = "[3]", mhlo.layout_mode = "default"}], sym_name = "main", sym_visibility = "public"}> ({
    ^bb0(%arg0: tensor<288xf32>, %arg1: tensor<6x288xf32>, %arg2: tensor<6x288xf32>, %arg3: tensor<288xf32>, %arg4: tensor<6x768x288xf32>, %arg5: tensor<6x288x768xf32>, %arg6: tensor<6x768x288xf32>, %arg7: tensor<6x288x288xf32>, %arg8: tensor<6x288x288xf32>, %arg9: tensor<6x288x288xf32>, %arg10: tensor<6x288x288xf32>, %arg11: tensor<6x1x288xf32>, %arg12: tensor<6x1x288xf32>, %arg13: tensor<288xf32>):
      %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<32000x288xf32>}> : () -> tensor<32000x288xf32>
      %1 = "stablehlo.constant"() <{value = dense<1.000000e+00> : tensor<768xf32>}> : () -> tensor<768xf32>
      %2 = "stablehlo.constant"() <{value = dense<6.92820311> : tensor<2xf32>}> : () -> tensor<2xf32>
      %3 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
      %4 = "stablehlo.constant"() <{value = dense<0xFF800000> : tensor<f32>}> : () -> tensor<f32>
      %5 = "stablehlo.constant"() <{value = dense<9.99999974E-6> : tensor<f32>}> : () -> tensor<f32>
      %6 = "stablehlo.constant"() <{value = dense<2.880000e+02> : tensor<f32>}> : () -> tensor<f32>
      %7 = "stablehlo.constant"() <{value = dense<5.000000e-01> : tensor<f32>}> : () -> tensor<f32>
      %8 = "stablehlo.constant"() <{value = dense<1.000000e+00> : tensor<f32>}> : () -> tensor<f32>
      %9 = "stablehlo.constant"() <{value = dense<"0xtensor<144x2x2xf32>}> : () -> tensor<144x2x2xf32>
      %10 = "stablehlo.slice"(%arg1) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
      %11 = "stablehlo.reshape"(%10) : (tensor<1x288xf32>) -> tensor<288xf32>
      %12 = "stablehlo.dot_general"(%arg0, %arg0) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
      %13 = "stablehlo.divide"(%12, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %14 = "stablehlo.add"(%13, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %15 = "stablehlo.sqrt"(%14) : (tensor<f32>) -> tensor<f32>
      %16 = "stablehlo.divide"(%7, %15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %17 = "stablehlo.divide"(%8, %15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %18 = "stablehlo.multiply"(%15, %15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %19 = "stablehlo.divide"(%8, %18) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %20 = "stablehlo.multiply"(%11, %arg0) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %21 = "stablehlo.broadcast_in_dim"(%17) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
      %22 = "stablehlo.multiply"(%20, %21) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %23 = "stablehlo.slice"(%arg9) <{limit_indices = array<i64: 1, 288, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %24 = "stablehlo.reshape"(%23) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %25 = "stablehlo.dot_general"(%24, %22) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %26 = "stablehlo.slice"(%arg7) <{limit_indices = array<i64: 1, 288, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %27 = "stablehlo.reshape"(%26) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %28 = "stablehlo.dot_general"(%27, %22) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %29 = "stablehlo.slice"(%arg10) <{limit_indices = array<i64: 1, 288, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %30 = "stablehlo.reshape"(%29) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %31 = "stablehlo.dot_general"(%30, %22) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %32 = "stablehlo.reshape"(%25) : (tensor<288xf32>) -> tensor<144x2xf32>
      %33 = "stablehlo.reshape"(%28) : (tensor<288xf32>) -> tensor<144x2xf32>
      %34 = "stablehlo.dot_general"(%9, %33) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
      %35 = "stablehlo.dot_general"(%9, %32) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
      %36 = "stablehlo.reshape"(%35) : (tensor<144x2xf32>) -> tensor<288xf32>
      %37 = "stablehlo.slice"(%arg11) <{limit_indices = array<i64: 1, 1, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
      %38 = "stablehlo.reshape"(%37) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
      %39 = "stablehlo.reshape"(%34) : (tensor<144x2xf32>) -> tensor<1x288xf32>
      %40 = "stablehlo.slice"(%arg12) <{limit_indices = array<i64: 1, 1, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
      %41 = "stablehlo.reshape"(%40) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
      %42 = "stablehlo.reshape"(%31) : (tensor<288xf32>) -> tensor<1x288xf32>
      %43 = "stablehlo.slice"(%36) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %44 = "stablehlo.slice"(%38) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %45 = "stablehlo.slice"(%39) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %46 = "stablehlo.concatenate"(%44, %45) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %47 = "stablehlo.dot_general"(%46, %43) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %48 = "stablehlo.divide"(%47, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %49 = "stablehlo.reduce"(%48, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %50 = "stablehlo.broadcast_in_dim"(%49) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %51 = "stablehlo.compare"(%48, %50) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %52 = "stablehlo.convert"(%51) : (tensor<2xi1>) -> tensor<2xf32>
      %53 = "stablehlo.reduce"(%52, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %54 = "stablehlo.subtract"(%48, %50) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %55 = "stablehlo.exponential"(%54) : (tensor<2xf32>) -> tensor<2xf32>
      %56 = "stablehlo.slice"(%55) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %57 = "stablehlo.reshape"(%56) : (tensor<1xf32>) -> tensor<f32>
      %58 = "stablehlo.slice"(%55) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %59 = "stablehlo.reshape"(%58) : (tensor<1xf32>) -> tensor<f32>
      %60 = "stablehlo.add"(%57, %59) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %61 = "stablehlo.broadcast_in_dim"(%60) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %62 = "stablehlo.divide"(%55, %61) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %63 = "stablehlo.multiply"(%60, %60) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %64 = "stablehlo.divide"(%8, %63) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %65 = "stablehlo.slice"(%41) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %66 = "stablehlo.slice"(%42) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %67 = "stablehlo.concatenate"(%65, %66) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %68 = "stablehlo.dot_general"(%67, %62) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %69 = "stablehlo.slice"(%36) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %70 = "stablehlo.slice"(%38) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %71 = "stablehlo.slice"(%39) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %72 = "stablehlo.concatenate"(%70, %71) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %73 = "stablehlo.dot_general"(%72, %69) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %74 = "stablehlo.divide"(%73, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %75 = "stablehlo.reduce"(%74, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %76 = "stablehlo.broadcast_in_dim"(%75) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %77 = "stablehlo.compare"(%74, %76) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %78 = "stablehlo.convert"(%77) : (tensor<2xi1>) -> tensor<2xf32>
      %79 = "stablehlo.reduce"(%78, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %80 = "stablehlo.subtract"(%74, %76) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %81 = "stablehlo.exponential"(%80) : (tensor<2xf32>) -> tensor<2xf32>
      %82 = "stablehlo.slice"(%81) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %83 = "stablehlo.reshape"(%82) : (tensor<1xf32>) -> tensor<f32>
      %84 = "stablehlo.slice"(%81) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %85 = "stablehlo.reshape"(%84) : (tensor<1xf32>) -> tensor<f32>
      %86 = "stablehlo.add"(%83, %85) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %87 = "stablehlo.broadcast_in_dim"(%86) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %88 = "stablehlo.divide"(%81, %87) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %89 = "stablehlo.multiply"(%86, %86) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %90 = "stablehlo.divide"(%8, %89) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %91 = "stablehlo.slice"(%41) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %92 = "stablehlo.slice"(%42) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %93 = "stablehlo.concatenate"(%91, %92) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %94 = "stablehlo.dot_general"(%93, %88) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %95 = "stablehlo.slice"(%36) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %96 = "stablehlo.slice"(%38) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %97 = "stablehlo.slice"(%39) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %98 = "stablehlo.concatenate"(%96, %97) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %99 = "stablehlo.dot_general"(%98, %95) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %100 = "stablehlo.divide"(%99, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %101 = "stablehlo.reduce"(%100, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %102 = "stablehlo.broadcast_in_dim"(%101) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %103 = "stablehlo.compare"(%100, %102) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %104 = "stablehlo.convert"(%103) : (tensor<2xi1>) -> tensor<2xf32>
      %105 = "stablehlo.reduce"(%104, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %106 = "stablehlo.subtract"(%100, %102) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %107 = "stablehlo.exponential"(%106) : (tensor<2xf32>) -> tensor<2xf32>
      %108 = "stablehlo.slice"(%107) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %109 = "stablehlo.reshape"(%108) : (tensor<1xf32>) -> tensor<f32>
      %110 = "stablehlo.slice"(%107) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %111 = "stablehlo.reshape"(%110) : (tensor<1xf32>) -> tensor<f32>
      %112 = "stablehlo.add"(%109, %111) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %113 = "stablehlo.broadcast_in_dim"(%112) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %114 = "stablehlo.divide"(%107, %113) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %115 = "stablehlo.multiply"(%112, %112) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %116 = "stablehlo.divide"(%8, %115) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %117 = "stablehlo.slice"(%41) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %118 = "stablehlo.slice"(%42) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %119 = "stablehlo.concatenate"(%117, %118) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %120 = "stablehlo.dot_general"(%119, %114) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %121 = "stablehlo.slice"(%36) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %122 = "stablehlo.slice"(%38) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %123 = "stablehlo.slice"(%39) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %124 = "stablehlo.concatenate"(%122, %123) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %125 = "stablehlo.dot_general"(%124, %121) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %126 = "stablehlo.divide"(%125, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %127 = "stablehlo.reduce"(%126, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %128 = "stablehlo.broadcast_in_dim"(%127) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %129 = "stablehlo.compare"(%126, %128) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %130 = "stablehlo.convert"(%129) : (tensor<2xi1>) -> tensor<2xf32>
      %131 = "stablehlo.reduce"(%130, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %132 = "stablehlo.subtract"(%126, %128) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %133 = "stablehlo.exponential"(%132) : (tensor<2xf32>) -> tensor<2xf32>
      %134 = "stablehlo.slice"(%133) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %135 = "stablehlo.reshape"(%134) : (tensor<1xf32>) -> tensor<f32>
      %136 = "stablehlo.slice"(%133) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %137 = "stablehlo.reshape"(%136) : (tensor<1xf32>) -> tensor<f32>
      %138 = "stablehlo.add"(%135, %137) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %139 = "stablehlo.broadcast_in_dim"(%138) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %140 = "stablehlo.divide"(%133, %139) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %141 = "stablehlo.multiply"(%138, %138) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %142 = "stablehlo.divide"(%8, %141) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %143 = "stablehlo.slice"(%41) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %144 = "stablehlo.slice"(%42) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %145 = "stablehlo.concatenate"(%143, %144) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %146 = "stablehlo.dot_general"(%145, %140) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %147 = "stablehlo.slice"(%36) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %148 = "stablehlo.slice"(%38) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %149 = "stablehlo.slice"(%39) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %150 = "stablehlo.concatenate"(%148, %149) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %151 = "stablehlo.dot_general"(%150, %147) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %152 = "stablehlo.divide"(%151, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %153 = "stablehlo.reduce"(%152, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %154 = "stablehlo.broadcast_in_dim"(%153) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %155 = "stablehlo.compare"(%152, %154) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %156 = "stablehlo.convert"(%155) : (tensor<2xi1>) -> tensor<2xf32>
      %157 = "stablehlo.reduce"(%156, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %158 = "stablehlo.subtract"(%152, %154) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %159 = "stablehlo.exponential"(%158) : (tensor<2xf32>) -> tensor<2xf32>
      %160 = "stablehlo.slice"(%159) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %161 = "stablehlo.reshape"(%160) : (tensor<1xf32>) -> tensor<f32>
      %162 = "stablehlo.slice"(%159) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %163 = "stablehlo.reshape"(%162) : (tensor<1xf32>) -> tensor<f32>
      %164 = "stablehlo.add"(%161, %163) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %165 = "stablehlo.broadcast_in_dim"(%164) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %166 = "stablehlo.divide"(%159, %165) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %167 = "stablehlo.multiply"(%164, %164) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %168 = "stablehlo.divide"(%8, %167) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %169 = "stablehlo.slice"(%41) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %170 = "stablehlo.slice"(%42) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %171 = "stablehlo.concatenate"(%169, %170) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %172 = "stablehlo.dot_general"(%171, %166) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %173 = "stablehlo.slice"(%36) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %174 = "stablehlo.slice"(%38) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %175 = "stablehlo.slice"(%39) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %176 = "stablehlo.concatenate"(%174, %175) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %177 = "stablehlo.dot_general"(%176, %173) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %178 = "stablehlo.divide"(%177, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %179 = "stablehlo.reduce"(%178, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %180 = "stablehlo.broadcast_in_dim"(%179) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %181 = "stablehlo.compare"(%178, %180) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %182 = "stablehlo.convert"(%181) : (tensor<2xi1>) -> tensor<2xf32>
      %183 = "stablehlo.reduce"(%182, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %184 = "stablehlo.subtract"(%178, %180) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %185 = "stablehlo.exponential"(%184) : (tensor<2xf32>) -> tensor<2xf32>
      %186 = "stablehlo.slice"(%185) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %187 = "stablehlo.reshape"(%186) : (tensor<1xf32>) -> tensor<f32>
      %188 = "stablehlo.slice"(%185) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %189 = "stablehlo.reshape"(%188) : (tensor<1xf32>) -> tensor<f32>
      %190 = "stablehlo.add"(%187, %189) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %191 = "stablehlo.broadcast_in_dim"(%190) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %192 = "stablehlo.divide"(%185, %191) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %193 = "stablehlo.multiply"(%190, %190) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %194 = "stablehlo.divide"(%8, %193) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %195 = "stablehlo.slice"(%41) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %196 = "stablehlo.slice"(%42) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %197 = "stablehlo.concatenate"(%195, %196) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %198 = "stablehlo.dot_general"(%197, %192) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %199 = "stablehlo.concatenate"(%68, %94, %120, %146, %172, %198) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
      %200 = "stablehlo.slice"(%arg8) <{limit_indices = array<i64: 1, 288, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %201 = "stablehlo.reshape"(%200) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %202 = "stablehlo.dot_general"(%201, %199) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %203 = "stablehlo.add"(%arg0, %202) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %204 = "stablehlo.slice"(%arg2) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
      %205 = "stablehlo.reshape"(%204) : (tensor<1x288xf32>) -> tensor<288xf32>
      %206 = "stablehlo.dot_general"(%203, %203) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
      %207 = "stablehlo.divide"(%206, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %208 = "stablehlo.add"(%207, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %209 = "stablehlo.sqrt"(%208) : (tensor<f32>) -> tensor<f32>
      %210 = "stablehlo.divide"(%7, %209) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %211 = "stablehlo.divide"(%8, %209) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %212 = "stablehlo.multiply"(%209, %209) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %213 = "stablehlo.divide"(%8, %212) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %214 = "stablehlo.multiply"(%205, %203) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %215 = "stablehlo.broadcast_in_dim"(%211) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
      %216 = "stablehlo.multiply"(%214, %215) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %217 = "stablehlo.slice"(%arg4) <{limit_indices = array<i64: 1, 768, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
      %218 = "stablehlo.reshape"(%217) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
      %219 = "stablehlo.dot_general"(%218, %216) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
      %220 = "stablehlo.slice"(%arg6) <{limit_indices = array<i64: 1, 768, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
      %221 = "stablehlo.reshape"(%220) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
      %222 = "stablehlo.dot_general"(%221, %216) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
      %223 = "stablehlo.negate"(%219) : (tensor<768xf32>) -> tensor<768xf32>
      %224 = "stablehlo.exponential"(%223) : (tensor<768xf32>) -> tensor<768xf32>
      %225 = "stablehlo.add"(%1, %224) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %226 = "stablehlo.divide"(%1, %225) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %227 = "stablehlo.multiply"(%225, %225) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %228 = "stablehlo.divide"(%1, %227) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %229 = "stablehlo.multiply"(%219, %226) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %230 = "stablehlo.multiply"(%229, %222) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %231 = "stablehlo.slice"(%arg5) <{limit_indices = array<i64: 1, 288, 768>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
      %232 = "stablehlo.reshape"(%231) : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
      %233 = "stablehlo.dot_general"(%232, %230) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
      %234 = "stablehlo.add"(%203, %233) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %235 = "stablehlo.slice"(%arg1) <{limit_indices = array<i64: 2, 288>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
      %236 = "stablehlo.reshape"(%235) : (tensor<1x288xf32>) -> tensor<288xf32>
      %237 = "stablehlo.dot_general"(%234, %234) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
      %238 = "stablehlo.divide"(%237, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %239 = "stablehlo.add"(%238, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %240 = "stablehlo.sqrt"(%239) : (tensor<f32>) -> tensor<f32>
      %241 = "stablehlo.divide"(%7, %240) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %242 = "stablehlo.divide"(%8, %240) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %243 = "stablehlo.multiply"(%240, %240) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %244 = "stablehlo.divide"(%8, %243) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %245 = "stablehlo.multiply"(%236, %234) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %246 = "stablehlo.broadcast_in_dim"(%242) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
      %247 = "stablehlo.multiply"(%245, %246) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %248 = "stablehlo.slice"(%arg9) <{limit_indices = array<i64: 2, 288, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %249 = "stablehlo.reshape"(%248) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %250 = "stablehlo.dot_general"(%249, %247) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %251 = "stablehlo.slice"(%arg7) <{limit_indices = array<i64: 2, 288, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %252 = "stablehlo.reshape"(%251) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %253 = "stablehlo.dot_general"(%252, %247) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %254 = "stablehlo.slice"(%arg10) <{limit_indices = array<i64: 2, 288, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %255 = "stablehlo.reshape"(%254) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %256 = "stablehlo.dot_general"(%255, %247) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %257 = "stablehlo.reshape"(%250) : (tensor<288xf32>) -> tensor<144x2xf32>
      %258 = "stablehlo.reshape"(%253) : (tensor<288xf32>) -> tensor<144x2xf32>
      %259 = "stablehlo.dot_general"(%9, %258) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
      %260 = "stablehlo.dot_general"(%9, %257) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
      %261 = "stablehlo.reshape"(%260) : (tensor<144x2xf32>) -> tensor<288xf32>
      %262 = "stablehlo.slice"(%arg11) <{limit_indices = array<i64: 2, 1, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
      %263 = "stablehlo.reshape"(%262) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
      %264 = "stablehlo.reshape"(%259) : (tensor<144x2xf32>) -> tensor<1x288xf32>
      %265 = "stablehlo.slice"(%arg12) <{limit_indices = array<i64: 2, 1, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
      %266 = "stablehlo.reshape"(%265) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
      %267 = "stablehlo.reshape"(%256) : (tensor<288xf32>) -> tensor<1x288xf32>
      %268 = "stablehlo.slice"(%261) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %269 = "stablehlo.slice"(%263) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %270 = "stablehlo.slice"(%264) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %271 = "stablehlo.concatenate"(%269, %270) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %272 = "stablehlo.dot_general"(%271, %268) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %273 = "stablehlo.divide"(%272, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %274 = "stablehlo.reduce"(%273, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %275 = "stablehlo.broadcast_in_dim"(%274) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %276 = "stablehlo.compare"(%273, %275) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %277 = "stablehlo.convert"(%276) : (tensor<2xi1>) -> tensor<2xf32>
      %278 = "stablehlo.reduce"(%277, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %279 = "stablehlo.subtract"(%273, %275) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %280 = "stablehlo.exponential"(%279) : (tensor<2xf32>) -> tensor<2xf32>
      %281 = "stablehlo.slice"(%280) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %282 = "stablehlo.reshape"(%281) : (tensor<1xf32>) -> tensor<f32>
      %283 = "stablehlo.slice"(%280) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %284 = "stablehlo.reshape"(%283) : (tensor<1xf32>) -> tensor<f32>
      %285 = "stablehlo.add"(%282, %284) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %286 = "stablehlo.broadcast_in_dim"(%285) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %287 = "stablehlo.divide"(%280, %286) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %288 = "stablehlo.multiply"(%285, %285) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %289 = "stablehlo.divide"(%8, %288) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %290 = "stablehlo.slice"(%266) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %291 = "stablehlo.slice"(%267) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %292 = "stablehlo.concatenate"(%290, %291) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %293 = "stablehlo.dot_general"(%292, %287) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %294 = "stablehlo.slice"(%261) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %295 = "stablehlo.slice"(%263) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %296 = "stablehlo.slice"(%264) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %297 = "stablehlo.concatenate"(%295, %296) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %298 = "stablehlo.dot_general"(%297, %294) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %299 = "stablehlo.divide"(%298, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %300 = "stablehlo.reduce"(%299, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %301 = "stablehlo.broadcast_in_dim"(%300) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %302 = "stablehlo.compare"(%299, %301) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %303 = "stablehlo.convert"(%302) : (tensor<2xi1>) -> tensor<2xf32>
      %304 = "stablehlo.reduce"(%303, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %305 = "stablehlo.subtract"(%299, %301) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %306 = "stablehlo.exponential"(%305) : (tensor<2xf32>) -> tensor<2xf32>
      %307 = "stablehlo.slice"(%306) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %308 = "stablehlo.reshape"(%307) : (tensor<1xf32>) -> tensor<f32>
      %309 = "stablehlo.slice"(%306) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %310 = "stablehlo.reshape"(%309) : (tensor<1xf32>) -> tensor<f32>
      %311 = "stablehlo.add"(%308, %310) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %312 = "stablehlo.broadcast_in_dim"(%311) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %313 = "stablehlo.divide"(%306, %312) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %314 = "stablehlo.multiply"(%311, %311) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %315 = "stablehlo.divide"(%8, %314) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %316 = "stablehlo.slice"(%266) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %317 = "stablehlo.slice"(%267) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %318 = "stablehlo.concatenate"(%316, %317) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %319 = "stablehlo.dot_general"(%318, %313) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %320 = "stablehlo.slice"(%261) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %321 = "stablehlo.slice"(%263) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %322 = "stablehlo.slice"(%264) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %323 = "stablehlo.concatenate"(%321, %322) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %324 = "stablehlo.dot_general"(%323, %320) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %325 = "stablehlo.divide"(%324, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %326 = "stablehlo.reduce"(%325, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %327 = "stablehlo.broadcast_in_dim"(%326) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %328 = "stablehlo.compare"(%325, %327) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %329 = "stablehlo.convert"(%328) : (tensor<2xi1>) -> tensor<2xf32>
      %330 = "stablehlo.reduce"(%329, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %331 = "stablehlo.subtract"(%325, %327) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %332 = "stablehlo.exponential"(%331) : (tensor<2xf32>) -> tensor<2xf32>
      %333 = "stablehlo.slice"(%332) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %334 = "stablehlo.reshape"(%333) : (tensor<1xf32>) -> tensor<f32>
      %335 = "stablehlo.slice"(%332) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %336 = "stablehlo.reshape"(%335) : (tensor<1xf32>) -> tensor<f32>
      %337 = "stablehlo.add"(%334, %336) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %338 = "stablehlo.broadcast_in_dim"(%337) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %339 = "stablehlo.divide"(%332, %338) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %340 = "stablehlo.multiply"(%337, %337) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %341 = "stablehlo.divide"(%8, %340) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %342 = "stablehlo.slice"(%266) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %343 = "stablehlo.slice"(%267) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %344 = "stablehlo.concatenate"(%342, %343) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %345 = "stablehlo.dot_general"(%344, %339) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %346 = "stablehlo.slice"(%261) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %347 = "stablehlo.slice"(%263) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %348 = "stablehlo.slice"(%264) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %349 = "stablehlo.concatenate"(%347, %348) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %350 = "stablehlo.dot_general"(%349, %346) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %351 = "stablehlo.divide"(%350, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %352 = "stablehlo.reduce"(%351, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %353 = "stablehlo.broadcast_in_dim"(%352) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %354 = "stablehlo.compare"(%351, %353) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %355 = "stablehlo.convert"(%354) : (tensor<2xi1>) -> tensor<2xf32>
      %356 = "stablehlo.reduce"(%355, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %357 = "stablehlo.subtract"(%351, %353) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %358 = "stablehlo.exponential"(%357) : (tensor<2xf32>) -> tensor<2xf32>
      %359 = "stablehlo.slice"(%358) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %360 = "stablehlo.reshape"(%359) : (tensor<1xf32>) -> tensor<f32>
      %361 = "stablehlo.slice"(%358) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %362 = "stablehlo.reshape"(%361) : (tensor<1xf32>) -> tensor<f32>
      %363 = "stablehlo.add"(%360, %362) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %364 = "stablehlo.broadcast_in_dim"(%363) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %365 = "stablehlo.divide"(%358, %364) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %366 = "stablehlo.multiply"(%363, %363) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %367 = "stablehlo.divide"(%8, %366) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %368 = "stablehlo.slice"(%266) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %369 = "stablehlo.slice"(%267) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %370 = "stablehlo.concatenate"(%368, %369) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %371 = "stablehlo.dot_general"(%370, %365) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %372 = "stablehlo.slice"(%261) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %373 = "stablehlo.slice"(%263) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %374 = "stablehlo.slice"(%264) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %375 = "stablehlo.concatenate"(%373, %374) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %376 = "stablehlo.dot_general"(%375, %372) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %377 = "stablehlo.divide"(%376, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %378 = "stablehlo.reduce"(%377, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %379 = "stablehlo.broadcast_in_dim"(%378) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %380 = "stablehlo.compare"(%377, %379) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %381 = "stablehlo.convert"(%380) : (tensor<2xi1>) -> tensor<2xf32>
      %382 = "stablehlo.reduce"(%381, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %383 = "stablehlo.subtract"(%377, %379) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %384 = "stablehlo.exponential"(%383) : (tensor<2xf32>) -> tensor<2xf32>
      %385 = "stablehlo.slice"(%384) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %386 = "stablehlo.reshape"(%385) : (tensor<1xf32>) -> tensor<f32>
      %387 = "stablehlo.slice"(%384) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %388 = "stablehlo.reshape"(%387) : (tensor<1xf32>) -> tensor<f32>
      %389 = "stablehlo.add"(%386, %388) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %390 = "stablehlo.broadcast_in_dim"(%389) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %391 = "stablehlo.divide"(%384, %390) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %392 = "stablehlo.multiply"(%389, %389) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %393 = "stablehlo.divide"(%8, %392) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %394 = "stablehlo.slice"(%266) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %395 = "stablehlo.slice"(%267) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %396 = "stablehlo.concatenate"(%394, %395) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %397 = "stablehlo.dot_general"(%396, %391) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %398 = "stablehlo.slice"(%261) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %399 = "stablehlo.slice"(%263) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %400 = "stablehlo.slice"(%264) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %401 = "stablehlo.concatenate"(%399, %400) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %402 = "stablehlo.dot_general"(%401, %398) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %403 = "stablehlo.divide"(%402, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %404 = "stablehlo.reduce"(%403, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %405 = "stablehlo.broadcast_in_dim"(%404) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %406 = "stablehlo.compare"(%403, %405) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %407 = "stablehlo.convert"(%406) : (tensor<2xi1>) -> tensor<2xf32>
      %408 = "stablehlo.reduce"(%407, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %409 = "stablehlo.subtract"(%403, %405) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %410 = "stablehlo.exponential"(%409) : (tensor<2xf32>) -> tensor<2xf32>
      %411 = "stablehlo.slice"(%410) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %412 = "stablehlo.reshape"(%411) : (tensor<1xf32>) -> tensor<f32>
      %413 = "stablehlo.slice"(%410) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %414 = "stablehlo.reshape"(%413) : (tensor<1xf32>) -> tensor<f32>
      %415 = "stablehlo.add"(%412, %414) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %416 = "stablehlo.broadcast_in_dim"(%415) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %417 = "stablehlo.divide"(%410, %416) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %418 = "stablehlo.multiply"(%415, %415) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %419 = "stablehlo.divide"(%8, %418) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %420 = "stablehlo.slice"(%266) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %421 = "stablehlo.slice"(%267) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %422 = "stablehlo.concatenate"(%420, %421) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %423 = "stablehlo.dot_general"(%422, %417) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %424 = "stablehlo.concatenate"(%293, %319, %345, %371, %397, %423) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
      %425 = "stablehlo.slice"(%arg8) <{limit_indices = array<i64: 2, 288, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %426 = "stablehlo.reshape"(%425) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %427 = "stablehlo.dot_general"(%426, %424) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %428 = "stablehlo.add"(%234, %427) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %429 = "stablehlo.slice"(%arg2) <{limit_indices = array<i64: 2, 288>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
      %430 = "stablehlo.reshape"(%429) : (tensor<1x288xf32>) -> tensor<288xf32>
      %431 = "stablehlo.dot_general"(%428, %428) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
      %432 = "stablehlo.divide"(%431, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %433 = "stablehlo.add"(%432, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %434 = "stablehlo.sqrt"(%433) : (tensor<f32>) -> tensor<f32>
      %435 = "stablehlo.divide"(%7, %434) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %436 = "stablehlo.divide"(%8, %434) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %437 = "stablehlo.multiply"(%434, %434) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %438 = "stablehlo.divide"(%8, %437) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %439 = "stablehlo.multiply"(%430, %428) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %440 = "stablehlo.broadcast_in_dim"(%436) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
      %441 = "stablehlo.multiply"(%439, %440) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %442 = "stablehlo.slice"(%arg4) <{limit_indices = array<i64: 2, 768, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
      %443 = "stablehlo.reshape"(%442) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
      %444 = "stablehlo.dot_general"(%443, %441) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
      %445 = "stablehlo.slice"(%arg6) <{limit_indices = array<i64: 2, 768, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
      %446 = "stablehlo.reshape"(%445) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
      %447 = "stablehlo.dot_general"(%446, %441) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
      %448 = "stablehlo.negate"(%444) : (tensor<768xf32>) -> tensor<768xf32>
      %449 = "stablehlo.exponential"(%448) : (tensor<768xf32>) -> tensor<768xf32>
      %450 = "stablehlo.add"(%1, %449) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %451 = "stablehlo.divide"(%1, %450) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %452 = "stablehlo.multiply"(%450, %450) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %453 = "stablehlo.divide"(%1, %452) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %454 = "stablehlo.multiply"(%444, %451) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %455 = "stablehlo.multiply"(%454, %447) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %456 = "stablehlo.slice"(%arg5) <{limit_indices = array<i64: 2, 288, 768>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
      %457 = "stablehlo.reshape"(%456) : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
      %458 = "stablehlo.dot_general"(%457, %455) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
      %459 = "stablehlo.add"(%428, %458) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %460 = "stablehlo.slice"(%arg1) <{limit_indices = array<i64: 3, 288>, start_indices = array<i64: 2, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
      %461 = "stablehlo.reshape"(%460) : (tensor<1x288xf32>) -> tensor<288xf32>
      %462 = "stablehlo.dot_general"(%459, %459) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
      %463 = "stablehlo.divide"(%462, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %464 = "stablehlo.add"(%463, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %465 = "stablehlo.sqrt"(%464) : (tensor<f32>) -> tensor<f32>
      %466 = "stablehlo.divide"(%7, %465) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %467 = "stablehlo.divide"(%8, %465) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %468 = "stablehlo.multiply"(%465, %465) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %469 = "stablehlo.divide"(%8, %468) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %470 = "stablehlo.multiply"(%461, %459) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %471 = "stablehlo.broadcast_in_dim"(%467) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
      %472 = "stablehlo.multiply"(%470, %471) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %473 = "stablehlo.slice"(%arg9) <{limit_indices = array<i64: 3, 288, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %474 = "stablehlo.reshape"(%473) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %475 = "stablehlo.dot_general"(%474, %472) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %476 = "stablehlo.slice"(%arg7) <{limit_indices = array<i64: 3, 288, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %477 = "stablehlo.reshape"(%476) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %478 = "stablehlo.dot_general"(%477, %472) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %479 = "stablehlo.slice"(%arg10) <{limit_indices = array<i64: 3, 288, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %480 = "stablehlo.reshape"(%479) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %481 = "stablehlo.dot_general"(%480, %472) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %482 = "stablehlo.reshape"(%475) : (tensor<288xf32>) -> tensor<144x2xf32>
      %483 = "stablehlo.reshape"(%478) : (tensor<288xf32>) -> tensor<144x2xf32>
      %484 = "stablehlo.dot_general"(%9, %483) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
      %485 = "stablehlo.dot_general"(%9, %482) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
      %486 = "stablehlo.reshape"(%485) : (tensor<144x2xf32>) -> tensor<288xf32>
      %487 = "stablehlo.slice"(%arg11) <{limit_indices = array<i64: 3, 1, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
      %488 = "stablehlo.reshape"(%487) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
      %489 = "stablehlo.reshape"(%484) : (tensor<144x2xf32>) -> tensor<1x288xf32>
      %490 = "stablehlo.slice"(%arg12) <{limit_indices = array<i64: 3, 1, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
      %491 = "stablehlo.reshape"(%490) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
      %492 = "stablehlo.reshape"(%481) : (tensor<288xf32>) -> tensor<1x288xf32>
      %493 = "stablehlo.slice"(%486) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %494 = "stablehlo.slice"(%488) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %495 = "stablehlo.slice"(%489) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %496 = "stablehlo.concatenate"(%494, %495) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %497 = "stablehlo.dot_general"(%496, %493) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %498 = "stablehlo.divide"(%497, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %499 = "stablehlo.reduce"(%498, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %500 = "stablehlo.broadcast_in_dim"(%499) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %501 = "stablehlo.compare"(%498, %500) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %502 = "stablehlo.convert"(%501) : (tensor<2xi1>) -> tensor<2xf32>
      %503 = "stablehlo.reduce"(%502, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %504 = "stablehlo.subtract"(%498, %500) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %505 = "stablehlo.exponential"(%504) : (tensor<2xf32>) -> tensor<2xf32>
      %506 = "stablehlo.slice"(%505) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %507 = "stablehlo.reshape"(%506) : (tensor<1xf32>) -> tensor<f32>
      %508 = "stablehlo.slice"(%505) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %509 = "stablehlo.reshape"(%508) : (tensor<1xf32>) -> tensor<f32>
      %510 = "stablehlo.add"(%507, %509) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %511 = "stablehlo.broadcast_in_dim"(%510) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %512 = "stablehlo.divide"(%505, %511) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %513 = "stablehlo.multiply"(%510, %510) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %514 = "stablehlo.divide"(%8, %513) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %515 = "stablehlo.slice"(%491) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %516 = "stablehlo.slice"(%492) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %517 = "stablehlo.concatenate"(%515, %516) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %518 = "stablehlo.dot_general"(%517, %512) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %519 = "stablehlo.slice"(%486) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %520 = "stablehlo.slice"(%488) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %521 = "stablehlo.slice"(%489) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %522 = "stablehlo.concatenate"(%520, %521) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %523 = "stablehlo.dot_general"(%522, %519) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %524 = "stablehlo.divide"(%523, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %525 = "stablehlo.reduce"(%524, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %526 = "stablehlo.broadcast_in_dim"(%525) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %527 = "stablehlo.compare"(%524, %526) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %528 = "stablehlo.convert"(%527) : (tensor<2xi1>) -> tensor<2xf32>
      %529 = "stablehlo.reduce"(%528, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %530 = "stablehlo.subtract"(%524, %526) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %531 = "stablehlo.exponential"(%530) : (tensor<2xf32>) -> tensor<2xf32>
      %532 = "stablehlo.slice"(%531) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %533 = "stablehlo.reshape"(%532) : (tensor<1xf32>) -> tensor<f32>
      %534 = "stablehlo.slice"(%531) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %535 = "stablehlo.reshape"(%534) : (tensor<1xf32>) -> tensor<f32>
      %536 = "stablehlo.add"(%533, %535) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %537 = "stablehlo.broadcast_in_dim"(%536) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %538 = "stablehlo.divide"(%531, %537) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %539 = "stablehlo.multiply"(%536, %536) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %540 = "stablehlo.divide"(%8, %539) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %541 = "stablehlo.slice"(%491) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %542 = "stablehlo.slice"(%492) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %543 = "stablehlo.concatenate"(%541, %542) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %544 = "stablehlo.dot_general"(%543, %538) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %545 = "stablehlo.slice"(%486) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %546 = "stablehlo.slice"(%488) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %547 = "stablehlo.slice"(%489) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %548 = "stablehlo.concatenate"(%546, %547) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %549 = "stablehlo.dot_general"(%548, %545) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %550 = "stablehlo.divide"(%549, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %551 = "stablehlo.reduce"(%550, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %552 = "stablehlo.broadcast_in_dim"(%551) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %553 = "stablehlo.compare"(%550, %552) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %554 = "stablehlo.convert"(%553) : (tensor<2xi1>) -> tensor<2xf32>
      %555 = "stablehlo.reduce"(%554, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %556 = "stablehlo.subtract"(%550, %552) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %557 = "stablehlo.exponential"(%556) : (tensor<2xf32>) -> tensor<2xf32>
      %558 = "stablehlo.slice"(%557) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %559 = "stablehlo.reshape"(%558) : (tensor<1xf32>) -> tensor<f32>
      %560 = "stablehlo.slice"(%557) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %561 = "stablehlo.reshape"(%560) : (tensor<1xf32>) -> tensor<f32>
      %562 = "stablehlo.add"(%559, %561) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %563 = "stablehlo.broadcast_in_dim"(%562) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %564 = "stablehlo.divide"(%557, %563) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %565 = "stablehlo.multiply"(%562, %562) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %566 = "stablehlo.divide"(%8, %565) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %567 = "stablehlo.slice"(%491) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %568 = "stablehlo.slice"(%492) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %569 = "stablehlo.concatenate"(%567, %568) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %570 = "stablehlo.dot_general"(%569, %564) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %571 = "stablehlo.slice"(%486) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %572 = "stablehlo.slice"(%488) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %573 = "stablehlo.slice"(%489) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %574 = "stablehlo.concatenate"(%572, %573) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %575 = "stablehlo.dot_general"(%574, %571) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %576 = "stablehlo.divide"(%575, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %577 = "stablehlo.reduce"(%576, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %578 = "stablehlo.broadcast_in_dim"(%577) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %579 = "stablehlo.compare"(%576, %578) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %580 = "stablehlo.convert"(%579) : (tensor<2xi1>) -> tensor<2xf32>
      %581 = "stablehlo.reduce"(%580, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %582 = "stablehlo.subtract"(%576, %578) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %583 = "stablehlo.exponential"(%582) : (tensor<2xf32>) -> tensor<2xf32>
      %584 = "stablehlo.slice"(%583) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %585 = "stablehlo.reshape"(%584) : (tensor<1xf32>) -> tensor<f32>
      %586 = "stablehlo.slice"(%583) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %587 = "stablehlo.reshape"(%586) : (tensor<1xf32>) -> tensor<f32>
      %588 = "stablehlo.add"(%585, %587) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %589 = "stablehlo.broadcast_in_dim"(%588) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %590 = "stablehlo.divide"(%583, %589) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %591 = "stablehlo.multiply"(%588, %588) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %592 = "stablehlo.divide"(%8, %591) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %593 = "stablehlo.slice"(%491) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %594 = "stablehlo.slice"(%492) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %595 = "stablehlo.concatenate"(%593, %594) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %596 = "stablehlo.dot_general"(%595, %590) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %597 = "stablehlo.slice"(%486) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %598 = "stablehlo.slice"(%488) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %599 = "stablehlo.slice"(%489) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %600 = "stablehlo.concatenate"(%598, %599) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %601 = "stablehlo.dot_general"(%600, %597) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %602 = "stablehlo.divide"(%601, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %603 = "stablehlo.reduce"(%602, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %604 = "stablehlo.broadcast_in_dim"(%603) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %605 = "stablehlo.compare"(%602, %604) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %606 = "stablehlo.convert"(%605) : (tensor<2xi1>) -> tensor<2xf32>
      %607 = "stablehlo.reduce"(%606, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %608 = "stablehlo.subtract"(%602, %604) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %609 = "stablehlo.exponential"(%608) : (tensor<2xf32>) -> tensor<2xf32>
      %610 = "stablehlo.slice"(%609) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %611 = "stablehlo.reshape"(%610) : (tensor<1xf32>) -> tensor<f32>
      %612 = "stablehlo.slice"(%609) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %613 = "stablehlo.reshape"(%612) : (tensor<1xf32>) -> tensor<f32>
      %614 = "stablehlo.add"(%611, %613) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %615 = "stablehlo.broadcast_in_dim"(%614) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %616 = "stablehlo.divide"(%609, %615) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %617 = "stablehlo.multiply"(%614, %614) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %618 = "stablehlo.divide"(%8, %617) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %619 = "stablehlo.slice"(%491) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %620 = "stablehlo.slice"(%492) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %621 = "stablehlo.concatenate"(%619, %620) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %622 = "stablehlo.dot_general"(%621, %616) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %623 = "stablehlo.slice"(%486) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %624 = "stablehlo.slice"(%488) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %625 = "stablehlo.slice"(%489) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %626 = "stablehlo.concatenate"(%624, %625) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %627 = "stablehlo.dot_general"(%626, %623) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %628 = "stablehlo.divide"(%627, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %629 = "stablehlo.reduce"(%628, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %630 = "stablehlo.broadcast_in_dim"(%629) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %631 = "stablehlo.compare"(%628, %630) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %632 = "stablehlo.convert"(%631) : (tensor<2xi1>) -> tensor<2xf32>
      %633 = "stablehlo.reduce"(%632, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %634 = "stablehlo.subtract"(%628, %630) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %635 = "stablehlo.exponential"(%634) : (tensor<2xf32>) -> tensor<2xf32>
      %636 = "stablehlo.slice"(%635) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %637 = "stablehlo.reshape"(%636) : (tensor<1xf32>) -> tensor<f32>
      %638 = "stablehlo.slice"(%635) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %639 = "stablehlo.reshape"(%638) : (tensor<1xf32>) -> tensor<f32>
      %640 = "stablehlo.add"(%637, %639) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %641 = "stablehlo.broadcast_in_dim"(%640) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %642 = "stablehlo.divide"(%635, %641) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %643 = "stablehlo.multiply"(%640, %640) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %644 = "stablehlo.divide"(%8, %643) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %645 = "stablehlo.slice"(%491) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %646 = "stablehlo.slice"(%492) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %647 = "stablehlo.concatenate"(%645, %646) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %648 = "stablehlo.dot_general"(%647, %642) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %649 = "stablehlo.concatenate"(%518, %544, %570, %596, %622, %648) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
      %650 = "stablehlo.slice"(%arg8) <{limit_indices = array<i64: 3, 288, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %651 = "stablehlo.reshape"(%650) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %652 = "stablehlo.dot_general"(%651, %649) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %653 = "stablehlo.add"(%459, %652) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %654 = "stablehlo.slice"(%arg2) <{limit_indices = array<i64: 3, 288>, start_indices = array<i64: 2, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
      %655 = "stablehlo.reshape"(%654) : (tensor<1x288xf32>) -> tensor<288xf32>
      %656 = "stablehlo.dot_general"(%653, %653) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
      %657 = "stablehlo.divide"(%656, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %658 = "stablehlo.add"(%657, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %659 = "stablehlo.sqrt"(%658) : (tensor<f32>) -> tensor<f32>
      %660 = "stablehlo.divide"(%7, %659) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %661 = "stablehlo.divide"(%8, %659) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %662 = "stablehlo.multiply"(%659, %659) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %663 = "stablehlo.divide"(%8, %662) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %664 = "stablehlo.multiply"(%655, %653) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %665 = "stablehlo.broadcast_in_dim"(%661) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
      %666 = "stablehlo.multiply"(%664, %665) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %667 = "stablehlo.slice"(%arg4) <{limit_indices = array<i64: 3, 768, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
      %668 = "stablehlo.reshape"(%667) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
      %669 = "stablehlo.dot_general"(%668, %666) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
      %670 = "stablehlo.slice"(%arg6) <{limit_indices = array<i64: 3, 768, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
      %671 = "stablehlo.reshape"(%670) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
      %672 = "stablehlo.dot_general"(%671, %666) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
      %673 = "stablehlo.negate"(%669) : (tensor<768xf32>) -> tensor<768xf32>
      %674 = "stablehlo.exponential"(%673) : (tensor<768xf32>) -> tensor<768xf32>
      %675 = "stablehlo.add"(%1, %674) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %676 = "stablehlo.divide"(%1, %675) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %677 = "stablehlo.multiply"(%675, %675) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %678 = "stablehlo.divide"(%1, %677) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %679 = "stablehlo.multiply"(%669, %676) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %680 = "stablehlo.multiply"(%679, %672) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %681 = "stablehlo.slice"(%arg5) <{limit_indices = array<i64: 3, 288, 768>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
      %682 = "stablehlo.reshape"(%681) : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
      %683 = "stablehlo.dot_general"(%682, %680) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
      %684 = "stablehlo.add"(%653, %683) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %685 = "stablehlo.slice"(%arg1) <{limit_indices = array<i64: 4, 288>, start_indices = array<i64: 3, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
      %686 = "stablehlo.reshape"(%685) : (tensor<1x288xf32>) -> tensor<288xf32>
      %687 = "stablehlo.dot_general"(%684, %684) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
      %688 = "stablehlo.divide"(%687, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %689 = "stablehlo.add"(%688, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %690 = "stablehlo.sqrt"(%689) : (tensor<f32>) -> tensor<f32>
      %691 = "stablehlo.divide"(%7, %690) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %692 = "stablehlo.divide"(%8, %690) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %693 = "stablehlo.multiply"(%690, %690) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %694 = "stablehlo.divide"(%8, %693) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %695 = "stablehlo.multiply"(%686, %684) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %696 = "stablehlo.broadcast_in_dim"(%692) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
      %697 = "stablehlo.multiply"(%695, %696) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %698 = "stablehlo.slice"(%arg9) <{limit_indices = array<i64: 4, 288, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %699 = "stablehlo.reshape"(%698) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %700 = "stablehlo.dot_general"(%699, %697) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %701 = "stablehlo.slice"(%arg7) <{limit_indices = array<i64: 4, 288, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %702 = "stablehlo.reshape"(%701) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %703 = "stablehlo.dot_general"(%702, %697) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %704 = "stablehlo.slice"(%arg10) <{limit_indices = array<i64: 4, 288, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %705 = "stablehlo.reshape"(%704) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %706 = "stablehlo.dot_general"(%705, %697) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %707 = "stablehlo.reshape"(%700) : (tensor<288xf32>) -> tensor<144x2xf32>
      %708 = "stablehlo.reshape"(%703) : (tensor<288xf32>) -> tensor<144x2xf32>
      %709 = "stablehlo.dot_general"(%9, %708) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
      %710 = "stablehlo.dot_general"(%9, %707) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
      %711 = "stablehlo.reshape"(%710) : (tensor<144x2xf32>) -> tensor<288xf32>
      %712 = "stablehlo.slice"(%arg11) <{limit_indices = array<i64: 4, 1, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
      %713 = "stablehlo.reshape"(%712) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
      %714 = "stablehlo.reshape"(%709) : (tensor<144x2xf32>) -> tensor<1x288xf32>
      %715 = "stablehlo.slice"(%arg12) <{limit_indices = array<i64: 4, 1, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
      %716 = "stablehlo.reshape"(%715) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
      %717 = "stablehlo.reshape"(%706) : (tensor<288xf32>) -> tensor<1x288xf32>
      %718 = "stablehlo.slice"(%711) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %719 = "stablehlo.slice"(%713) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %720 = "stablehlo.slice"(%714) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %721 = "stablehlo.concatenate"(%719, %720) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %722 = "stablehlo.dot_general"(%721, %718) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %723 = "stablehlo.divide"(%722, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %724 = "stablehlo.reduce"(%723, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %725 = "stablehlo.broadcast_in_dim"(%724) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %726 = "stablehlo.compare"(%723, %725) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %727 = "stablehlo.convert"(%726) : (tensor<2xi1>) -> tensor<2xf32>
      %728 = "stablehlo.reduce"(%727, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %729 = "stablehlo.subtract"(%723, %725) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %730 = "stablehlo.exponential"(%729) : (tensor<2xf32>) -> tensor<2xf32>
      %731 = "stablehlo.slice"(%730) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %732 = "stablehlo.reshape"(%731) : (tensor<1xf32>) -> tensor<f32>
      %733 = "stablehlo.slice"(%730) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %734 = "stablehlo.reshape"(%733) : (tensor<1xf32>) -> tensor<f32>
      %735 = "stablehlo.add"(%732, %734) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %736 = "stablehlo.broadcast_in_dim"(%735) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %737 = "stablehlo.divide"(%730, %736) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %738 = "stablehlo.multiply"(%735, %735) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %739 = "stablehlo.divide"(%8, %738) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %740 = "stablehlo.slice"(%716) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %741 = "stablehlo.slice"(%717) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %742 = "stablehlo.concatenate"(%740, %741) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %743 = "stablehlo.dot_general"(%742, %737) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %744 = "stablehlo.slice"(%711) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %745 = "stablehlo.slice"(%713) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %746 = "stablehlo.slice"(%714) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %747 = "stablehlo.concatenate"(%745, %746) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %748 = "stablehlo.dot_general"(%747, %744) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %749 = "stablehlo.divide"(%748, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %750 = "stablehlo.reduce"(%749, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %751 = "stablehlo.broadcast_in_dim"(%750) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %752 = "stablehlo.compare"(%749, %751) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %753 = "stablehlo.convert"(%752) : (tensor<2xi1>) -> tensor<2xf32>
      %754 = "stablehlo.reduce"(%753, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %755 = "stablehlo.subtract"(%749, %751) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %756 = "stablehlo.exponential"(%755) : (tensor<2xf32>) -> tensor<2xf32>
      %757 = "stablehlo.slice"(%756) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %758 = "stablehlo.reshape"(%757) : (tensor<1xf32>) -> tensor<f32>
      %759 = "stablehlo.slice"(%756) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %760 = "stablehlo.reshape"(%759) : (tensor<1xf32>) -> tensor<f32>
      %761 = "stablehlo.add"(%758, %760) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %762 = "stablehlo.broadcast_in_dim"(%761) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %763 = "stablehlo.divide"(%756, %762) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %764 = "stablehlo.multiply"(%761, %761) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %765 = "stablehlo.divide"(%8, %764) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %766 = "stablehlo.slice"(%716) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %767 = "stablehlo.slice"(%717) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %768 = "stablehlo.concatenate"(%766, %767) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %769 = "stablehlo.dot_general"(%768, %763) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %770 = "stablehlo.slice"(%711) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %771 = "stablehlo.slice"(%713) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %772 = "stablehlo.slice"(%714) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %773 = "stablehlo.concatenate"(%771, %772) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %774 = "stablehlo.dot_general"(%773, %770) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %775 = "stablehlo.divide"(%774, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %776 = "stablehlo.reduce"(%775, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %777 = "stablehlo.broadcast_in_dim"(%776) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %778 = "stablehlo.compare"(%775, %777) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %779 = "stablehlo.convert"(%778) : (tensor<2xi1>) -> tensor<2xf32>
      %780 = "stablehlo.reduce"(%779, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %781 = "stablehlo.subtract"(%775, %777) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %782 = "stablehlo.exponential"(%781) : (tensor<2xf32>) -> tensor<2xf32>
      %783 = "stablehlo.slice"(%782) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %784 = "stablehlo.reshape"(%783) : (tensor<1xf32>) -> tensor<f32>
      %785 = "stablehlo.slice"(%782) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %786 = "stablehlo.reshape"(%785) : (tensor<1xf32>) -> tensor<f32>
      %787 = "stablehlo.add"(%784, %786) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %788 = "stablehlo.broadcast_in_dim"(%787) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %789 = "stablehlo.divide"(%782, %788) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %790 = "stablehlo.multiply"(%787, %787) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %791 = "stablehlo.divide"(%8, %790) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %792 = "stablehlo.slice"(%716) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %793 = "stablehlo.slice"(%717) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %794 = "stablehlo.concatenate"(%792, %793) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %795 = "stablehlo.dot_general"(%794, %789) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %796 = "stablehlo.slice"(%711) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %797 = "stablehlo.slice"(%713) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %798 = "stablehlo.slice"(%714) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %799 = "stablehlo.concatenate"(%797, %798) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %800 = "stablehlo.dot_general"(%799, %796) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %801 = "stablehlo.divide"(%800, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %802 = "stablehlo.reduce"(%801, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %803 = "stablehlo.broadcast_in_dim"(%802) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %804 = "stablehlo.compare"(%801, %803) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %805 = "stablehlo.convert"(%804) : (tensor<2xi1>) -> tensor<2xf32>
      %806 = "stablehlo.reduce"(%805, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %807 = "stablehlo.subtract"(%801, %803) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %808 = "stablehlo.exponential"(%807) : (tensor<2xf32>) -> tensor<2xf32>
      %809 = "stablehlo.slice"(%808) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %810 = "stablehlo.reshape"(%809) : (tensor<1xf32>) -> tensor<f32>
      %811 = "stablehlo.slice"(%808) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %812 = "stablehlo.reshape"(%811) : (tensor<1xf32>) -> tensor<f32>
      %813 = "stablehlo.add"(%810, %812) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %814 = "stablehlo.broadcast_in_dim"(%813) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %815 = "stablehlo.divide"(%808, %814) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %816 = "stablehlo.multiply"(%813, %813) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %817 = "stablehlo.divide"(%8, %816) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %818 = "stablehlo.slice"(%716) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %819 = "stablehlo.slice"(%717) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %820 = "stablehlo.concatenate"(%818, %819) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %821 = "stablehlo.dot_general"(%820, %815) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %822 = "stablehlo.slice"(%711) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %823 = "stablehlo.slice"(%713) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %824 = "stablehlo.slice"(%714) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %825 = "stablehlo.concatenate"(%823, %824) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %826 = "stablehlo.dot_general"(%825, %822) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %827 = "stablehlo.divide"(%826, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %828 = "stablehlo.reduce"(%827, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %829 = "stablehlo.broadcast_in_dim"(%828) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %830 = "stablehlo.compare"(%827, %829) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %831 = "stablehlo.convert"(%830) : (tensor<2xi1>) -> tensor<2xf32>
      %832 = "stablehlo.reduce"(%831, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %833 = "stablehlo.subtract"(%827, %829) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %834 = "stablehlo.exponential"(%833) : (tensor<2xf32>) -> tensor<2xf32>
      %835 = "stablehlo.slice"(%834) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %836 = "stablehlo.reshape"(%835) : (tensor<1xf32>) -> tensor<f32>
      %837 = "stablehlo.slice"(%834) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %838 = "stablehlo.reshape"(%837) : (tensor<1xf32>) -> tensor<f32>
      %839 = "stablehlo.add"(%836, %838) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %840 = "stablehlo.broadcast_in_dim"(%839) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %841 = "stablehlo.divide"(%834, %840) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %842 = "stablehlo.multiply"(%839, %839) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %843 = "stablehlo.divide"(%8, %842) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %844 = "stablehlo.slice"(%716) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %845 = "stablehlo.slice"(%717) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %846 = "stablehlo.concatenate"(%844, %845) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %847 = "stablehlo.dot_general"(%846, %841) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %848 = "stablehlo.slice"(%711) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %849 = "stablehlo.slice"(%713) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %850 = "stablehlo.slice"(%714) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %851 = "stablehlo.concatenate"(%849, %850) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %852 = "stablehlo.dot_general"(%851, %848) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %853 = "stablehlo.divide"(%852, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %854 = "stablehlo.reduce"(%853, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %855 = "stablehlo.broadcast_in_dim"(%854) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %856 = "stablehlo.compare"(%853, %855) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %857 = "stablehlo.convert"(%856) : (tensor<2xi1>) -> tensor<2xf32>
      %858 = "stablehlo.reduce"(%857, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %859 = "stablehlo.subtract"(%853, %855) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %860 = "stablehlo.exponential"(%859) : (tensor<2xf32>) -> tensor<2xf32>
      %861 = "stablehlo.slice"(%860) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %862 = "stablehlo.reshape"(%861) : (tensor<1xf32>) -> tensor<f32>
      %863 = "stablehlo.slice"(%860) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %864 = "stablehlo.reshape"(%863) : (tensor<1xf32>) -> tensor<f32>
      %865 = "stablehlo.add"(%862, %864) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %866 = "stablehlo.broadcast_in_dim"(%865) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %867 = "stablehlo.divide"(%860, %866) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %868 = "stablehlo.multiply"(%865, %865) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %869 = "stablehlo.divide"(%8, %868) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %870 = "stablehlo.slice"(%716) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %871 = "stablehlo.slice"(%717) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %872 = "stablehlo.concatenate"(%870, %871) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %873 = "stablehlo.dot_general"(%872, %867) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %874 = "stablehlo.concatenate"(%743, %769, %795, %821, %847, %873) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
      %875 = "stablehlo.slice"(%arg8) <{limit_indices = array<i64: 4, 288, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %876 = "stablehlo.reshape"(%875) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %877 = "stablehlo.dot_general"(%876, %874) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %878 = "stablehlo.add"(%684, %877) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %879 = "stablehlo.slice"(%arg2) <{limit_indices = array<i64: 4, 288>, start_indices = array<i64: 3, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
      %880 = "stablehlo.reshape"(%879) : (tensor<1x288xf32>) -> tensor<288xf32>
      %881 = "stablehlo.dot_general"(%878, %878) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
      %882 = "stablehlo.divide"(%881, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %883 = "stablehlo.add"(%882, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %884 = "stablehlo.sqrt"(%883) : (tensor<f32>) -> tensor<f32>
      %885 = "stablehlo.divide"(%7, %884) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %886 = "stablehlo.divide"(%8, %884) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %887 = "stablehlo.multiply"(%884, %884) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %888 = "stablehlo.divide"(%8, %887) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %889 = "stablehlo.multiply"(%880, %878) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %890 = "stablehlo.broadcast_in_dim"(%886) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
      %891 = "stablehlo.multiply"(%889, %890) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %892 = "stablehlo.slice"(%arg4) <{limit_indices = array<i64: 4, 768, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
      %893 = "stablehlo.reshape"(%892) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
      %894 = "stablehlo.dot_general"(%893, %891) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
      %895 = "stablehlo.slice"(%arg6) <{limit_indices = array<i64: 4, 768, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
      %896 = "stablehlo.reshape"(%895) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
      %897 = "stablehlo.dot_general"(%896, %891) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
      %898 = "stablehlo.negate"(%894) : (tensor<768xf32>) -> tensor<768xf32>
      %899 = "stablehlo.exponential"(%898) : (tensor<768xf32>) -> tensor<768xf32>
      %900 = "stablehlo.add"(%1, %899) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %901 = "stablehlo.divide"(%1, %900) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %902 = "stablehlo.multiply"(%900, %900) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %903 = "stablehlo.divide"(%1, %902) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %904 = "stablehlo.multiply"(%894, %901) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %905 = "stablehlo.multiply"(%904, %897) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %906 = "stablehlo.slice"(%arg5) <{limit_indices = array<i64: 4, 288, 768>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
      %907 = "stablehlo.reshape"(%906) : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
      %908 = "stablehlo.dot_general"(%907, %905) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
      %909 = "stablehlo.add"(%878, %908) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %910 = "stablehlo.slice"(%arg1) <{limit_indices = array<i64: 5, 288>, start_indices = array<i64: 4, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
      %911 = "stablehlo.reshape"(%910) : (tensor<1x288xf32>) -> tensor<288xf32>
      %912 = "stablehlo.dot_general"(%909, %909) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
      %913 = "stablehlo.divide"(%912, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %914 = "stablehlo.add"(%913, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %915 = "stablehlo.sqrt"(%914) : (tensor<f32>) -> tensor<f32>
      %916 = "stablehlo.divide"(%7, %915) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %917 = "stablehlo.divide"(%8, %915) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %918 = "stablehlo.multiply"(%915, %915) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %919 = "stablehlo.divide"(%8, %918) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %920 = "stablehlo.multiply"(%911, %909) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %921 = "stablehlo.broadcast_in_dim"(%917) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
      %922 = "stablehlo.multiply"(%920, %921) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %923 = "stablehlo.slice"(%arg9) <{limit_indices = array<i64: 5, 288, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %924 = "stablehlo.reshape"(%923) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %925 = "stablehlo.dot_general"(%924, %922) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %926 = "stablehlo.slice"(%arg7) <{limit_indices = array<i64: 5, 288, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %927 = "stablehlo.reshape"(%926) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %928 = "stablehlo.dot_general"(%927, %922) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %929 = "stablehlo.slice"(%arg10) <{limit_indices = array<i64: 5, 288, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %930 = "stablehlo.reshape"(%929) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %931 = "stablehlo.dot_general"(%930, %922) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %932 = "stablehlo.reshape"(%925) : (tensor<288xf32>) -> tensor<144x2xf32>
      %933 = "stablehlo.reshape"(%928) : (tensor<288xf32>) -> tensor<144x2xf32>
      %934 = "stablehlo.dot_general"(%9, %933) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
      %935 = "stablehlo.dot_general"(%9, %932) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
      %936 = "stablehlo.reshape"(%935) : (tensor<144x2xf32>) -> tensor<288xf32>
      %937 = "stablehlo.slice"(%arg11) <{limit_indices = array<i64: 5, 1, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
      %938 = "stablehlo.reshape"(%937) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
      %939 = "stablehlo.reshape"(%934) : (tensor<144x2xf32>) -> tensor<1x288xf32>
      %940 = "stablehlo.slice"(%arg12) <{limit_indices = array<i64: 5, 1, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
      %941 = "stablehlo.reshape"(%940) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
      %942 = "stablehlo.reshape"(%931) : (tensor<288xf32>) -> tensor<1x288xf32>
      %943 = "stablehlo.slice"(%936) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %944 = "stablehlo.slice"(%938) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %945 = "stablehlo.slice"(%939) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %946 = "stablehlo.concatenate"(%944, %945) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %947 = "stablehlo.dot_general"(%946, %943) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %948 = "stablehlo.divide"(%947, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %949 = "stablehlo.reduce"(%948, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %950 = "stablehlo.broadcast_in_dim"(%949) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %951 = "stablehlo.compare"(%948, %950) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %952 = "stablehlo.convert"(%951) : (tensor<2xi1>) -> tensor<2xf32>
      %953 = "stablehlo.reduce"(%952, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %954 = "stablehlo.subtract"(%948, %950) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %955 = "stablehlo.exponential"(%954) : (tensor<2xf32>) -> tensor<2xf32>
      %956 = "stablehlo.slice"(%955) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %957 = "stablehlo.reshape"(%956) : (tensor<1xf32>) -> tensor<f32>
      %958 = "stablehlo.slice"(%955) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %959 = "stablehlo.reshape"(%958) : (tensor<1xf32>) -> tensor<f32>
      %960 = "stablehlo.add"(%957, %959) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %961 = "stablehlo.broadcast_in_dim"(%960) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %962 = "stablehlo.divide"(%955, %961) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %963 = "stablehlo.multiply"(%960, %960) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %964 = "stablehlo.divide"(%8, %963) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %965 = "stablehlo.slice"(%941) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %966 = "stablehlo.slice"(%942) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %967 = "stablehlo.concatenate"(%965, %966) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %968 = "stablehlo.dot_general"(%967, %962) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %969 = "stablehlo.slice"(%936) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %970 = "stablehlo.slice"(%938) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %971 = "stablehlo.slice"(%939) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %972 = "stablehlo.concatenate"(%970, %971) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %973 = "stablehlo.dot_general"(%972, %969) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %974 = "stablehlo.divide"(%973, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %975 = "stablehlo.reduce"(%974, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %976 = "stablehlo.broadcast_in_dim"(%975) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %977 = "stablehlo.compare"(%974, %976) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %978 = "stablehlo.convert"(%977) : (tensor<2xi1>) -> tensor<2xf32>
      %979 = "stablehlo.reduce"(%978, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %980 = "stablehlo.subtract"(%974, %976) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %981 = "stablehlo.exponential"(%980) : (tensor<2xf32>) -> tensor<2xf32>
      %982 = "stablehlo.slice"(%981) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %983 = "stablehlo.reshape"(%982) : (tensor<1xf32>) -> tensor<f32>
      %984 = "stablehlo.slice"(%981) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %985 = "stablehlo.reshape"(%984) : (tensor<1xf32>) -> tensor<f32>
      %986 = "stablehlo.add"(%983, %985) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %987 = "stablehlo.broadcast_in_dim"(%986) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %988 = "stablehlo.divide"(%981, %987) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %989 = "stablehlo.multiply"(%986, %986) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %990 = "stablehlo.divide"(%8, %989) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %991 = "stablehlo.slice"(%941) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %992 = "stablehlo.slice"(%942) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %993 = "stablehlo.concatenate"(%991, %992) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %994 = "stablehlo.dot_general"(%993, %988) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %995 = "stablehlo.slice"(%936) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %996 = "stablehlo.slice"(%938) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %997 = "stablehlo.slice"(%939) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %998 = "stablehlo.concatenate"(%996, %997) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %999 = "stablehlo.dot_general"(%998, %995) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %1000 = "stablehlo.divide"(%999, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1001 = "stablehlo.reduce"(%1000, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1002 = "stablehlo.broadcast_in_dim"(%1001) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1003 = "stablehlo.compare"(%1000, %1002) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %1004 = "stablehlo.convert"(%1003) : (tensor<2xi1>) -> tensor<2xf32>
      %1005 = "stablehlo.reduce"(%1004, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1006 = "stablehlo.subtract"(%1000, %1002) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1007 = "stablehlo.exponential"(%1006) : (tensor<2xf32>) -> tensor<2xf32>
      %1008 = "stablehlo.slice"(%1007) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1009 = "stablehlo.reshape"(%1008) : (tensor<1xf32>) -> tensor<f32>
      %1010 = "stablehlo.slice"(%1007) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1011 = "stablehlo.reshape"(%1010) : (tensor<1xf32>) -> tensor<f32>
      %1012 = "stablehlo.add"(%1009, %1011) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1013 = "stablehlo.broadcast_in_dim"(%1012) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1014 = "stablehlo.divide"(%1007, %1013) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1015 = "stablehlo.multiply"(%1012, %1012) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1016 = "stablehlo.divide"(%8, %1015) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1017 = "stablehlo.slice"(%941) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1018 = "stablehlo.slice"(%942) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1019 = "stablehlo.concatenate"(%1017, %1018) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1020 = "stablehlo.dot_general"(%1019, %1014) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %1021 = "stablehlo.slice"(%936) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1022 = "stablehlo.slice"(%938) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1023 = "stablehlo.slice"(%939) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1024 = "stablehlo.concatenate"(%1022, %1023) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1025 = "stablehlo.dot_general"(%1024, %1021) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %1026 = "stablehlo.divide"(%1025, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1027 = "stablehlo.reduce"(%1026, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1028 = "stablehlo.broadcast_in_dim"(%1027) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1029 = "stablehlo.compare"(%1026, %1028) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %1030 = "stablehlo.convert"(%1029) : (tensor<2xi1>) -> tensor<2xf32>
      %1031 = "stablehlo.reduce"(%1030, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1032 = "stablehlo.subtract"(%1026, %1028) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1033 = "stablehlo.exponential"(%1032) : (tensor<2xf32>) -> tensor<2xf32>
      %1034 = "stablehlo.slice"(%1033) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1035 = "stablehlo.reshape"(%1034) : (tensor<1xf32>) -> tensor<f32>
      %1036 = "stablehlo.slice"(%1033) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1037 = "stablehlo.reshape"(%1036) : (tensor<1xf32>) -> tensor<f32>
      %1038 = "stablehlo.add"(%1035, %1037) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1039 = "stablehlo.broadcast_in_dim"(%1038) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1040 = "stablehlo.divide"(%1033, %1039) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1041 = "stablehlo.multiply"(%1038, %1038) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1042 = "stablehlo.divide"(%8, %1041) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1043 = "stablehlo.slice"(%941) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1044 = "stablehlo.slice"(%942) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1045 = "stablehlo.concatenate"(%1043, %1044) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1046 = "stablehlo.dot_general"(%1045, %1040) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %1047 = "stablehlo.slice"(%936) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1048 = "stablehlo.slice"(%938) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1049 = "stablehlo.slice"(%939) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1050 = "stablehlo.concatenate"(%1048, %1049) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1051 = "stablehlo.dot_general"(%1050, %1047) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %1052 = "stablehlo.divide"(%1051, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1053 = "stablehlo.reduce"(%1052, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1054 = "stablehlo.broadcast_in_dim"(%1053) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1055 = "stablehlo.compare"(%1052, %1054) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %1056 = "stablehlo.convert"(%1055) : (tensor<2xi1>) -> tensor<2xf32>
      %1057 = "stablehlo.reduce"(%1056, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1058 = "stablehlo.subtract"(%1052, %1054) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1059 = "stablehlo.exponential"(%1058) : (tensor<2xf32>) -> tensor<2xf32>
      %1060 = "stablehlo.slice"(%1059) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1061 = "stablehlo.reshape"(%1060) : (tensor<1xf32>) -> tensor<f32>
      %1062 = "stablehlo.slice"(%1059) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1063 = "stablehlo.reshape"(%1062) : (tensor<1xf32>) -> tensor<f32>
      %1064 = "stablehlo.add"(%1061, %1063) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1065 = "stablehlo.broadcast_in_dim"(%1064) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1066 = "stablehlo.divide"(%1059, %1065) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1067 = "stablehlo.multiply"(%1064, %1064) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1068 = "stablehlo.divide"(%8, %1067) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1069 = "stablehlo.slice"(%941) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1070 = "stablehlo.slice"(%942) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1071 = "stablehlo.concatenate"(%1069, %1070) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1072 = "stablehlo.dot_general"(%1071, %1066) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %1073 = "stablehlo.slice"(%936) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1074 = "stablehlo.slice"(%938) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1075 = "stablehlo.slice"(%939) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1076 = "stablehlo.concatenate"(%1074, %1075) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1077 = "stablehlo.dot_general"(%1076, %1073) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %1078 = "stablehlo.divide"(%1077, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1079 = "stablehlo.reduce"(%1078, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1080 = "stablehlo.broadcast_in_dim"(%1079) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1081 = "stablehlo.compare"(%1078, %1080) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %1082 = "stablehlo.convert"(%1081) : (tensor<2xi1>) -> tensor<2xf32>
      %1083 = "stablehlo.reduce"(%1082, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1084 = "stablehlo.subtract"(%1078, %1080) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1085 = "stablehlo.exponential"(%1084) : (tensor<2xf32>) -> tensor<2xf32>
      %1086 = "stablehlo.slice"(%1085) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1087 = "stablehlo.reshape"(%1086) : (tensor<1xf32>) -> tensor<f32>
      %1088 = "stablehlo.slice"(%1085) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1089 = "stablehlo.reshape"(%1088) : (tensor<1xf32>) -> tensor<f32>
      %1090 = "stablehlo.add"(%1087, %1089) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1091 = "stablehlo.broadcast_in_dim"(%1090) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1092 = "stablehlo.divide"(%1085, %1091) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1093 = "stablehlo.multiply"(%1090, %1090) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1094 = "stablehlo.divide"(%8, %1093) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1095 = "stablehlo.slice"(%941) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1096 = "stablehlo.slice"(%942) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1097 = "stablehlo.concatenate"(%1095, %1096) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1098 = "stablehlo.dot_general"(%1097, %1092) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %1099 = "stablehlo.concatenate"(%968, %994, %1020, %1046, %1072, %1098) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
      %1100 = "stablehlo.slice"(%arg8) <{limit_indices = array<i64: 5, 288, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %1101 = "stablehlo.reshape"(%1100) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %1102 = "stablehlo.dot_general"(%1101, %1099) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1103 = "stablehlo.add"(%909, %1102) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1104 = "stablehlo.slice"(%arg2) <{limit_indices = array<i64: 5, 288>, start_indices = array<i64: 4, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
      %1105 = "stablehlo.reshape"(%1104) : (tensor<1x288xf32>) -> tensor<288xf32>
      %1106 = "stablehlo.dot_general"(%1103, %1103) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
      %1107 = "stablehlo.divide"(%1106, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1108 = "stablehlo.add"(%1107, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1109 = "stablehlo.sqrt"(%1108) : (tensor<f32>) -> tensor<f32>
      %1110 = "stablehlo.divide"(%7, %1109) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1111 = "stablehlo.divide"(%8, %1109) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1112 = "stablehlo.multiply"(%1109, %1109) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1113 = "stablehlo.divide"(%8, %1112) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1114 = "stablehlo.multiply"(%1105, %1103) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1115 = "stablehlo.broadcast_in_dim"(%1111) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
      %1116 = "stablehlo.multiply"(%1114, %1115) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1117 = "stablehlo.slice"(%arg4) <{limit_indices = array<i64: 5, 768, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
      %1118 = "stablehlo.reshape"(%1117) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
      %1119 = "stablehlo.dot_general"(%1118, %1116) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
      %1120 = "stablehlo.slice"(%arg6) <{limit_indices = array<i64: 5, 768, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
      %1121 = "stablehlo.reshape"(%1120) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
      %1122 = "stablehlo.dot_general"(%1121, %1116) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
      %1123 = "stablehlo.negate"(%1119) : (tensor<768xf32>) -> tensor<768xf32>
      %1124 = "stablehlo.exponential"(%1123) : (tensor<768xf32>) -> tensor<768xf32>
      %1125 = "stablehlo.add"(%1, %1124) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1126 = "stablehlo.divide"(%1, %1125) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1127 = "stablehlo.multiply"(%1125, %1125) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1128 = "stablehlo.divide"(%1, %1127) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1129 = "stablehlo.multiply"(%1119, %1126) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1130 = "stablehlo.multiply"(%1129, %1122) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1131 = "stablehlo.slice"(%arg5) <{limit_indices = array<i64: 5, 288, 768>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
      %1132 = "stablehlo.reshape"(%1131) : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
      %1133 = "stablehlo.dot_general"(%1132, %1130) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
      %1134 = "stablehlo.add"(%1103, %1133) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1135 = "stablehlo.slice"(%arg1) <{limit_indices = array<i64: 6, 288>, start_indices = array<i64: 5, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
      %1136 = "stablehlo.reshape"(%1135) : (tensor<1x288xf32>) -> tensor<288xf32>
      %1137 = "stablehlo.dot_general"(%1134, %1134) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
      %1138 = "stablehlo.divide"(%1137, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1139 = "stablehlo.add"(%1138, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1140 = "stablehlo.sqrt"(%1139) : (tensor<f32>) -> tensor<f32>
      %1141 = "stablehlo.divide"(%7, %1140) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1142 = "stablehlo.divide"(%8, %1140) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1143 = "stablehlo.multiply"(%1140, %1140) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1144 = "stablehlo.divide"(%8, %1143) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1145 = "stablehlo.multiply"(%1136, %1134) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1146 = "stablehlo.broadcast_in_dim"(%1142) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
      %1147 = "stablehlo.multiply"(%1145, %1146) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1148 = "stablehlo.slice"(%arg9) <{limit_indices = array<i64: 6, 288, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %1149 = "stablehlo.reshape"(%1148) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %1150 = "stablehlo.dot_general"(%1149, %1147) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1151 = "stablehlo.slice"(%arg7) <{limit_indices = array<i64: 6, 288, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %1152 = "stablehlo.reshape"(%1151) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %1153 = "stablehlo.dot_general"(%1152, %1147) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1154 = "stablehlo.slice"(%arg10) <{limit_indices = array<i64: 6, 288, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %1155 = "stablehlo.reshape"(%1154) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %1156 = "stablehlo.dot_general"(%1155, %1147) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1157 = "stablehlo.reshape"(%1150) : (tensor<288xf32>) -> tensor<144x2xf32>
      %1158 = "stablehlo.reshape"(%1153) : (tensor<288xf32>) -> tensor<144x2xf32>
      %1159 = "stablehlo.dot_general"(%9, %1158) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
      %1160 = "stablehlo.dot_general"(%9, %1157) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
      %1161 = "stablehlo.reshape"(%1160) : (tensor<144x2xf32>) -> tensor<288xf32>
      %1162 = "stablehlo.slice"(%arg11) <{limit_indices = array<i64: 6, 1, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
      %1163 = "stablehlo.reshape"(%1162) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
      %1164 = "stablehlo.reshape"(%1159) : (tensor<144x2xf32>) -> tensor<1x288xf32>
      %1165 = "stablehlo.slice"(%arg12) <{limit_indices = array<i64: 6, 1, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
      %1166 = "stablehlo.reshape"(%1165) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
      %1167 = "stablehlo.reshape"(%1156) : (tensor<288xf32>) -> tensor<1x288xf32>
      %1168 = "stablehlo.slice"(%1161) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1169 = "stablehlo.slice"(%1163) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1170 = "stablehlo.slice"(%1164) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1171 = "stablehlo.concatenate"(%1169, %1170) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1172 = "stablehlo.dot_general"(%1171, %1168) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %1173 = "stablehlo.divide"(%1172, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1174 = "stablehlo.reduce"(%1173, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1175 = "stablehlo.broadcast_in_dim"(%1174) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1176 = "stablehlo.compare"(%1173, %1175) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %1177 = "stablehlo.convert"(%1176) : (tensor<2xi1>) -> tensor<2xf32>
      %1178 = "stablehlo.reduce"(%1177, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1179 = "stablehlo.subtract"(%1173, %1175) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1180 = "stablehlo.exponential"(%1179) : (tensor<2xf32>) -> tensor<2xf32>
      %1181 = "stablehlo.slice"(%1180) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1182 = "stablehlo.reshape"(%1181) : (tensor<1xf32>) -> tensor<f32>
      %1183 = "stablehlo.slice"(%1180) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1184 = "stablehlo.reshape"(%1183) : (tensor<1xf32>) -> tensor<f32>
      %1185 = "stablehlo.add"(%1182, %1184) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1186 = "stablehlo.broadcast_in_dim"(%1185) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1187 = "stablehlo.divide"(%1180, %1186) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1188 = "stablehlo.multiply"(%1185, %1185) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1189 = "stablehlo.divide"(%8, %1188) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1190 = "stablehlo.slice"(%1166) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1191 = "stablehlo.slice"(%1167) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1192 = "stablehlo.concatenate"(%1190, %1191) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1193 = "stablehlo.dot_general"(%1192, %1187) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %1194 = "stablehlo.slice"(%1161) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1195 = "stablehlo.slice"(%1163) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1196 = "stablehlo.slice"(%1164) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1197 = "stablehlo.concatenate"(%1195, %1196) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1198 = "stablehlo.dot_general"(%1197, %1194) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %1199 = "stablehlo.divide"(%1198, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1200 = "stablehlo.reduce"(%1199, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1201 = "stablehlo.broadcast_in_dim"(%1200) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1202 = "stablehlo.compare"(%1199, %1201) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %1203 = "stablehlo.convert"(%1202) : (tensor<2xi1>) -> tensor<2xf32>
      %1204 = "stablehlo.reduce"(%1203, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1205 = "stablehlo.subtract"(%1199, %1201) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1206 = "stablehlo.exponential"(%1205) : (tensor<2xf32>) -> tensor<2xf32>
      %1207 = "stablehlo.slice"(%1206) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1208 = "stablehlo.reshape"(%1207) : (tensor<1xf32>) -> tensor<f32>
      %1209 = "stablehlo.slice"(%1206) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1210 = "stablehlo.reshape"(%1209) : (tensor<1xf32>) -> tensor<f32>
      %1211 = "stablehlo.add"(%1208, %1210) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1212 = "stablehlo.broadcast_in_dim"(%1211) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1213 = "stablehlo.divide"(%1206, %1212) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1214 = "stablehlo.multiply"(%1211, %1211) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1215 = "stablehlo.divide"(%8, %1214) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1216 = "stablehlo.slice"(%1166) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1217 = "stablehlo.slice"(%1167) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1218 = "stablehlo.concatenate"(%1216, %1217) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1219 = "stablehlo.dot_general"(%1218, %1213) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %1220 = "stablehlo.slice"(%1161) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1221 = "stablehlo.slice"(%1163) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1222 = "stablehlo.slice"(%1164) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1223 = "stablehlo.concatenate"(%1221, %1222) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1224 = "stablehlo.dot_general"(%1223, %1220) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %1225 = "stablehlo.divide"(%1224, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1226 = "stablehlo.reduce"(%1225, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1227 = "stablehlo.broadcast_in_dim"(%1226) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1228 = "stablehlo.compare"(%1225, %1227) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %1229 = "stablehlo.convert"(%1228) : (tensor<2xi1>) -> tensor<2xf32>
      %1230 = "stablehlo.reduce"(%1229, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1231 = "stablehlo.subtract"(%1225, %1227) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1232 = "stablehlo.exponential"(%1231) : (tensor<2xf32>) -> tensor<2xf32>
      %1233 = "stablehlo.slice"(%1232) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1234 = "stablehlo.reshape"(%1233) : (tensor<1xf32>) -> tensor<f32>
      %1235 = "stablehlo.slice"(%1232) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1236 = "stablehlo.reshape"(%1235) : (tensor<1xf32>) -> tensor<f32>
      %1237 = "stablehlo.add"(%1234, %1236) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1238 = "stablehlo.broadcast_in_dim"(%1237) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1239 = "stablehlo.divide"(%1232, %1238) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1240 = "stablehlo.multiply"(%1237, %1237) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1241 = "stablehlo.divide"(%8, %1240) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1242 = "stablehlo.slice"(%1166) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1243 = "stablehlo.slice"(%1167) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1244 = "stablehlo.concatenate"(%1242, %1243) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1245 = "stablehlo.dot_general"(%1244, %1239) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %1246 = "stablehlo.slice"(%1161) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1247 = "stablehlo.slice"(%1163) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1248 = "stablehlo.slice"(%1164) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1249 = "stablehlo.concatenate"(%1247, %1248) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1250 = "stablehlo.dot_general"(%1249, %1246) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %1251 = "stablehlo.divide"(%1250, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1252 = "stablehlo.reduce"(%1251, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1253 = "stablehlo.broadcast_in_dim"(%1252) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1254 = "stablehlo.compare"(%1251, %1253) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %1255 = "stablehlo.convert"(%1254) : (tensor<2xi1>) -> tensor<2xf32>
      %1256 = "stablehlo.reduce"(%1255, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1257 = "stablehlo.subtract"(%1251, %1253) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1258 = "stablehlo.exponential"(%1257) : (tensor<2xf32>) -> tensor<2xf32>
      %1259 = "stablehlo.slice"(%1258) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1260 = "stablehlo.reshape"(%1259) : (tensor<1xf32>) -> tensor<f32>
      %1261 = "stablehlo.slice"(%1258) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1262 = "stablehlo.reshape"(%1261) : (tensor<1xf32>) -> tensor<f32>
      %1263 = "stablehlo.add"(%1260, %1262) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1264 = "stablehlo.broadcast_in_dim"(%1263) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1265 = "stablehlo.divide"(%1258, %1264) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1266 = "stablehlo.multiply"(%1263, %1263) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1267 = "stablehlo.divide"(%8, %1266) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1268 = "stablehlo.slice"(%1166) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1269 = "stablehlo.slice"(%1167) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1270 = "stablehlo.concatenate"(%1268, %1269) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1271 = "stablehlo.dot_general"(%1270, %1265) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %1272 = "stablehlo.slice"(%1161) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1273 = "stablehlo.slice"(%1163) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1274 = "stablehlo.slice"(%1164) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1275 = "stablehlo.concatenate"(%1273, %1274) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1276 = "stablehlo.dot_general"(%1275, %1272) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %1277 = "stablehlo.divide"(%1276, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1278 = "stablehlo.reduce"(%1277, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1279 = "stablehlo.broadcast_in_dim"(%1278) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1280 = "stablehlo.compare"(%1277, %1279) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %1281 = "stablehlo.convert"(%1280) : (tensor<2xi1>) -> tensor<2xf32>
      %1282 = "stablehlo.reduce"(%1281, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1283 = "stablehlo.subtract"(%1277, %1279) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1284 = "stablehlo.exponential"(%1283) : (tensor<2xf32>) -> tensor<2xf32>
      %1285 = "stablehlo.slice"(%1284) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1286 = "stablehlo.reshape"(%1285) : (tensor<1xf32>) -> tensor<f32>
      %1287 = "stablehlo.slice"(%1284) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1288 = "stablehlo.reshape"(%1287) : (tensor<1xf32>) -> tensor<f32>
      %1289 = "stablehlo.add"(%1286, %1288) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1290 = "stablehlo.broadcast_in_dim"(%1289) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1291 = "stablehlo.divide"(%1284, %1290) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1292 = "stablehlo.multiply"(%1289, %1289) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1293 = "stablehlo.divide"(%8, %1292) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1294 = "stablehlo.slice"(%1166) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1295 = "stablehlo.slice"(%1167) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1296 = "stablehlo.concatenate"(%1294, %1295) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1297 = "stablehlo.dot_general"(%1296, %1291) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %1298 = "stablehlo.slice"(%1161) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1299 = "stablehlo.slice"(%1163) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1300 = "stablehlo.slice"(%1164) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1301 = "stablehlo.concatenate"(%1299, %1300) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1302 = "stablehlo.dot_general"(%1301, %1298) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
      %1303 = "stablehlo.divide"(%1302, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1304 = "stablehlo.reduce"(%1303, %4) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1305 = "stablehlo.broadcast_in_dim"(%1304) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1306 = "stablehlo.compare"(%1303, %1305) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
      %1307 = "stablehlo.convert"(%1306) : (tensor<2xi1>) -> tensor<2xf32>
      %1308 = "stablehlo.reduce"(%1307, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1309 = "stablehlo.subtract"(%1303, %1305) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1310 = "stablehlo.exponential"(%1309) : (tensor<2xf32>) -> tensor<2xf32>
      %1311 = "stablehlo.slice"(%1310) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1312 = "stablehlo.reshape"(%1311) : (tensor<1xf32>) -> tensor<f32>
      %1313 = "stablehlo.slice"(%1310) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
      %1314 = "stablehlo.reshape"(%1313) : (tensor<1xf32>) -> tensor<f32>
      %1315 = "stablehlo.add"(%1312, %1314) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1316 = "stablehlo.broadcast_in_dim"(%1315) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1317 = "stablehlo.divide"(%1310, %1316) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1318 = "stablehlo.multiply"(%1315, %1315) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1319 = "stablehlo.divide"(%8, %1318) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1320 = "stablehlo.slice"(%1166) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1321 = "stablehlo.slice"(%1167) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
      %1322 = "stablehlo.concatenate"(%1320, %1321) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
      %1323 = "stablehlo.dot_general"(%1322, %1317) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
      %1324 = "stablehlo.concatenate"(%1193, %1219, %1245, %1271, %1297, %1323) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
      %1325 = "stablehlo.slice"(%arg8) <{limit_indices = array<i64: 6, 288, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
      %1326 = "stablehlo.reshape"(%1325) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
      %1327 = "stablehlo.dot_general"(%1326, %1324) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1328 = "stablehlo.add"(%1134, %1327) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1329 = "stablehlo.slice"(%arg2) <{limit_indices = array<i64: 6, 288>, start_indices = array<i64: 5, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
      %1330 = "stablehlo.reshape"(%1329) : (tensor<1x288xf32>) -> tensor<288xf32>
      %1331 = "stablehlo.dot_general"(%1328, %1328) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
      %1332 = "stablehlo.divide"(%1331, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1333 = "stablehlo.add"(%1332, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1334 = "stablehlo.sqrt"(%1333) : (tensor<f32>) -> tensor<f32>
      %1335 = "stablehlo.divide"(%7, %1334) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1336 = "stablehlo.divide"(%8, %1334) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1337 = "stablehlo.multiply"(%1334, %1334) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1338 = "stablehlo.divide"(%8, %1337) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1339 = "stablehlo.multiply"(%1330, %1328) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1340 = "stablehlo.broadcast_in_dim"(%1336) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
      %1341 = "stablehlo.multiply"(%1339, %1340) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1342 = "stablehlo.slice"(%arg4) <{limit_indices = array<i64: 6, 768, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
      %1343 = "stablehlo.reshape"(%1342) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
      %1344 = "stablehlo.dot_general"(%1343, %1341) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
      %1345 = "stablehlo.slice"(%arg6) <{limit_indices = array<i64: 6, 768, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
      %1346 = "stablehlo.reshape"(%1345) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
      %1347 = "stablehlo.dot_general"(%1346, %1341) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
      %1348 = "stablehlo.negate"(%1344) : (tensor<768xf32>) -> tensor<768xf32>
      %1349 = "stablehlo.exponential"(%1348) : (tensor<768xf32>) -> tensor<768xf32>
      %1350 = "stablehlo.add"(%1, %1349) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1351 = "stablehlo.divide"(%1, %1350) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1352 = "stablehlo.multiply"(%1350, %1350) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1353 = "stablehlo.divide"(%1, %1352) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1354 = "stablehlo.multiply"(%1344, %1351) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1355 = "stablehlo.multiply"(%1354, %1347) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1356 = "stablehlo.slice"(%arg5) <{limit_indices = array<i64: 6, 288, 768>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
      %1357 = "stablehlo.reshape"(%1356) : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
      %1358 = "stablehlo.dot_general"(%1357, %1355) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
      %1359 = "stablehlo.add"(%1328, %1358) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1360 = "stablehlo.dot_general"(%1359, %1359) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
      %1361 = "stablehlo.divide"(%1360, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1362 = "stablehlo.add"(%1361, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1363 = "stablehlo.sqrt"(%1362) : (tensor<f32>) -> tensor<f32>
      %1364 = "stablehlo.divide"(%7, %1363) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1365 = "stablehlo.divide"(%8, %1363) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1366 = "stablehlo.multiply"(%1363, %1363) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1367 = "stablehlo.divide"(%8, %1366) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1368 = "stablehlo.multiply"(%arg3, %1359) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1369 = "stablehlo.multiply"(%1368, %arg13) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1370 = "stablehlo.reduce"(%1369, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
      %1371 = "stablehlo.multiply"(%1370, %1367) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1372 = "stablehlo.negate"(%1371) : (tensor<f32>) -> tensor<f32>
      %1373 = "stablehlo.multiply"(%1372, %1364) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1374 = "stablehlo.divide"(%1373, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1375 = "stablehlo.dot_general"(%1374, %1359) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
      %1376 = "stablehlo.add"(%1375, %1375) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1377 = "stablehlo.broadcast_in_dim"(%1365) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
      %1378 = "stablehlo.multiply"(%arg13, %1377) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1379 = "stablehlo.multiply"(%arg3, %1378) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1380 = "stablehlo.add"(%1376, %1379) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1381 = "stablehlo.dot_general"(%1380, %1357) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
      %1382 = "stablehlo.multiply"(%1354, %1381) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1383 = "stablehlo.dot_general"(%1382, %1346) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
      %1384 = "stablehlo.dot_general"(%1382, %1341) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
      %1385 = "stablehlo.reshape"(%1384) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
      %1386 = "stablehlo.multiply"(%1381, %1347) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1387 = "stablehlo.multiply"(%1344, %1386) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1388 = "stablehlo.multiply"(%1387, %1353) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1389 = "stablehlo.negate"(%1388) : (tensor<768xf32>) -> tensor<768xf32>
      %1390 = "stablehlo.multiply"(%1389, %1349) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1391 = "stablehlo.negate"(%1390) : (tensor<768xf32>) -> tensor<768xf32>
      %1392 = "stablehlo.multiply"(%1386, %1351) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1393 = "stablehlo.add"(%1391, %1392) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1394 = "stablehlo.dot_general"(%1393, %1343) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
      %1395 = "stablehlo.add"(%1383, %1394) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1396 = "stablehlo.multiply"(%1339, %1395) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1397 = "stablehlo.reduce"(%1396, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
      %1398 = "stablehlo.multiply"(%1397, %1338) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1399 = "stablehlo.negate"(%1398) : (tensor<f32>) -> tensor<f32>
      %1400 = "stablehlo.multiply"(%1399, %1335) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1401 = "stablehlo.divide"(%1400, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1402 = "stablehlo.dot_general"(%1401, %1328) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
      %1403 = "stablehlo.add"(%1380, %1402) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1404 = "stablehlo.add"(%1403, %1402) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1405 = "stablehlo.multiply"(%1395, %1340) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1406 = "stablehlo.multiply"(%1330, %1405) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1407 = "stablehlo.add"(%1404, %1406) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1408 = "stablehlo.dot_general"(%1407, %1326) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %1409 = "stablehlo.slice"(%1408) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1410 = "stablehlo.slice"(%1408) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1411 = "stablehlo.slice"(%1408) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1412 = "stablehlo.slice"(%1408) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1413 = "stablehlo.slice"(%1408) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1414 = "stablehlo.slice"(%1408) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1415 = "stablehlo.dot_general"(%1414, %1322) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1416 = "stablehlo.broadcast_in_dim"(%1319) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1417 = "stablehlo.multiply"(%1415, %1416) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1418 = "stablehlo.multiply"(%1417, %1310) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1419 = "stablehlo.reduce"(%1418, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1420 = "stablehlo.negate"(%1419) : (tensor<f32>) -> tensor<f32>
      %1421 = "stablehlo.broadcast_in_dim"(%1420) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1422 = "stablehlo.divide"(%1415, %1316) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1423 = "stablehlo.add"(%1421, %1422) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1424 = "stablehlo.multiply"(%1423, %1310) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1425 = "stablehlo.negate"(%1424) : (tensor<2xf32>) -> tensor<2xf32>
      %1426 = "stablehlo.reduce"(%1425, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1427 = "stablehlo.divide"(%1426, %1308) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1428 = "stablehlo.broadcast_in_dim"(%1427) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1429 = "stablehlo.multiply"(%1428, %1307) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1430 = "stablehlo.add"(%1424, %1429) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1431 = "stablehlo.divide"(%1430, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1432 = "stablehlo.dot_general"(%1431, %1301) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1433 = "stablehlo.dot_general"(%1431, %1298) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1434 = "stablehlo.dot_general"(%1317, %1414) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1435 = "stablehlo.dot_general"(%1413, %1296) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1436 = "stablehlo.broadcast_in_dim"(%1293) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1437 = "stablehlo.multiply"(%1435, %1436) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1438 = "stablehlo.multiply"(%1437, %1284) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1439 = "stablehlo.reduce"(%1438, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1440 = "stablehlo.negate"(%1439) : (tensor<f32>) -> tensor<f32>
      %1441 = "stablehlo.broadcast_in_dim"(%1440) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1442 = "stablehlo.divide"(%1435, %1290) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1443 = "stablehlo.add"(%1441, %1442) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1444 = "stablehlo.multiply"(%1443, %1284) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1445 = "stablehlo.negate"(%1444) : (tensor<2xf32>) -> tensor<2xf32>
      %1446 = "stablehlo.reduce"(%1445, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1447 = "stablehlo.divide"(%1446, %1282) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1448 = "stablehlo.broadcast_in_dim"(%1447) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1449 = "stablehlo.multiply"(%1448, %1281) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1450 = "stablehlo.add"(%1444, %1449) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1451 = "stablehlo.divide"(%1450, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1452 = "stablehlo.dot_general"(%1451, %1275) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1453 = "stablehlo.dot_general"(%1451, %1272) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1454 = "stablehlo.dot_general"(%1291, %1413) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1455 = "stablehlo.dot_general"(%1412, %1270) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1456 = "stablehlo.broadcast_in_dim"(%1267) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1457 = "stablehlo.multiply"(%1455, %1456) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1458 = "stablehlo.multiply"(%1457, %1258) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1459 = "stablehlo.reduce"(%1458, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1460 = "stablehlo.negate"(%1459) : (tensor<f32>) -> tensor<f32>
      %1461 = "stablehlo.broadcast_in_dim"(%1460) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1462 = "stablehlo.divide"(%1455, %1264) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1463 = "stablehlo.add"(%1461, %1462) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1464 = "stablehlo.multiply"(%1463, %1258) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1465 = "stablehlo.negate"(%1464) : (tensor<2xf32>) -> tensor<2xf32>
      %1466 = "stablehlo.reduce"(%1465, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1467 = "stablehlo.divide"(%1466, %1256) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1468 = "stablehlo.broadcast_in_dim"(%1467) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1469 = "stablehlo.multiply"(%1468, %1255) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1470 = "stablehlo.add"(%1464, %1469) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1471 = "stablehlo.divide"(%1470, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1472 = "stablehlo.dot_general"(%1471, %1249) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1473 = "stablehlo.dot_general"(%1471, %1246) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1474 = "stablehlo.dot_general"(%1265, %1412) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1475 = "stablehlo.dot_general"(%1411, %1244) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1476 = "stablehlo.broadcast_in_dim"(%1241) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1477 = "stablehlo.multiply"(%1475, %1476) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1478 = "stablehlo.multiply"(%1477, %1232) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1479 = "stablehlo.reduce"(%1478, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1480 = "stablehlo.negate"(%1479) : (tensor<f32>) -> tensor<f32>
      %1481 = "stablehlo.broadcast_in_dim"(%1480) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1482 = "stablehlo.divide"(%1475, %1238) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1483 = "stablehlo.add"(%1481, %1482) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1484 = "stablehlo.multiply"(%1483, %1232) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1485 = "stablehlo.negate"(%1484) : (tensor<2xf32>) -> tensor<2xf32>
      %1486 = "stablehlo.reduce"(%1485, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1487 = "stablehlo.divide"(%1486, %1230) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1488 = "stablehlo.broadcast_in_dim"(%1487) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1489 = "stablehlo.multiply"(%1488, %1229) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1490 = "stablehlo.add"(%1484, %1489) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1491 = "stablehlo.divide"(%1490, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1492 = "stablehlo.dot_general"(%1491, %1223) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1493 = "stablehlo.dot_general"(%1491, %1220) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1494 = "stablehlo.dot_general"(%1239, %1411) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1495 = "stablehlo.dot_general"(%1410, %1218) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1496 = "stablehlo.broadcast_in_dim"(%1215) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1497 = "stablehlo.multiply"(%1495, %1496) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1498 = "stablehlo.multiply"(%1497, %1206) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1499 = "stablehlo.reduce"(%1498, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1500 = "stablehlo.negate"(%1499) : (tensor<f32>) -> tensor<f32>
      %1501 = "stablehlo.broadcast_in_dim"(%1500) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1502 = "stablehlo.divide"(%1495, %1212) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1503 = "stablehlo.add"(%1501, %1502) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1504 = "stablehlo.multiply"(%1503, %1206) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1505 = "stablehlo.negate"(%1504) : (tensor<2xf32>) -> tensor<2xf32>
      %1506 = "stablehlo.reduce"(%1505, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1507 = "stablehlo.divide"(%1506, %1204) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1508 = "stablehlo.broadcast_in_dim"(%1507) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1509 = "stablehlo.multiply"(%1508, %1203) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1510 = "stablehlo.add"(%1504, %1509) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1511 = "stablehlo.divide"(%1510, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1512 = "stablehlo.dot_general"(%1511, %1197) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1513 = "stablehlo.dot_general"(%1511, %1194) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1514 = "stablehlo.dot_general"(%1213, %1410) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1515 = "stablehlo.dot_general"(%1409, %1192) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1516 = "stablehlo.broadcast_in_dim"(%1189) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1517 = "stablehlo.multiply"(%1515, %1516) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1518 = "stablehlo.multiply"(%1517, %1180) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1519 = "stablehlo.reduce"(%1518, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1520 = "stablehlo.negate"(%1519) : (tensor<f32>) -> tensor<f32>
      %1521 = "stablehlo.broadcast_in_dim"(%1520) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1522 = "stablehlo.divide"(%1515, %1186) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1523 = "stablehlo.add"(%1521, %1522) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1524 = "stablehlo.multiply"(%1523, %1180) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1525 = "stablehlo.negate"(%1524) : (tensor<2xf32>) -> tensor<2xf32>
      %1526 = "stablehlo.reduce"(%1525, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1527 = "stablehlo.divide"(%1526, %1178) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1528 = "stablehlo.broadcast_in_dim"(%1527) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1529 = "stablehlo.multiply"(%1528, %1177) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1530 = "stablehlo.add"(%1524, %1529) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1531 = "stablehlo.divide"(%1530, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1532 = "stablehlo.dot_general"(%1531, %1171) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1533 = "stablehlo.concatenate"(%1532, %1512, %1492, %1472, %1452, %1432) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
      %1534 = "stablehlo.reshape"(%1533) : (tensor<288xf32>) -> tensor<144x2xf32>
      %1535 = "stablehlo.dot_general"(%1534, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
      %1536 = "stablehlo.reshape"(%1535) : (tensor<144x2xf32>) -> tensor<288xf32>
      %1537 = "stablehlo.dot_general"(%1536, %1149) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %1538 = "stablehlo.dot_general"(%1536, %1147) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %1539 = "stablehlo.reshape"(%1538) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %1540 = "stablehlo.dot_general"(%1531, %1168) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1541 = "stablehlo.slice"(%1540) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1542 = "stablehlo.slice"(%1513) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1543 = "stablehlo.slice"(%1493) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1544 = "stablehlo.slice"(%1473) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1545 = "stablehlo.slice"(%1453) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1546 = "stablehlo.slice"(%1433) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1547 = "stablehlo.concatenate"(%1541, %1542, %1543, %1544, %1545, %1546) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %1548 = "stablehlo.slice"(%1540) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1549 = "stablehlo.slice"(%1513) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1550 = "stablehlo.slice"(%1493) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1551 = "stablehlo.slice"(%1473) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1552 = "stablehlo.slice"(%1453) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1553 = "stablehlo.slice"(%1433) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1554 = "stablehlo.concatenate"(%1548, %1549, %1550, %1551, %1552, %1553) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %1555 = "stablehlo.reshape"(%1554) : (tensor<1x288xf32>) -> tensor<144x2xf32>
      %1556 = "stablehlo.dot_general"(%1555, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
      %1557 = "stablehlo.reshape"(%1556) : (tensor<144x2xf32>) -> tensor<288xf32>
      %1558 = "stablehlo.dot_general"(%1557, %1152) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %1559 = "stablehlo.add"(%1537, %1558) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1560 = "stablehlo.dot_general"(%1557, %1147) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %1561 = "stablehlo.reshape"(%1560) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %1562 = "stablehlo.reshape"(%1547) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
      %1563 = "stablehlo.dot_general"(%1187, %1409) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1564 = "stablehlo.slice"(%1563) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1565 = "stablehlo.slice"(%1514) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1566 = "stablehlo.slice"(%1494) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1567 = "stablehlo.slice"(%1474) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1568 = "stablehlo.slice"(%1454) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1569 = "stablehlo.slice"(%1434) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1570 = "stablehlo.concatenate"(%1564, %1565, %1566, %1567, %1568, %1569) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %1571 = "stablehlo.slice"(%1563) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1572 = "stablehlo.slice"(%1514) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1573 = "stablehlo.slice"(%1494) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1574 = "stablehlo.slice"(%1474) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1575 = "stablehlo.slice"(%1454) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1576 = "stablehlo.slice"(%1434) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1577 = "stablehlo.concatenate"(%1571, %1572, %1573, %1574, %1575, %1576) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %1578 = "stablehlo.reshape"(%1577) : (tensor<1x288xf32>) -> tensor<288xf32>
      %1579 = "stablehlo.dot_general"(%1578, %1155) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %1580 = "stablehlo.add"(%1559, %1579) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1581 = "stablehlo.multiply"(%1145, %1580) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1582 = "stablehlo.reduce"(%1581, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
      %1583 = "stablehlo.multiply"(%1582, %1144) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1584 = "stablehlo.negate"(%1583) : (tensor<f32>) -> tensor<f32>
      %1585 = "stablehlo.multiply"(%1584, %1141) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1586 = "stablehlo.divide"(%1585, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1587 = "stablehlo.dot_general"(%1586, %1134) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
      %1588 = "stablehlo.add"(%1407, %1587) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1589 = "stablehlo.add"(%1588, %1587) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1590 = "stablehlo.multiply"(%1580, %1146) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1591 = "stablehlo.multiply"(%1136, %1590) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1592 = "stablehlo.add"(%1589, %1591) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1593 = "stablehlo.dot_general"(%1592, %1132) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
      %1594 = "stablehlo.multiply"(%1129, %1593) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1595 = "stablehlo.dot_general"(%1594, %1121) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
      %1596 = "stablehlo.dot_general"(%1594, %1116) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
      %1597 = "stablehlo.reshape"(%1596) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
      %1598 = "stablehlo.multiply"(%1593, %1122) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1599 = "stablehlo.multiply"(%1119, %1598) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1600 = "stablehlo.multiply"(%1599, %1128) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1601 = "stablehlo.negate"(%1600) : (tensor<768xf32>) -> tensor<768xf32>
      %1602 = "stablehlo.multiply"(%1601, %1124) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1603 = "stablehlo.negate"(%1602) : (tensor<768xf32>) -> tensor<768xf32>
      %1604 = "stablehlo.multiply"(%1598, %1126) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1605 = "stablehlo.add"(%1603, %1604) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1606 = "stablehlo.dot_general"(%1605, %1118) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
      %1607 = "stablehlo.add"(%1595, %1606) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1608 = "stablehlo.multiply"(%1114, %1607) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1609 = "stablehlo.reduce"(%1608, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
      %1610 = "stablehlo.multiply"(%1609, %1113) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1611 = "stablehlo.negate"(%1610) : (tensor<f32>) -> tensor<f32>
      %1612 = "stablehlo.multiply"(%1611, %1110) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1613 = "stablehlo.divide"(%1612, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1614 = "stablehlo.dot_general"(%1613, %1103) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
      %1615 = "stablehlo.add"(%1592, %1614) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1616 = "stablehlo.add"(%1615, %1614) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1617 = "stablehlo.multiply"(%1607, %1115) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1618 = "stablehlo.multiply"(%1105, %1617) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1619 = "stablehlo.add"(%1616, %1618) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1620 = "stablehlo.dot_general"(%1619, %1101) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %1621 = "stablehlo.slice"(%1620) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1622 = "stablehlo.slice"(%1620) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1623 = "stablehlo.slice"(%1620) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1624 = "stablehlo.slice"(%1620) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1625 = "stablehlo.slice"(%1620) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1626 = "stablehlo.slice"(%1620) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1627 = "stablehlo.dot_general"(%1626, %1097) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1628 = "stablehlo.broadcast_in_dim"(%1094) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1629 = "stablehlo.multiply"(%1627, %1628) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1630 = "stablehlo.multiply"(%1629, %1085) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1631 = "stablehlo.reduce"(%1630, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1632 = "stablehlo.negate"(%1631) : (tensor<f32>) -> tensor<f32>
      %1633 = "stablehlo.broadcast_in_dim"(%1632) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1634 = "stablehlo.divide"(%1627, %1091) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1635 = "stablehlo.add"(%1633, %1634) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1636 = "stablehlo.multiply"(%1635, %1085) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1637 = "stablehlo.negate"(%1636) : (tensor<2xf32>) -> tensor<2xf32>
      %1638 = "stablehlo.reduce"(%1637, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1639 = "stablehlo.divide"(%1638, %1083) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1640 = "stablehlo.broadcast_in_dim"(%1639) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1641 = "stablehlo.multiply"(%1640, %1082) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1642 = "stablehlo.add"(%1636, %1641) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1643 = "stablehlo.divide"(%1642, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1644 = "stablehlo.dot_general"(%1643, %1076) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1645 = "stablehlo.dot_general"(%1643, %1073) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1646 = "stablehlo.dot_general"(%1092, %1626) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1647 = "stablehlo.dot_general"(%1625, %1071) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1648 = "stablehlo.broadcast_in_dim"(%1068) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1649 = "stablehlo.multiply"(%1647, %1648) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1650 = "stablehlo.multiply"(%1649, %1059) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1651 = "stablehlo.reduce"(%1650, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1652 = "stablehlo.negate"(%1651) : (tensor<f32>) -> tensor<f32>
      %1653 = "stablehlo.broadcast_in_dim"(%1652) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1654 = "stablehlo.divide"(%1647, %1065) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1655 = "stablehlo.add"(%1653, %1654) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1656 = "stablehlo.multiply"(%1655, %1059) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1657 = "stablehlo.negate"(%1656) : (tensor<2xf32>) -> tensor<2xf32>
      %1658 = "stablehlo.reduce"(%1657, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1659 = "stablehlo.divide"(%1658, %1057) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1660 = "stablehlo.broadcast_in_dim"(%1659) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1661 = "stablehlo.multiply"(%1660, %1056) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1662 = "stablehlo.add"(%1656, %1661) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1663 = "stablehlo.divide"(%1662, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1664 = "stablehlo.dot_general"(%1663, %1050) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1665 = "stablehlo.dot_general"(%1663, %1047) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1666 = "stablehlo.dot_general"(%1066, %1625) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1667 = "stablehlo.dot_general"(%1624, %1045) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1668 = "stablehlo.broadcast_in_dim"(%1042) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1669 = "stablehlo.multiply"(%1667, %1668) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1670 = "stablehlo.multiply"(%1669, %1033) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1671 = "stablehlo.reduce"(%1670, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1672 = "stablehlo.negate"(%1671) : (tensor<f32>) -> tensor<f32>
      %1673 = "stablehlo.broadcast_in_dim"(%1672) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1674 = "stablehlo.divide"(%1667, %1039) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1675 = "stablehlo.add"(%1673, %1674) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1676 = "stablehlo.multiply"(%1675, %1033) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1677 = "stablehlo.negate"(%1676) : (tensor<2xf32>) -> tensor<2xf32>
      %1678 = "stablehlo.reduce"(%1677, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1679 = "stablehlo.divide"(%1678, %1031) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1680 = "stablehlo.broadcast_in_dim"(%1679) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1681 = "stablehlo.multiply"(%1680, %1030) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1682 = "stablehlo.add"(%1676, %1681) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1683 = "stablehlo.divide"(%1682, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1684 = "stablehlo.dot_general"(%1683, %1024) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1685 = "stablehlo.dot_general"(%1683, %1021) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1686 = "stablehlo.dot_general"(%1040, %1624) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1687 = "stablehlo.dot_general"(%1623, %1019) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1688 = "stablehlo.broadcast_in_dim"(%1016) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1689 = "stablehlo.multiply"(%1687, %1688) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1690 = "stablehlo.multiply"(%1689, %1007) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1691 = "stablehlo.reduce"(%1690, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1692 = "stablehlo.negate"(%1691) : (tensor<f32>) -> tensor<f32>
      %1693 = "stablehlo.broadcast_in_dim"(%1692) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1694 = "stablehlo.divide"(%1687, %1013) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1695 = "stablehlo.add"(%1693, %1694) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1696 = "stablehlo.multiply"(%1695, %1007) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1697 = "stablehlo.negate"(%1696) : (tensor<2xf32>) -> tensor<2xf32>
      %1698 = "stablehlo.reduce"(%1697, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1699 = "stablehlo.divide"(%1698, %1005) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1700 = "stablehlo.broadcast_in_dim"(%1699) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1701 = "stablehlo.multiply"(%1700, %1004) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1702 = "stablehlo.add"(%1696, %1701) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1703 = "stablehlo.divide"(%1702, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1704 = "stablehlo.dot_general"(%1703, %998) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1705 = "stablehlo.dot_general"(%1703, %995) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1706 = "stablehlo.dot_general"(%1014, %1623) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1707 = "stablehlo.dot_general"(%1622, %993) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1708 = "stablehlo.broadcast_in_dim"(%990) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1709 = "stablehlo.multiply"(%1707, %1708) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1710 = "stablehlo.multiply"(%1709, %981) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1711 = "stablehlo.reduce"(%1710, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1712 = "stablehlo.negate"(%1711) : (tensor<f32>) -> tensor<f32>
      %1713 = "stablehlo.broadcast_in_dim"(%1712) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1714 = "stablehlo.divide"(%1707, %987) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1715 = "stablehlo.add"(%1713, %1714) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1716 = "stablehlo.multiply"(%1715, %981) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1717 = "stablehlo.negate"(%1716) : (tensor<2xf32>) -> tensor<2xf32>
      %1718 = "stablehlo.reduce"(%1717, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1719 = "stablehlo.divide"(%1718, %979) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1720 = "stablehlo.broadcast_in_dim"(%1719) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1721 = "stablehlo.multiply"(%1720, %978) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1722 = "stablehlo.add"(%1716, %1721) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1723 = "stablehlo.divide"(%1722, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1724 = "stablehlo.dot_general"(%1723, %972) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1725 = "stablehlo.dot_general"(%1723, %969) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1726 = "stablehlo.dot_general"(%988, %1622) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1727 = "stablehlo.dot_general"(%1621, %967) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1728 = "stablehlo.broadcast_in_dim"(%964) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1729 = "stablehlo.multiply"(%1727, %1728) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1730 = "stablehlo.multiply"(%1729, %955) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1731 = "stablehlo.reduce"(%1730, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1732 = "stablehlo.negate"(%1731) : (tensor<f32>) -> tensor<f32>
      %1733 = "stablehlo.broadcast_in_dim"(%1732) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1734 = "stablehlo.divide"(%1727, %961) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1735 = "stablehlo.add"(%1733, %1734) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1736 = "stablehlo.multiply"(%1735, %955) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1737 = "stablehlo.negate"(%1736) : (tensor<2xf32>) -> tensor<2xf32>
      %1738 = "stablehlo.reduce"(%1737, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1739 = "stablehlo.divide"(%1738, %953) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1740 = "stablehlo.broadcast_in_dim"(%1739) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1741 = "stablehlo.multiply"(%1740, %952) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1742 = "stablehlo.add"(%1736, %1741) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1743 = "stablehlo.divide"(%1742, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1744 = "stablehlo.dot_general"(%1743, %946) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1745 = "stablehlo.concatenate"(%1744, %1724, %1704, %1684, %1664, %1644) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
      %1746 = "stablehlo.reshape"(%1745) : (tensor<288xf32>) -> tensor<144x2xf32>
      %1747 = "stablehlo.dot_general"(%1746, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
      %1748 = "stablehlo.reshape"(%1747) : (tensor<144x2xf32>) -> tensor<288xf32>
      %1749 = "stablehlo.dot_general"(%1748, %924) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %1750 = "stablehlo.dot_general"(%1748, %922) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %1751 = "stablehlo.reshape"(%1750) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %1752 = "stablehlo.dot_general"(%1743, %943) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1753 = "stablehlo.slice"(%1752) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1754 = "stablehlo.slice"(%1725) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1755 = "stablehlo.slice"(%1705) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1756 = "stablehlo.slice"(%1685) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1757 = "stablehlo.slice"(%1665) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1758 = "stablehlo.slice"(%1645) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1759 = "stablehlo.concatenate"(%1753, %1754, %1755, %1756, %1757, %1758) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %1760 = "stablehlo.slice"(%1752) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1761 = "stablehlo.slice"(%1725) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1762 = "stablehlo.slice"(%1705) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1763 = "stablehlo.slice"(%1685) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1764 = "stablehlo.slice"(%1665) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1765 = "stablehlo.slice"(%1645) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1766 = "stablehlo.concatenate"(%1760, %1761, %1762, %1763, %1764, %1765) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %1767 = "stablehlo.reshape"(%1766) : (tensor<1x288xf32>) -> tensor<144x2xf32>
      %1768 = "stablehlo.dot_general"(%1767, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
      %1769 = "stablehlo.reshape"(%1768) : (tensor<144x2xf32>) -> tensor<288xf32>
      %1770 = "stablehlo.dot_general"(%1769, %927) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %1771 = "stablehlo.add"(%1749, %1770) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1772 = "stablehlo.dot_general"(%1769, %922) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %1773 = "stablehlo.reshape"(%1772) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %1774 = "stablehlo.reshape"(%1759) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
      %1775 = "stablehlo.dot_general"(%962, %1621) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1776 = "stablehlo.slice"(%1775) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1777 = "stablehlo.slice"(%1726) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1778 = "stablehlo.slice"(%1706) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1779 = "stablehlo.slice"(%1686) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1780 = "stablehlo.slice"(%1666) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1781 = "stablehlo.slice"(%1646) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1782 = "stablehlo.concatenate"(%1776, %1777, %1778, %1779, %1780, %1781) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %1783 = "stablehlo.slice"(%1775) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1784 = "stablehlo.slice"(%1726) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1785 = "stablehlo.slice"(%1706) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1786 = "stablehlo.slice"(%1686) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1787 = "stablehlo.slice"(%1666) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1788 = "stablehlo.slice"(%1646) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1789 = "stablehlo.concatenate"(%1783, %1784, %1785, %1786, %1787, %1788) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %1790 = "stablehlo.reshape"(%1789) : (tensor<1x288xf32>) -> tensor<288xf32>
      %1791 = "stablehlo.dot_general"(%1790, %930) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %1792 = "stablehlo.add"(%1771, %1791) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1793 = "stablehlo.multiply"(%920, %1792) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1794 = "stablehlo.reduce"(%1793, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
      %1795 = "stablehlo.multiply"(%1794, %919) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1796 = "stablehlo.negate"(%1795) : (tensor<f32>) -> tensor<f32>
      %1797 = "stablehlo.multiply"(%1796, %916) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1798 = "stablehlo.divide"(%1797, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1799 = "stablehlo.dot_general"(%1798, %909) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
      %1800 = "stablehlo.add"(%1619, %1799) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1801 = "stablehlo.add"(%1800, %1799) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1802 = "stablehlo.multiply"(%1792, %921) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1803 = "stablehlo.multiply"(%911, %1802) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1804 = "stablehlo.add"(%1801, %1803) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1805 = "stablehlo.dot_general"(%1804, %907) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
      %1806 = "stablehlo.multiply"(%904, %1805) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1807 = "stablehlo.dot_general"(%1806, %896) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
      %1808 = "stablehlo.dot_general"(%1806, %891) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
      %1809 = "stablehlo.reshape"(%1808) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
      %1810 = "stablehlo.multiply"(%1805, %897) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1811 = "stablehlo.multiply"(%894, %1810) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1812 = "stablehlo.multiply"(%1811, %903) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1813 = "stablehlo.negate"(%1812) : (tensor<768xf32>) -> tensor<768xf32>
      %1814 = "stablehlo.multiply"(%1813, %899) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1815 = "stablehlo.negate"(%1814) : (tensor<768xf32>) -> tensor<768xf32>
      %1816 = "stablehlo.multiply"(%1810, %901) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1817 = "stablehlo.add"(%1815, %1816) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %1818 = "stablehlo.dot_general"(%1817, %893) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
      %1819 = "stablehlo.add"(%1807, %1818) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1820 = "stablehlo.multiply"(%889, %1819) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1821 = "stablehlo.reduce"(%1820, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
      %1822 = "stablehlo.multiply"(%1821, %888) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1823 = "stablehlo.negate"(%1822) : (tensor<f32>) -> tensor<f32>
      %1824 = "stablehlo.multiply"(%1823, %885) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1825 = "stablehlo.divide"(%1824, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1826 = "stablehlo.dot_general"(%1825, %878) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
      %1827 = "stablehlo.add"(%1804, %1826) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1828 = "stablehlo.add"(%1827, %1826) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1829 = "stablehlo.multiply"(%1819, %890) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1830 = "stablehlo.multiply"(%880, %1829) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1831 = "stablehlo.add"(%1828, %1830) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1832 = "stablehlo.dot_general"(%1831, %876) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %1833 = "stablehlo.slice"(%1832) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1834 = "stablehlo.slice"(%1832) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1835 = "stablehlo.slice"(%1832) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1836 = "stablehlo.slice"(%1832) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1837 = "stablehlo.slice"(%1832) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1838 = "stablehlo.slice"(%1832) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %1839 = "stablehlo.dot_general"(%1838, %872) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1840 = "stablehlo.broadcast_in_dim"(%869) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1841 = "stablehlo.multiply"(%1839, %1840) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1842 = "stablehlo.multiply"(%1841, %860) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1843 = "stablehlo.reduce"(%1842, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1844 = "stablehlo.negate"(%1843) : (tensor<f32>) -> tensor<f32>
      %1845 = "stablehlo.broadcast_in_dim"(%1844) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1846 = "stablehlo.divide"(%1839, %866) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1847 = "stablehlo.add"(%1845, %1846) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1848 = "stablehlo.multiply"(%1847, %860) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1849 = "stablehlo.negate"(%1848) : (tensor<2xf32>) -> tensor<2xf32>
      %1850 = "stablehlo.reduce"(%1849, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1851 = "stablehlo.divide"(%1850, %858) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1852 = "stablehlo.broadcast_in_dim"(%1851) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1853 = "stablehlo.multiply"(%1852, %857) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1854 = "stablehlo.add"(%1848, %1853) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1855 = "stablehlo.divide"(%1854, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1856 = "stablehlo.dot_general"(%1855, %851) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1857 = "stablehlo.dot_general"(%1855, %848) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1858 = "stablehlo.dot_general"(%867, %1838) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1859 = "stablehlo.dot_general"(%1837, %846) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1860 = "stablehlo.broadcast_in_dim"(%843) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1861 = "stablehlo.multiply"(%1859, %1860) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1862 = "stablehlo.multiply"(%1861, %834) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1863 = "stablehlo.reduce"(%1862, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1864 = "stablehlo.negate"(%1863) : (tensor<f32>) -> tensor<f32>
      %1865 = "stablehlo.broadcast_in_dim"(%1864) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1866 = "stablehlo.divide"(%1859, %840) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1867 = "stablehlo.add"(%1865, %1866) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1868 = "stablehlo.multiply"(%1867, %834) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1869 = "stablehlo.negate"(%1868) : (tensor<2xf32>) -> tensor<2xf32>
      %1870 = "stablehlo.reduce"(%1869, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1871 = "stablehlo.divide"(%1870, %832) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1872 = "stablehlo.broadcast_in_dim"(%1871) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1873 = "stablehlo.multiply"(%1872, %831) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1874 = "stablehlo.add"(%1868, %1873) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1875 = "stablehlo.divide"(%1874, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1876 = "stablehlo.dot_general"(%1875, %825) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1877 = "stablehlo.dot_general"(%1875, %822) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1878 = "stablehlo.dot_general"(%841, %1837) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1879 = "stablehlo.dot_general"(%1836, %820) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1880 = "stablehlo.broadcast_in_dim"(%817) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1881 = "stablehlo.multiply"(%1879, %1880) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1882 = "stablehlo.multiply"(%1881, %808) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1883 = "stablehlo.reduce"(%1882, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1884 = "stablehlo.negate"(%1883) : (tensor<f32>) -> tensor<f32>
      %1885 = "stablehlo.broadcast_in_dim"(%1884) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1886 = "stablehlo.divide"(%1879, %814) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1887 = "stablehlo.add"(%1885, %1886) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1888 = "stablehlo.multiply"(%1887, %808) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1889 = "stablehlo.negate"(%1888) : (tensor<2xf32>) -> tensor<2xf32>
      %1890 = "stablehlo.reduce"(%1889, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1891 = "stablehlo.divide"(%1890, %806) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1892 = "stablehlo.broadcast_in_dim"(%1891) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1893 = "stablehlo.multiply"(%1892, %805) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1894 = "stablehlo.add"(%1888, %1893) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1895 = "stablehlo.divide"(%1894, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1896 = "stablehlo.dot_general"(%1895, %799) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1897 = "stablehlo.dot_general"(%1895, %796) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1898 = "stablehlo.dot_general"(%815, %1836) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1899 = "stablehlo.dot_general"(%1835, %794) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1900 = "stablehlo.broadcast_in_dim"(%791) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1901 = "stablehlo.multiply"(%1899, %1900) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1902 = "stablehlo.multiply"(%1901, %782) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1903 = "stablehlo.reduce"(%1902, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1904 = "stablehlo.negate"(%1903) : (tensor<f32>) -> tensor<f32>
      %1905 = "stablehlo.broadcast_in_dim"(%1904) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1906 = "stablehlo.divide"(%1899, %788) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1907 = "stablehlo.add"(%1905, %1906) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1908 = "stablehlo.multiply"(%1907, %782) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1909 = "stablehlo.negate"(%1908) : (tensor<2xf32>) -> tensor<2xf32>
      %1910 = "stablehlo.reduce"(%1909, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1911 = "stablehlo.divide"(%1910, %780) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1912 = "stablehlo.broadcast_in_dim"(%1911) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1913 = "stablehlo.multiply"(%1912, %779) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1914 = "stablehlo.add"(%1908, %1913) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1915 = "stablehlo.divide"(%1914, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1916 = "stablehlo.dot_general"(%1915, %773) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1917 = "stablehlo.dot_general"(%1915, %770) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1918 = "stablehlo.dot_general"(%789, %1835) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1919 = "stablehlo.dot_general"(%1834, %768) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1920 = "stablehlo.broadcast_in_dim"(%765) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1921 = "stablehlo.multiply"(%1919, %1920) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1922 = "stablehlo.multiply"(%1921, %756) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1923 = "stablehlo.reduce"(%1922, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1924 = "stablehlo.negate"(%1923) : (tensor<f32>) -> tensor<f32>
      %1925 = "stablehlo.broadcast_in_dim"(%1924) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1926 = "stablehlo.divide"(%1919, %762) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1927 = "stablehlo.add"(%1925, %1926) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1928 = "stablehlo.multiply"(%1927, %756) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1929 = "stablehlo.negate"(%1928) : (tensor<2xf32>) -> tensor<2xf32>
      %1930 = "stablehlo.reduce"(%1929, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1931 = "stablehlo.divide"(%1930, %754) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1932 = "stablehlo.broadcast_in_dim"(%1931) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1933 = "stablehlo.multiply"(%1932, %753) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1934 = "stablehlo.add"(%1928, %1933) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1935 = "stablehlo.divide"(%1934, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1936 = "stablehlo.dot_general"(%1935, %747) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1937 = "stablehlo.dot_general"(%1935, %744) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1938 = "stablehlo.dot_general"(%763, %1834) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1939 = "stablehlo.dot_general"(%1833, %742) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %1940 = "stablehlo.broadcast_in_dim"(%739) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1941 = "stablehlo.multiply"(%1939, %1940) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1942 = "stablehlo.multiply"(%1941, %730) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1943 = "stablehlo.reduce"(%1942, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1944 = "stablehlo.negate"(%1943) : (tensor<f32>) -> tensor<f32>
      %1945 = "stablehlo.broadcast_in_dim"(%1944) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1946 = "stablehlo.divide"(%1939, %736) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1947 = "stablehlo.add"(%1945, %1946) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1948 = "stablehlo.multiply"(%1947, %730) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1949 = "stablehlo.negate"(%1948) : (tensor<2xf32>) -> tensor<2xf32>
      %1950 = "stablehlo.reduce"(%1949, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %1951 = "stablehlo.divide"(%1950, %728) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %1952 = "stablehlo.broadcast_in_dim"(%1951) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %1953 = "stablehlo.multiply"(%1952, %727) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1954 = "stablehlo.add"(%1948, %1953) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1955 = "stablehlo.divide"(%1954, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %1956 = "stablehlo.dot_general"(%1955, %721) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %1957 = "stablehlo.concatenate"(%1956, %1936, %1916, %1896, %1876, %1856) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
      %1958 = "stablehlo.reshape"(%1957) : (tensor<288xf32>) -> tensor<144x2xf32>
      %1959 = "stablehlo.dot_general"(%1958, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
      %1960 = "stablehlo.reshape"(%1959) : (tensor<144x2xf32>) -> tensor<288xf32>
      %1961 = "stablehlo.dot_general"(%1960, %699) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %1962 = "stablehlo.dot_general"(%1960, %697) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %1963 = "stablehlo.reshape"(%1962) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %1964 = "stablehlo.dot_general"(%1955, %718) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1965 = "stablehlo.slice"(%1964) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1966 = "stablehlo.slice"(%1937) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1967 = "stablehlo.slice"(%1917) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1968 = "stablehlo.slice"(%1897) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1969 = "stablehlo.slice"(%1877) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1970 = "stablehlo.slice"(%1857) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1971 = "stablehlo.concatenate"(%1965, %1966, %1967, %1968, %1969, %1970) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %1972 = "stablehlo.slice"(%1964) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1973 = "stablehlo.slice"(%1937) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1974 = "stablehlo.slice"(%1917) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1975 = "stablehlo.slice"(%1897) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1976 = "stablehlo.slice"(%1877) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1977 = "stablehlo.slice"(%1857) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1978 = "stablehlo.concatenate"(%1972, %1973, %1974, %1975, %1976, %1977) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %1979 = "stablehlo.reshape"(%1978) : (tensor<1x288xf32>) -> tensor<144x2xf32>
      %1980 = "stablehlo.dot_general"(%1979, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
      %1981 = "stablehlo.reshape"(%1980) : (tensor<144x2xf32>) -> tensor<288xf32>
      %1982 = "stablehlo.dot_general"(%1981, %702) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %1983 = "stablehlo.add"(%1961, %1982) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %1984 = "stablehlo.dot_general"(%1981, %697) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %1985 = "stablehlo.reshape"(%1984) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %1986 = "stablehlo.reshape"(%1971) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
      %1987 = "stablehlo.dot_general"(%737, %1833) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %1988 = "stablehlo.slice"(%1987) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1989 = "stablehlo.slice"(%1938) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1990 = "stablehlo.slice"(%1918) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1991 = "stablehlo.slice"(%1898) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1992 = "stablehlo.slice"(%1878) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1993 = "stablehlo.slice"(%1858) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1994 = "stablehlo.concatenate"(%1988, %1989, %1990, %1991, %1992, %1993) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %1995 = "stablehlo.slice"(%1987) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1996 = "stablehlo.slice"(%1938) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1997 = "stablehlo.slice"(%1918) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1998 = "stablehlo.slice"(%1898) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %1999 = "stablehlo.slice"(%1878) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2000 = "stablehlo.slice"(%1858) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2001 = "stablehlo.concatenate"(%1995, %1996, %1997, %1998, %1999, %2000) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %2002 = "stablehlo.reshape"(%2001) : (tensor<1x288xf32>) -> tensor<288xf32>
      %2003 = "stablehlo.dot_general"(%2002, %705) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %2004 = "stablehlo.add"(%1983, %2003) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2005 = "stablehlo.multiply"(%695, %2004) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2006 = "stablehlo.reduce"(%2005, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
      %2007 = "stablehlo.multiply"(%2006, %694) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2008 = "stablehlo.negate"(%2007) : (tensor<f32>) -> tensor<f32>
      %2009 = "stablehlo.multiply"(%2008, %691) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2010 = "stablehlo.divide"(%2009, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2011 = "stablehlo.dot_general"(%2010, %684) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
      %2012 = "stablehlo.add"(%1831, %2011) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2013 = "stablehlo.add"(%2012, %2011) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2014 = "stablehlo.multiply"(%2004, %696) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2015 = "stablehlo.multiply"(%686, %2014) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2016 = "stablehlo.add"(%2013, %2015) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2017 = "stablehlo.dot_general"(%2016, %682) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
      %2018 = "stablehlo.multiply"(%679, %2017) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2019 = "stablehlo.dot_general"(%2018, %671) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
      %2020 = "stablehlo.dot_general"(%2018, %666) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
      %2021 = "stablehlo.reshape"(%2020) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
      %2022 = "stablehlo.multiply"(%2017, %672) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2023 = "stablehlo.multiply"(%669, %2022) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2024 = "stablehlo.multiply"(%2023, %678) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2025 = "stablehlo.negate"(%2024) : (tensor<768xf32>) -> tensor<768xf32>
      %2026 = "stablehlo.multiply"(%2025, %674) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2027 = "stablehlo.negate"(%2026) : (tensor<768xf32>) -> tensor<768xf32>
      %2028 = "stablehlo.multiply"(%2022, %676) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2029 = "stablehlo.add"(%2027, %2028) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2030 = "stablehlo.dot_general"(%2029, %668) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
      %2031 = "stablehlo.add"(%2019, %2030) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2032 = "stablehlo.multiply"(%664, %2031) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2033 = "stablehlo.reduce"(%2032, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
      %2034 = "stablehlo.multiply"(%2033, %663) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2035 = "stablehlo.negate"(%2034) : (tensor<f32>) -> tensor<f32>
      %2036 = "stablehlo.multiply"(%2035, %660) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2037 = "stablehlo.divide"(%2036, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2038 = "stablehlo.dot_general"(%2037, %653) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
      %2039 = "stablehlo.add"(%2016, %2038) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2040 = "stablehlo.add"(%2039, %2038) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2041 = "stablehlo.multiply"(%2031, %665) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2042 = "stablehlo.multiply"(%655, %2041) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2043 = "stablehlo.add"(%2040, %2042) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2044 = "stablehlo.dot_general"(%2043, %651) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %2045 = "stablehlo.slice"(%2044) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2046 = "stablehlo.slice"(%2044) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2047 = "stablehlo.slice"(%2044) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2048 = "stablehlo.slice"(%2044) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2049 = "stablehlo.slice"(%2044) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2050 = "stablehlo.slice"(%2044) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2051 = "stablehlo.dot_general"(%2050, %647) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2052 = "stablehlo.broadcast_in_dim"(%644) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2053 = "stablehlo.multiply"(%2051, %2052) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2054 = "stablehlo.multiply"(%2053, %635) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2055 = "stablehlo.reduce"(%2054, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2056 = "stablehlo.negate"(%2055) : (tensor<f32>) -> tensor<f32>
      %2057 = "stablehlo.broadcast_in_dim"(%2056) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2058 = "stablehlo.divide"(%2051, %641) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2059 = "stablehlo.add"(%2057, %2058) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2060 = "stablehlo.multiply"(%2059, %635) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2061 = "stablehlo.negate"(%2060) : (tensor<2xf32>) -> tensor<2xf32>
      %2062 = "stablehlo.reduce"(%2061, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2063 = "stablehlo.divide"(%2062, %633) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2064 = "stablehlo.broadcast_in_dim"(%2063) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2065 = "stablehlo.multiply"(%2064, %632) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2066 = "stablehlo.add"(%2060, %2065) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2067 = "stablehlo.divide"(%2066, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2068 = "stablehlo.dot_general"(%2067, %626) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2069 = "stablehlo.dot_general"(%2067, %623) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2070 = "stablehlo.dot_general"(%642, %2050) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2071 = "stablehlo.dot_general"(%2049, %621) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2072 = "stablehlo.broadcast_in_dim"(%618) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2073 = "stablehlo.multiply"(%2071, %2072) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2074 = "stablehlo.multiply"(%2073, %609) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2075 = "stablehlo.reduce"(%2074, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2076 = "stablehlo.negate"(%2075) : (tensor<f32>) -> tensor<f32>
      %2077 = "stablehlo.broadcast_in_dim"(%2076) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2078 = "stablehlo.divide"(%2071, %615) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2079 = "stablehlo.add"(%2077, %2078) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2080 = "stablehlo.multiply"(%2079, %609) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2081 = "stablehlo.negate"(%2080) : (tensor<2xf32>) -> tensor<2xf32>
      %2082 = "stablehlo.reduce"(%2081, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2083 = "stablehlo.divide"(%2082, %607) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2084 = "stablehlo.broadcast_in_dim"(%2083) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2085 = "stablehlo.multiply"(%2084, %606) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2086 = "stablehlo.add"(%2080, %2085) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2087 = "stablehlo.divide"(%2086, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2088 = "stablehlo.dot_general"(%2087, %600) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2089 = "stablehlo.dot_general"(%2087, %597) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2090 = "stablehlo.dot_general"(%616, %2049) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2091 = "stablehlo.dot_general"(%2048, %595) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2092 = "stablehlo.broadcast_in_dim"(%592) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2093 = "stablehlo.multiply"(%2091, %2092) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2094 = "stablehlo.multiply"(%2093, %583) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2095 = "stablehlo.reduce"(%2094, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2096 = "stablehlo.negate"(%2095) : (tensor<f32>) -> tensor<f32>
      %2097 = "stablehlo.broadcast_in_dim"(%2096) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2098 = "stablehlo.divide"(%2091, %589) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2099 = "stablehlo.add"(%2097, %2098) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2100 = "stablehlo.multiply"(%2099, %583) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2101 = "stablehlo.negate"(%2100) : (tensor<2xf32>) -> tensor<2xf32>
      %2102 = "stablehlo.reduce"(%2101, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2103 = "stablehlo.divide"(%2102, %581) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2104 = "stablehlo.broadcast_in_dim"(%2103) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2105 = "stablehlo.multiply"(%2104, %580) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2106 = "stablehlo.add"(%2100, %2105) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2107 = "stablehlo.divide"(%2106, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2108 = "stablehlo.dot_general"(%2107, %574) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2109 = "stablehlo.dot_general"(%2107, %571) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2110 = "stablehlo.dot_general"(%590, %2048) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2111 = "stablehlo.dot_general"(%2047, %569) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2112 = "stablehlo.broadcast_in_dim"(%566) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2113 = "stablehlo.multiply"(%2111, %2112) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2114 = "stablehlo.multiply"(%2113, %557) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2115 = "stablehlo.reduce"(%2114, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2116 = "stablehlo.negate"(%2115) : (tensor<f32>) -> tensor<f32>
      %2117 = "stablehlo.broadcast_in_dim"(%2116) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2118 = "stablehlo.divide"(%2111, %563) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2119 = "stablehlo.add"(%2117, %2118) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2120 = "stablehlo.multiply"(%2119, %557) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2121 = "stablehlo.negate"(%2120) : (tensor<2xf32>) -> tensor<2xf32>
      %2122 = "stablehlo.reduce"(%2121, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2123 = "stablehlo.divide"(%2122, %555) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2124 = "stablehlo.broadcast_in_dim"(%2123) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2125 = "stablehlo.multiply"(%2124, %554) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2126 = "stablehlo.add"(%2120, %2125) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2127 = "stablehlo.divide"(%2126, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2128 = "stablehlo.dot_general"(%2127, %548) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2129 = "stablehlo.dot_general"(%2127, %545) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2130 = "stablehlo.dot_general"(%564, %2047) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2131 = "stablehlo.dot_general"(%2046, %543) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2132 = "stablehlo.broadcast_in_dim"(%540) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2133 = "stablehlo.multiply"(%2131, %2132) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2134 = "stablehlo.multiply"(%2133, %531) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2135 = "stablehlo.reduce"(%2134, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2136 = "stablehlo.negate"(%2135) : (tensor<f32>) -> tensor<f32>
      %2137 = "stablehlo.broadcast_in_dim"(%2136) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2138 = "stablehlo.divide"(%2131, %537) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2139 = "stablehlo.add"(%2137, %2138) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2140 = "stablehlo.multiply"(%2139, %531) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2141 = "stablehlo.negate"(%2140) : (tensor<2xf32>) -> tensor<2xf32>
      %2142 = "stablehlo.reduce"(%2141, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2143 = "stablehlo.divide"(%2142, %529) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2144 = "stablehlo.broadcast_in_dim"(%2143) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2145 = "stablehlo.multiply"(%2144, %528) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2146 = "stablehlo.add"(%2140, %2145) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2147 = "stablehlo.divide"(%2146, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2148 = "stablehlo.dot_general"(%2147, %522) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2149 = "stablehlo.dot_general"(%2147, %519) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2150 = "stablehlo.dot_general"(%538, %2046) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2151 = "stablehlo.dot_general"(%2045, %517) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2152 = "stablehlo.broadcast_in_dim"(%514) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2153 = "stablehlo.multiply"(%2151, %2152) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2154 = "stablehlo.multiply"(%2153, %505) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2155 = "stablehlo.reduce"(%2154, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2156 = "stablehlo.negate"(%2155) : (tensor<f32>) -> tensor<f32>
      %2157 = "stablehlo.broadcast_in_dim"(%2156) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2158 = "stablehlo.divide"(%2151, %511) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2159 = "stablehlo.add"(%2157, %2158) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2160 = "stablehlo.multiply"(%2159, %505) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2161 = "stablehlo.negate"(%2160) : (tensor<2xf32>) -> tensor<2xf32>
      %2162 = "stablehlo.reduce"(%2161, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2163 = "stablehlo.divide"(%2162, %503) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2164 = "stablehlo.broadcast_in_dim"(%2163) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2165 = "stablehlo.multiply"(%2164, %502) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2166 = "stablehlo.add"(%2160, %2165) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2167 = "stablehlo.divide"(%2166, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2168 = "stablehlo.dot_general"(%2167, %496) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2169 = "stablehlo.concatenate"(%2168, %2148, %2128, %2108, %2088, %2068) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
      %2170 = "stablehlo.reshape"(%2169) : (tensor<288xf32>) -> tensor<144x2xf32>
      %2171 = "stablehlo.dot_general"(%2170, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
      %2172 = "stablehlo.reshape"(%2171) : (tensor<144x2xf32>) -> tensor<288xf32>
      %2173 = "stablehlo.dot_general"(%2172, %474) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %2174 = "stablehlo.dot_general"(%2172, %472) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2175 = "stablehlo.reshape"(%2174) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2176 = "stablehlo.dot_general"(%2167, %493) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2177 = "stablehlo.slice"(%2176) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2178 = "stablehlo.slice"(%2149) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2179 = "stablehlo.slice"(%2129) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2180 = "stablehlo.slice"(%2109) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2181 = "stablehlo.slice"(%2089) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2182 = "stablehlo.slice"(%2069) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2183 = "stablehlo.concatenate"(%2177, %2178, %2179, %2180, %2181, %2182) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %2184 = "stablehlo.slice"(%2176) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2185 = "stablehlo.slice"(%2149) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2186 = "stablehlo.slice"(%2129) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2187 = "stablehlo.slice"(%2109) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2188 = "stablehlo.slice"(%2089) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2189 = "stablehlo.slice"(%2069) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2190 = "stablehlo.concatenate"(%2184, %2185, %2186, %2187, %2188, %2189) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %2191 = "stablehlo.reshape"(%2190) : (tensor<1x288xf32>) -> tensor<144x2xf32>
      %2192 = "stablehlo.dot_general"(%2191, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
      %2193 = "stablehlo.reshape"(%2192) : (tensor<144x2xf32>) -> tensor<288xf32>
      %2194 = "stablehlo.dot_general"(%2193, %477) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %2195 = "stablehlo.add"(%2173, %2194) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2196 = "stablehlo.dot_general"(%2193, %472) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2197 = "stablehlo.reshape"(%2196) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2198 = "stablehlo.reshape"(%2183) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
      %2199 = "stablehlo.dot_general"(%512, %2045) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2200 = "stablehlo.slice"(%2199) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2201 = "stablehlo.slice"(%2150) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2202 = "stablehlo.slice"(%2130) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2203 = "stablehlo.slice"(%2110) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2204 = "stablehlo.slice"(%2090) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2205 = "stablehlo.slice"(%2070) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2206 = "stablehlo.concatenate"(%2200, %2201, %2202, %2203, %2204, %2205) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %2207 = "stablehlo.slice"(%2199) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2208 = "stablehlo.slice"(%2150) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2209 = "stablehlo.slice"(%2130) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2210 = "stablehlo.slice"(%2110) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2211 = "stablehlo.slice"(%2090) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2212 = "stablehlo.slice"(%2070) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2213 = "stablehlo.concatenate"(%2207, %2208, %2209, %2210, %2211, %2212) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %2214 = "stablehlo.reshape"(%2213) : (tensor<1x288xf32>) -> tensor<288xf32>
      %2215 = "stablehlo.dot_general"(%2214, %480) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %2216 = "stablehlo.add"(%2195, %2215) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2217 = "stablehlo.multiply"(%470, %2216) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2218 = "stablehlo.reduce"(%2217, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
      %2219 = "stablehlo.multiply"(%2218, %469) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2220 = "stablehlo.negate"(%2219) : (tensor<f32>) -> tensor<f32>
      %2221 = "stablehlo.multiply"(%2220, %466) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2222 = "stablehlo.divide"(%2221, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2223 = "stablehlo.dot_general"(%2222, %459) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
      %2224 = "stablehlo.add"(%2043, %2223) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2225 = "stablehlo.add"(%2224, %2223) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2226 = "stablehlo.multiply"(%2216, %471) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2227 = "stablehlo.multiply"(%461, %2226) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2228 = "stablehlo.add"(%2225, %2227) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2229 = "stablehlo.dot_general"(%2228, %457) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
      %2230 = "stablehlo.multiply"(%454, %2229) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2231 = "stablehlo.dot_general"(%2230, %446) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
      %2232 = "stablehlo.dot_general"(%2230, %441) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
      %2233 = "stablehlo.reshape"(%2232) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
      %2234 = "stablehlo.multiply"(%2229, %447) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2235 = "stablehlo.multiply"(%444, %2234) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2236 = "stablehlo.multiply"(%2235, %453) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2237 = "stablehlo.negate"(%2236) : (tensor<768xf32>) -> tensor<768xf32>
      %2238 = "stablehlo.multiply"(%2237, %449) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2239 = "stablehlo.negate"(%2238) : (tensor<768xf32>) -> tensor<768xf32>
      %2240 = "stablehlo.multiply"(%2234, %451) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2241 = "stablehlo.add"(%2239, %2240) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2242 = "stablehlo.dot_general"(%2241, %443) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
      %2243 = "stablehlo.add"(%2231, %2242) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2244 = "stablehlo.multiply"(%439, %2243) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2245 = "stablehlo.reduce"(%2244, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
      %2246 = "stablehlo.multiply"(%2245, %438) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2247 = "stablehlo.negate"(%2246) : (tensor<f32>) -> tensor<f32>
      %2248 = "stablehlo.multiply"(%2247, %435) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2249 = "stablehlo.divide"(%2248, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2250 = "stablehlo.dot_general"(%2249, %428) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
      %2251 = "stablehlo.add"(%2228, %2250) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2252 = "stablehlo.add"(%2251, %2250) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2253 = "stablehlo.multiply"(%2243, %440) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2254 = "stablehlo.multiply"(%430, %2253) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2255 = "stablehlo.add"(%2252, %2254) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2256 = "stablehlo.dot_general"(%2255, %426) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %2257 = "stablehlo.slice"(%2256) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2258 = "stablehlo.slice"(%2256) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2259 = "stablehlo.slice"(%2256) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2260 = "stablehlo.slice"(%2256) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2261 = "stablehlo.slice"(%2256) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2262 = "stablehlo.slice"(%2256) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2263 = "stablehlo.dot_general"(%2262, %422) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2264 = "stablehlo.broadcast_in_dim"(%419) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2265 = "stablehlo.multiply"(%2263, %2264) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2266 = "stablehlo.multiply"(%2265, %410) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2267 = "stablehlo.reduce"(%2266, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2268 = "stablehlo.negate"(%2267) : (tensor<f32>) -> tensor<f32>
      %2269 = "stablehlo.broadcast_in_dim"(%2268) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2270 = "stablehlo.divide"(%2263, %416) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2271 = "stablehlo.add"(%2269, %2270) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2272 = "stablehlo.multiply"(%2271, %410) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2273 = "stablehlo.negate"(%2272) : (tensor<2xf32>) -> tensor<2xf32>
      %2274 = "stablehlo.reduce"(%2273, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2275 = "stablehlo.divide"(%2274, %408) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2276 = "stablehlo.broadcast_in_dim"(%2275) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2277 = "stablehlo.multiply"(%2276, %407) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2278 = "stablehlo.add"(%2272, %2277) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2279 = "stablehlo.divide"(%2278, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2280 = "stablehlo.dot_general"(%2279, %401) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2281 = "stablehlo.dot_general"(%2279, %398) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2282 = "stablehlo.dot_general"(%417, %2262) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2283 = "stablehlo.dot_general"(%2261, %396) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2284 = "stablehlo.broadcast_in_dim"(%393) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2285 = "stablehlo.multiply"(%2283, %2284) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2286 = "stablehlo.multiply"(%2285, %384) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2287 = "stablehlo.reduce"(%2286, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2288 = "stablehlo.negate"(%2287) : (tensor<f32>) -> tensor<f32>
      %2289 = "stablehlo.broadcast_in_dim"(%2288) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2290 = "stablehlo.divide"(%2283, %390) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2291 = "stablehlo.add"(%2289, %2290) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2292 = "stablehlo.multiply"(%2291, %384) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2293 = "stablehlo.negate"(%2292) : (tensor<2xf32>) -> tensor<2xf32>
      %2294 = "stablehlo.reduce"(%2293, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2295 = "stablehlo.divide"(%2294, %382) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2296 = "stablehlo.broadcast_in_dim"(%2295) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2297 = "stablehlo.multiply"(%2296, %381) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2298 = "stablehlo.add"(%2292, %2297) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2299 = "stablehlo.divide"(%2298, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2300 = "stablehlo.dot_general"(%2299, %375) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2301 = "stablehlo.dot_general"(%2299, %372) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2302 = "stablehlo.dot_general"(%391, %2261) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2303 = "stablehlo.dot_general"(%2260, %370) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2304 = "stablehlo.broadcast_in_dim"(%367) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2305 = "stablehlo.multiply"(%2303, %2304) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2306 = "stablehlo.multiply"(%2305, %358) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2307 = "stablehlo.reduce"(%2306, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2308 = "stablehlo.negate"(%2307) : (tensor<f32>) -> tensor<f32>
      %2309 = "stablehlo.broadcast_in_dim"(%2308) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2310 = "stablehlo.divide"(%2303, %364) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2311 = "stablehlo.add"(%2309, %2310) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2312 = "stablehlo.multiply"(%2311, %358) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2313 = "stablehlo.negate"(%2312) : (tensor<2xf32>) -> tensor<2xf32>
      %2314 = "stablehlo.reduce"(%2313, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2315 = "stablehlo.divide"(%2314, %356) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2316 = "stablehlo.broadcast_in_dim"(%2315) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2317 = "stablehlo.multiply"(%2316, %355) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2318 = "stablehlo.add"(%2312, %2317) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2319 = "stablehlo.divide"(%2318, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2320 = "stablehlo.dot_general"(%2319, %349) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2321 = "stablehlo.dot_general"(%2319, %346) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2322 = "stablehlo.dot_general"(%365, %2260) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2323 = "stablehlo.dot_general"(%2259, %344) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2324 = "stablehlo.broadcast_in_dim"(%341) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2325 = "stablehlo.multiply"(%2323, %2324) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2326 = "stablehlo.multiply"(%2325, %332) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2327 = "stablehlo.reduce"(%2326, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2328 = "stablehlo.negate"(%2327) : (tensor<f32>) -> tensor<f32>
      %2329 = "stablehlo.broadcast_in_dim"(%2328) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2330 = "stablehlo.divide"(%2323, %338) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2331 = "stablehlo.add"(%2329, %2330) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2332 = "stablehlo.multiply"(%2331, %332) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2333 = "stablehlo.negate"(%2332) : (tensor<2xf32>) -> tensor<2xf32>
      %2334 = "stablehlo.reduce"(%2333, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2335 = "stablehlo.divide"(%2334, %330) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2336 = "stablehlo.broadcast_in_dim"(%2335) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2337 = "stablehlo.multiply"(%2336, %329) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2338 = "stablehlo.add"(%2332, %2337) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2339 = "stablehlo.divide"(%2338, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2340 = "stablehlo.dot_general"(%2339, %323) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2341 = "stablehlo.dot_general"(%2339, %320) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2342 = "stablehlo.dot_general"(%339, %2259) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2343 = "stablehlo.dot_general"(%2258, %318) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2344 = "stablehlo.broadcast_in_dim"(%315) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2345 = "stablehlo.multiply"(%2343, %2344) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2346 = "stablehlo.multiply"(%2345, %306) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2347 = "stablehlo.reduce"(%2346, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2348 = "stablehlo.negate"(%2347) : (tensor<f32>) -> tensor<f32>
      %2349 = "stablehlo.broadcast_in_dim"(%2348) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2350 = "stablehlo.divide"(%2343, %312) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2351 = "stablehlo.add"(%2349, %2350) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2352 = "stablehlo.multiply"(%2351, %306) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2353 = "stablehlo.negate"(%2352) : (tensor<2xf32>) -> tensor<2xf32>
      %2354 = "stablehlo.reduce"(%2353, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2355 = "stablehlo.divide"(%2354, %304) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2356 = "stablehlo.broadcast_in_dim"(%2355) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2357 = "stablehlo.multiply"(%2356, %303) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2358 = "stablehlo.add"(%2352, %2357) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2359 = "stablehlo.divide"(%2358, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2360 = "stablehlo.dot_general"(%2359, %297) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2361 = "stablehlo.dot_general"(%2359, %294) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2362 = "stablehlo.dot_general"(%313, %2258) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2363 = "stablehlo.dot_general"(%2257, %292) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2364 = "stablehlo.broadcast_in_dim"(%289) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2365 = "stablehlo.multiply"(%2363, %2364) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2366 = "stablehlo.multiply"(%2365, %280) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2367 = "stablehlo.reduce"(%2366, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2368 = "stablehlo.negate"(%2367) : (tensor<f32>) -> tensor<f32>
      %2369 = "stablehlo.broadcast_in_dim"(%2368) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2370 = "stablehlo.divide"(%2363, %286) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2371 = "stablehlo.add"(%2369, %2370) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2372 = "stablehlo.multiply"(%2371, %280) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2373 = "stablehlo.negate"(%2372) : (tensor<2xf32>) -> tensor<2xf32>
      %2374 = "stablehlo.reduce"(%2373, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2375 = "stablehlo.divide"(%2374, %278) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2376 = "stablehlo.broadcast_in_dim"(%2375) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2377 = "stablehlo.multiply"(%2376, %277) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2378 = "stablehlo.add"(%2372, %2377) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2379 = "stablehlo.divide"(%2378, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2380 = "stablehlo.dot_general"(%2379, %271) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2381 = "stablehlo.concatenate"(%2380, %2360, %2340, %2320, %2300, %2280) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
      %2382 = "stablehlo.reshape"(%2381) : (tensor<288xf32>) -> tensor<144x2xf32>
      %2383 = "stablehlo.dot_general"(%2382, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
      %2384 = "stablehlo.reshape"(%2383) : (tensor<144x2xf32>) -> tensor<288xf32>
      %2385 = "stablehlo.dot_general"(%2384, %249) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %2386 = "stablehlo.dot_general"(%2384, %247) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2387 = "stablehlo.reshape"(%2386) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2388 = "stablehlo.dot_general"(%2379, %268) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2389 = "stablehlo.slice"(%2388) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2390 = "stablehlo.slice"(%2361) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2391 = "stablehlo.slice"(%2341) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2392 = "stablehlo.slice"(%2321) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2393 = "stablehlo.slice"(%2301) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2394 = "stablehlo.slice"(%2281) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2395 = "stablehlo.concatenate"(%2389, %2390, %2391, %2392, %2393, %2394) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %2396 = "stablehlo.slice"(%2388) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2397 = "stablehlo.slice"(%2361) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2398 = "stablehlo.slice"(%2341) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2399 = "stablehlo.slice"(%2321) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2400 = "stablehlo.slice"(%2301) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2401 = "stablehlo.slice"(%2281) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2402 = "stablehlo.concatenate"(%2396, %2397, %2398, %2399, %2400, %2401) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %2403 = "stablehlo.reshape"(%2402) : (tensor<1x288xf32>) -> tensor<144x2xf32>
      %2404 = "stablehlo.dot_general"(%2403, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
      %2405 = "stablehlo.reshape"(%2404) : (tensor<144x2xf32>) -> tensor<288xf32>
      %2406 = "stablehlo.dot_general"(%2405, %252) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %2407 = "stablehlo.add"(%2385, %2406) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2408 = "stablehlo.dot_general"(%2405, %247) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2409 = "stablehlo.reshape"(%2408) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2410 = "stablehlo.reshape"(%2395) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
      %2411 = "stablehlo.dot_general"(%287, %2257) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2412 = "stablehlo.slice"(%2411) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2413 = "stablehlo.slice"(%2362) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2414 = "stablehlo.slice"(%2342) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2415 = "stablehlo.slice"(%2322) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2416 = "stablehlo.slice"(%2302) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2417 = "stablehlo.slice"(%2282) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2418 = "stablehlo.concatenate"(%2412, %2413, %2414, %2415, %2416, %2417) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %2419 = "stablehlo.slice"(%2411) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2420 = "stablehlo.slice"(%2362) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2421 = "stablehlo.slice"(%2342) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2422 = "stablehlo.slice"(%2322) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2423 = "stablehlo.slice"(%2302) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2424 = "stablehlo.slice"(%2282) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2425 = "stablehlo.concatenate"(%2419, %2420, %2421, %2422, %2423, %2424) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %2426 = "stablehlo.reshape"(%2425) : (tensor<1x288xf32>) -> tensor<288xf32>
      %2427 = "stablehlo.dot_general"(%2426, %255) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %2428 = "stablehlo.add"(%2407, %2427) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2429 = "stablehlo.multiply"(%245, %2428) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2430 = "stablehlo.reduce"(%2429, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
      %2431 = "stablehlo.multiply"(%2430, %244) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2432 = "stablehlo.negate"(%2431) : (tensor<f32>) -> tensor<f32>
      %2433 = "stablehlo.multiply"(%2432, %241) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2434 = "stablehlo.divide"(%2433, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2435 = "stablehlo.dot_general"(%2434, %234) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
      %2436 = "stablehlo.add"(%2255, %2435) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2437 = "stablehlo.add"(%2436, %2435) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2438 = "stablehlo.multiply"(%2428, %246) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2439 = "stablehlo.multiply"(%236, %2438) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2440 = "stablehlo.add"(%2437, %2439) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2441 = "stablehlo.dot_general"(%2440, %232) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
      %2442 = "stablehlo.multiply"(%229, %2441) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2443 = "stablehlo.dot_general"(%2442, %221) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
      %2444 = "stablehlo.dot_general"(%2442, %216) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
      %2445 = "stablehlo.reshape"(%2444) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
      %2446 = "stablehlo.concatenate"(%2445, %2233, %2021, %1809, %1597, %1385) <{dimension = 0 : i64}> : (tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>) -> tensor<6x768x288xf32>
      %2447 = "stablehlo.multiply"(%2441, %222) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2448 = "stablehlo.multiply"(%219, %2447) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2449 = "stablehlo.multiply"(%2448, %228) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2450 = "stablehlo.negate"(%2449) : (tensor<768xf32>) -> tensor<768xf32>
      %2451 = "stablehlo.multiply"(%2450, %224) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2452 = "stablehlo.negate"(%2451) : (tensor<768xf32>) -> tensor<768xf32>
      %2453 = "stablehlo.multiply"(%2447, %226) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2454 = "stablehlo.add"(%2452, %2453) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
      %2455 = "stablehlo.dot_general"(%2454, %218) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
      %2456 = "stablehlo.add"(%2443, %2455) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2457 = "stablehlo.multiply"(%214, %2456) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2458 = "stablehlo.reduce"(%2457, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
      %2459 = "stablehlo.multiply"(%2458, %213) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2460 = "stablehlo.negate"(%2459) : (tensor<f32>) -> tensor<f32>
      %2461 = "stablehlo.multiply"(%2460, %210) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2462 = "stablehlo.divide"(%2461, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2463 = "stablehlo.dot_general"(%2462, %203) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
      %2464 = "stablehlo.add"(%2440, %2463) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2465 = "stablehlo.add"(%2464, %2463) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2466 = "stablehlo.multiply"(%2456, %215) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2467 = "stablehlo.multiply"(%205, %2466) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2468 = "stablehlo.add"(%2465, %2467) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2469 = "stablehlo.dot_general"(%2468, %201) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %2470 = "stablehlo.slice"(%2469) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2471 = "stablehlo.slice"(%2469) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2472 = "stablehlo.slice"(%2469) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2473 = "stablehlo.slice"(%2469) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2474 = "stablehlo.slice"(%2469) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2475 = "stablehlo.slice"(%2469) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
      %2476 = "stablehlo.dot_general"(%2475, %197) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2477 = "stablehlo.broadcast_in_dim"(%194) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2478 = "stablehlo.multiply"(%2476, %2477) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2479 = "stablehlo.multiply"(%2478, %185) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2480 = "stablehlo.reduce"(%2479, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2481 = "stablehlo.negate"(%2480) : (tensor<f32>) -> tensor<f32>
      %2482 = "stablehlo.broadcast_in_dim"(%2481) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2483 = "stablehlo.divide"(%2476, %191) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2484 = "stablehlo.add"(%2482, %2483) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2485 = "stablehlo.multiply"(%2484, %185) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2486 = "stablehlo.negate"(%2485) : (tensor<2xf32>) -> tensor<2xf32>
      %2487 = "stablehlo.reduce"(%2486, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2488 = "stablehlo.divide"(%2487, %183) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2489 = "stablehlo.broadcast_in_dim"(%2488) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2490 = "stablehlo.multiply"(%2489, %182) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2491 = "stablehlo.add"(%2485, %2490) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2492 = "stablehlo.divide"(%2491, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2493 = "stablehlo.dot_general"(%2492, %176) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2494 = "stablehlo.dot_general"(%2492, %173) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2495 = "stablehlo.dot_general"(%192, %2475) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2496 = "stablehlo.dot_general"(%2474, %171) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2497 = "stablehlo.broadcast_in_dim"(%168) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2498 = "stablehlo.multiply"(%2496, %2497) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2499 = "stablehlo.multiply"(%2498, %159) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2500 = "stablehlo.reduce"(%2499, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2501 = "stablehlo.negate"(%2500) : (tensor<f32>) -> tensor<f32>
      %2502 = "stablehlo.broadcast_in_dim"(%2501) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2503 = "stablehlo.divide"(%2496, %165) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2504 = "stablehlo.add"(%2502, %2503) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2505 = "stablehlo.multiply"(%2504, %159) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2506 = "stablehlo.negate"(%2505) : (tensor<2xf32>) -> tensor<2xf32>
      %2507 = "stablehlo.reduce"(%2506, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2508 = "stablehlo.divide"(%2507, %157) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2509 = "stablehlo.broadcast_in_dim"(%2508) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2510 = "stablehlo.multiply"(%2509, %156) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2511 = "stablehlo.add"(%2505, %2510) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2512 = "stablehlo.divide"(%2511, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2513 = "stablehlo.dot_general"(%2512, %150) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2514 = "stablehlo.dot_general"(%2512, %147) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2515 = "stablehlo.dot_general"(%166, %2474) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2516 = "stablehlo.dot_general"(%2473, %145) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2517 = "stablehlo.broadcast_in_dim"(%142) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2518 = "stablehlo.multiply"(%2516, %2517) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2519 = "stablehlo.multiply"(%2518, %133) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2520 = "stablehlo.reduce"(%2519, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2521 = "stablehlo.negate"(%2520) : (tensor<f32>) -> tensor<f32>
      %2522 = "stablehlo.broadcast_in_dim"(%2521) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2523 = "stablehlo.divide"(%2516, %139) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2524 = "stablehlo.add"(%2522, %2523) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2525 = "stablehlo.multiply"(%2524, %133) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2526 = "stablehlo.negate"(%2525) : (tensor<2xf32>) -> tensor<2xf32>
      %2527 = "stablehlo.reduce"(%2526, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2528 = "stablehlo.divide"(%2527, %131) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2529 = "stablehlo.broadcast_in_dim"(%2528) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2530 = "stablehlo.multiply"(%2529, %130) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2531 = "stablehlo.add"(%2525, %2530) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2532 = "stablehlo.divide"(%2531, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2533 = "stablehlo.dot_general"(%2532, %124) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2534 = "stablehlo.dot_general"(%2532, %121) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2535 = "stablehlo.dot_general"(%140, %2473) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2536 = "stablehlo.dot_general"(%2472, %119) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2537 = "stablehlo.broadcast_in_dim"(%116) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2538 = "stablehlo.multiply"(%2536, %2537) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2539 = "stablehlo.multiply"(%2538, %107) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2540 = "stablehlo.reduce"(%2539, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2541 = "stablehlo.negate"(%2540) : (tensor<f32>) -> tensor<f32>
      %2542 = "stablehlo.broadcast_in_dim"(%2541) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2543 = "stablehlo.divide"(%2536, %113) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2544 = "stablehlo.add"(%2542, %2543) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2545 = "stablehlo.multiply"(%2544, %107) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2546 = "stablehlo.negate"(%2545) : (tensor<2xf32>) -> tensor<2xf32>
      %2547 = "stablehlo.reduce"(%2546, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2548 = "stablehlo.divide"(%2547, %105) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2549 = "stablehlo.broadcast_in_dim"(%2548) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2550 = "stablehlo.multiply"(%2549, %104) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2551 = "stablehlo.add"(%2545, %2550) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2552 = "stablehlo.divide"(%2551, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2553 = "stablehlo.dot_general"(%2552, %98) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2554 = "stablehlo.dot_general"(%2552, %95) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2555 = "stablehlo.dot_general"(%114, %2472) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2556 = "stablehlo.dot_general"(%2471, %93) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2557 = "stablehlo.broadcast_in_dim"(%90) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2558 = "stablehlo.multiply"(%2556, %2557) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2559 = "stablehlo.multiply"(%2558, %81) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2560 = "stablehlo.reduce"(%2559, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2561 = "stablehlo.negate"(%2560) : (tensor<f32>) -> tensor<f32>
      %2562 = "stablehlo.broadcast_in_dim"(%2561) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2563 = "stablehlo.divide"(%2556, %87) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2564 = "stablehlo.add"(%2562, %2563) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2565 = "stablehlo.multiply"(%2564, %81) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2566 = "stablehlo.negate"(%2565) : (tensor<2xf32>) -> tensor<2xf32>
      %2567 = "stablehlo.reduce"(%2566, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2568 = "stablehlo.divide"(%2567, %79) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2569 = "stablehlo.broadcast_in_dim"(%2568) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2570 = "stablehlo.multiply"(%2569, %78) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2571 = "stablehlo.add"(%2565, %2570) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2572 = "stablehlo.divide"(%2571, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2573 = "stablehlo.dot_general"(%2572, %72) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2574 = "stablehlo.dot_general"(%2572, %69) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2575 = "stablehlo.dot_general"(%88, %2471) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2576 = "stablehlo.dot_general"(%2470, %67) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
      %2577 = "stablehlo.broadcast_in_dim"(%64) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2578 = "stablehlo.multiply"(%2576, %2577) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2579 = "stablehlo.multiply"(%2578, %55) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2580 = "stablehlo.reduce"(%2579, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2581 = "stablehlo.negate"(%2580) : (tensor<f32>) -> tensor<f32>
      %2582 = "stablehlo.broadcast_in_dim"(%2581) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2583 = "stablehlo.divide"(%2576, %61) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2584 = "stablehlo.add"(%2582, %2583) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2585 = "stablehlo.multiply"(%2584, %55) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2586 = "stablehlo.negate"(%2585) : (tensor<2xf32>) -> tensor<2xf32>
      %2587 = "stablehlo.reduce"(%2586, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
      %2588 = "stablehlo.divide"(%2587, %53) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2589 = "stablehlo.broadcast_in_dim"(%2588) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
      %2590 = "stablehlo.multiply"(%2589, %52) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2591 = "stablehlo.add"(%2585, %2590) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2592 = "stablehlo.divide"(%2591, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
      %2593 = "stablehlo.dot_general"(%2592, %46) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
      %2594 = "stablehlo.concatenate"(%2593, %2573, %2553, %2533, %2513, %2493) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
      %2595 = "stablehlo.reshape"(%2594) : (tensor<288xf32>) -> tensor<144x2xf32>
      %2596 = "stablehlo.dot_general"(%2595, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
      %2597 = "stablehlo.reshape"(%2596) : (tensor<144x2xf32>) -> tensor<288xf32>
      %2598 = "stablehlo.dot_general"(%2597, %24) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %2599 = "stablehlo.dot_general"(%2597, %22) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2600 = "stablehlo.reshape"(%2599) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2601 = "stablehlo.concatenate"(%2600, %2387, %2175, %1963, %1751, %1539) <{dimension = 0 : i64}> : (tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>) -> tensor<6x288x288xf32>
      %2602 = "stablehlo.dot_general"(%2592, %43) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2603 = "stablehlo.slice"(%2602) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2604 = "stablehlo.slice"(%2574) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2605 = "stablehlo.slice"(%2554) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2606 = "stablehlo.slice"(%2534) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2607 = "stablehlo.slice"(%2514) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2608 = "stablehlo.slice"(%2494) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2609 = "stablehlo.concatenate"(%2603, %2604, %2605, %2606, %2607, %2608) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %2610 = "stablehlo.slice"(%2602) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2611 = "stablehlo.slice"(%2574) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2612 = "stablehlo.slice"(%2554) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2613 = "stablehlo.slice"(%2534) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2614 = "stablehlo.slice"(%2514) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2615 = "stablehlo.slice"(%2494) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2616 = "stablehlo.concatenate"(%2610, %2611, %2612, %2613, %2614, %2615) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %2617 = "stablehlo.reshape"(%2616) : (tensor<1x288xf32>) -> tensor<144x2xf32>
      %2618 = "stablehlo.dot_general"(%2617, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
      %2619 = "stablehlo.reshape"(%2618) : (tensor<144x2xf32>) -> tensor<288xf32>
      %2620 = "stablehlo.dot_general"(%2619, %27) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %2621 = "stablehlo.add"(%2598, %2620) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2622 = "stablehlo.dot_general"(%2619, %22) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2623 = "stablehlo.reshape"(%2622) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2624 = "stablehlo.concatenate"(%2623, %2409, %2197, %1985, %1773, %1561) <{dimension = 0 : i64}> : (tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>) -> tensor<6x288x288xf32>
      %2625 = "stablehlo.reshape"(%2609) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
      %2626 = "stablehlo.concatenate"(%2625, %2410, %2198, %1986, %1774, %1562) <{dimension = 0 : i64}> : (tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>) -> tensor<6x1x288xf32>
      %2627 = "stablehlo.dot_general"(%62, %2470) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
      %2628 = "stablehlo.slice"(%2627) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2629 = "stablehlo.slice"(%2575) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2630 = "stablehlo.slice"(%2555) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2631 = "stablehlo.slice"(%2535) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2632 = "stablehlo.slice"(%2515) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2633 = "stablehlo.slice"(%2495) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2634 = "stablehlo.concatenate"(%2628, %2629, %2630, %2631, %2632, %2633) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %2635 = "stablehlo.slice"(%2627) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2636 = "stablehlo.slice"(%2575) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2637 = "stablehlo.slice"(%2555) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2638 = "stablehlo.slice"(%2535) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2639 = "stablehlo.slice"(%2515) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2640 = "stablehlo.slice"(%2495) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
      %2641 = "stablehlo.concatenate"(%2635, %2636, %2637, %2638, %2639, %2640) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
      %2642 = "stablehlo.reshape"(%2641) : (tensor<1x288xf32>) -> tensor<288xf32>
      %2643 = "stablehlo.dot_general"(%2642, %30) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
      %2644 = "stablehlo.add"(%2621, %2643) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2645 = "stablehlo.multiply"(%20, %2644) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2646 = "stablehlo.reduce"(%2645, %3) <{dimensions = array<i64: 0>}> ({
      ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
        %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        "stablehlo.return"(%2743) : (tensor<f32>) -> ()
      }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
      %2647 = "stablehlo.multiply"(%2646, %19) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2648 = "stablehlo.negate"(%2647) : (tensor<f32>) -> tensor<f32>
      %2649 = "stablehlo.multiply"(%2648, %16) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2650 = "stablehlo.divide"(%2649, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
      %2651 = "stablehlo.dot_general"(%2650, %arg0) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
      %2652 = "stablehlo.add"(%2468, %2651) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2653 = "stablehlo.add"(%2652, %2651) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2654 = "stablehlo.multiply"(%2644, %21) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2655 = "stablehlo.multiply"(%11, %2654) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2656 = "stablehlo.add"(%2653, %2655) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2657 = "stablehlo.multiply"(%2654, %arg0) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2658 = "stablehlo.reshape"(%2657) : (tensor<288xf32>) -> tensor<1x288xf32>
      %2659 = "stablehlo.dot_general"(%2642, %22) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2660 = "stablehlo.reshape"(%2659) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2661 = "stablehlo.reshape"(%2634) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
      %2662 = "stablehlo.dot_general"(%2468, %199) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2663 = "stablehlo.reshape"(%2662) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2664 = "stablehlo.multiply"(%2466, %203) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2665 = "stablehlo.reshape"(%2664) : (tensor<288xf32>) -> tensor<1x288xf32>
      %2666 = "stablehlo.dot_general"(%2454, %216) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
      %2667 = "stablehlo.reshape"(%2666) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
      %2668 = "stablehlo.dot_general"(%2440, %230) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
      %2669 = "stablehlo.reshape"(%2668) : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
      %2670 = "stablehlo.multiply"(%2438, %234) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2671 = "stablehlo.reshape"(%2670) : (tensor<288xf32>) -> tensor<1x288xf32>
      %2672 = "stablehlo.dot_general"(%2426, %247) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2673 = "stablehlo.reshape"(%2672) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2674 = "stablehlo.reshape"(%2418) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
      %2675 = "stablehlo.dot_general"(%2255, %424) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2676 = "stablehlo.reshape"(%2675) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2677 = "stablehlo.multiply"(%2253, %428) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2678 = "stablehlo.reshape"(%2677) : (tensor<288xf32>) -> tensor<1x288xf32>
      %2679 = "stablehlo.dot_general"(%2241, %441) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
      %2680 = "stablehlo.reshape"(%2679) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
      %2681 = "stablehlo.dot_general"(%2228, %455) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
      %2682 = "stablehlo.reshape"(%2681) : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
      %2683 = "stablehlo.multiply"(%2226, %459) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2684 = "stablehlo.reshape"(%2683) : (tensor<288xf32>) -> tensor<1x288xf32>
      %2685 = "stablehlo.dot_general"(%2214, %472) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2686 = "stablehlo.reshape"(%2685) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2687 = "stablehlo.reshape"(%2206) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
      %2688 = "stablehlo.dot_general"(%2043, %649) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2689 = "stablehlo.reshape"(%2688) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2690 = "stablehlo.multiply"(%2041, %653) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2691 = "stablehlo.reshape"(%2690) : (tensor<288xf32>) -> tensor<1x288xf32>
      %2692 = "stablehlo.dot_general"(%2029, %666) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
      %2693 = "stablehlo.reshape"(%2692) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
      %2694 = "stablehlo.dot_general"(%2016, %680) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
      %2695 = "stablehlo.reshape"(%2694) : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
      %2696 = "stablehlo.multiply"(%2014, %684) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2697 = "stablehlo.reshape"(%2696) : (tensor<288xf32>) -> tensor<1x288xf32>
      %2698 = "stablehlo.dot_general"(%2002, %697) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2699 = "stablehlo.reshape"(%2698) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2700 = "stablehlo.reshape"(%1994) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
      %2701 = "stablehlo.dot_general"(%1831, %874) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2702 = "stablehlo.reshape"(%2701) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2703 = "stablehlo.multiply"(%1829, %878) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2704 = "stablehlo.reshape"(%2703) : (tensor<288xf32>) -> tensor<1x288xf32>
      %2705 = "stablehlo.dot_general"(%1817, %891) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
      %2706 = "stablehlo.reshape"(%2705) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
      %2707 = "stablehlo.dot_general"(%1804, %905) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
      %2708 = "stablehlo.reshape"(%2707) : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
      %2709 = "stablehlo.multiply"(%1802, %909) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2710 = "stablehlo.reshape"(%2709) : (tensor<288xf32>) -> tensor<1x288xf32>
      %2711 = "stablehlo.dot_general"(%1790, %922) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2712 = "stablehlo.reshape"(%2711) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2713 = "stablehlo.reshape"(%1782) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
      %2714 = "stablehlo.dot_general"(%1619, %1099) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2715 = "stablehlo.reshape"(%2714) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2716 = "stablehlo.multiply"(%1617, %1103) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2717 = "stablehlo.reshape"(%2716) : (tensor<288xf32>) -> tensor<1x288xf32>
      %2718 = "stablehlo.dot_general"(%1605, %1116) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
      %2719 = "stablehlo.reshape"(%2718) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
      %2720 = "stablehlo.dot_general"(%1592, %1130) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
      %2721 = "stablehlo.reshape"(%2720) : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
      %2722 = "stablehlo.multiply"(%1590, %1134) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2723 = "stablehlo.reshape"(%2722) : (tensor<288xf32>) -> tensor<1x288xf32>
      %2724 = "stablehlo.concatenate"(%2658, %2671, %2684, %2697, %2710, %2723) <{dimension = 0 : i64}> : (tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>) -> tensor<6x288xf32>
      %2725 = "stablehlo.dot_general"(%1578, %1147) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2726 = "stablehlo.reshape"(%2725) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2727 = "stablehlo.concatenate"(%2660, %2673, %2686, %2699, %2712, %2726) <{dimension = 0 : i64}> : (tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>) -> tensor<6x288x288xf32>
      %2728 = "stablehlo.reshape"(%1570) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
      %2729 = "stablehlo.concatenate"(%2661, %2674, %2687, %2700, %2713, %2728) <{dimension = 0 : i64}> : (tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>) -> tensor<6x1x288xf32>
      %2730 = "stablehlo.dot_general"(%1407, %1324) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
      %2731 = "stablehlo.reshape"(%2730) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
      %2732 = "stablehlo.concatenate"(%2663, %2676, %2689, %2702, %2715, %2731) <{dimension = 0 : i64}> : (tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>) -> tensor<6x288x288xf32>
      %2733 = "stablehlo.multiply"(%1405, %1328) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      %2734 = "stablehlo.reshape"(%2733) : (tensor<288xf32>) -> tensor<1x288xf32>
      %2735 = "stablehlo.concatenate"(%2665, %2678, %2691, %2704, %2717, %2734) <{dimension = 0 : i64}> : (tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>) -> tensor<6x288xf32>
      %2736 = "stablehlo.dot_general"(%1393, %1341) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
      %2737 = "stablehlo.reshape"(%2736) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
      %2738 = "stablehlo.concatenate"(%2667, %2680, %2693, %2706, %2719, %2737) <{dimension = 0 : i64}> : (tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>) -> tensor<6x768x288xf32>
      %2739 = "stablehlo.dot_general"(%1380, %1355) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
      %2740 = "stablehlo.reshape"(%2739) : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
      %2741 = "stablehlo.concatenate"(%2669, %2682, %2695, %2708, %2721, %2740) <{dimension = 0 : i64}> : (tensor<1x288x768xf32>, tensor<1x288x768xf32>, tensor<1x288x768xf32>, tensor<1x288x768xf32>, tensor<1x288x768xf32>, tensor<1x288x768xf32>) -> tensor<6x288x768xf32>
      %2742 = "stablehlo.multiply"(%1378, %1359) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
      "func.return"(%2656, %2724, %2735, %2742, %2738, %2741, %2446, %0, %2624, %2732, %2601, %2727, %2626, %2729) : (tensor<288xf32>, tensor<6x288xf32>, tensor<6x288xf32>, tensor<288xf32>, tensor<6x768x288xf32>, tensor<6x288x768xf32>, tensor<6x768x288xf32>, tensor<32000x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x1x288xf32>, tensor<6x1x288xf32>) -> ()
    }) : () -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "main"}> ({
    "builtin.module"() <{sym_name = "jit_jrev"}> ({
      "func.func"() <{arg_attrs = [{mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}], function_type = (tensor<288xf32>, tensor<6x288xf32>, tensor<6x288xf32>, tensor<288xf32>, tensor<6x768x288xf32>, tensor<6x288x768xf32>, tensor<6x768x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x1x288xf32>, tensor<6x1x288xf32>, tensor<288xf32>) -> (tensor<288xf32>, tensor<6x288xf32>, tensor<6x288xf32>, tensor<288xf32>, tensor<6x768x288xf32>, tensor<6x288x768xf32>, tensor<6x768x288xf32>, tensor<32000x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x1x288xf32>, tensor<6x1x288xf32>), res_attrs = [{jax.result_info = "[0]", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['rms_att_weight']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['rms_ffn_weight']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['rms_final_weight']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['w1']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['w2']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['w3']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['wcls']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['wk']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['wo']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['wq']", mhlo.layout_mode = "default"}, {jax.result_info = "[1]['wv']", mhlo.layout_mode = "default"}, {jax.result_info = "[2]", mhlo.layout_mode = "default"}, {jax.result_info = "[3]", mhlo.layout_mode = "default"}], sym_name = "main", sym_visibility = "public"}> ({
      ^bb0(%arg0: tensor<288xf32>, %arg1: tensor<6x288xf32>, %arg2: tensor<6x288xf32>, %arg3: tensor<288xf32>, %arg4: tensor<6x768x288xf32>, %arg5: tensor<6x288x768xf32>, %arg6: tensor<6x768x288xf32>, %arg7: tensor<6x288x288xf32>, %arg8: tensor<6x288x288xf32>, %arg9: tensor<6x288x288xf32>, %arg10: tensor<6x288x288xf32>, %arg11: tensor<6x1x288xf32>, %arg12: tensor<6x1x288xf32>, %arg13: tensor<288xf32>):
        %0 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<32000x288xf32>}> : () -> tensor<32000x288xf32>
        %1 = "stablehlo.constant"() <{value = dense<1.000000e+00> : tensor<768xf32>}> : () -> tensor<768xf32>
        %2 = "stablehlo.constant"() <{value = dense<6.92820311> : tensor<2xf32>}> : () -> tensor<2xf32>
        %3 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
        %4 = "stablehlo.constant"() <{value = dense<0xFF800000> : tensor<f32>}> : () -> tensor<f32>
        %5 = "stablehlo.constant"() <{value = dense<9.99999974E-6> : tensor<f32>}> : () -> tensor<f32>
        %6 = "stablehlo.constant"() <{value = dense<2.880000e+02> : tensor<f32>}> : () -> tensor<f32>
        %7 = "stablehlo.constant"() <{value = dense<5.000000e-01> : tensor<f32>}> : () -> tensor<f32>
        %8 = "stablehlo.constant"() <{value = dense<1.000000e+00> : tensor<f32>}> : () -> tensor<f32>
        %9 = "stablehlo.constant"() <{value = dense<"0xtensor<144x2x2xf32>}> : () -> tensor<144x2x2xf32>
        %10 = "stablehlo.slice"(%arg1) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
        %11 = "stablehlo.reshape"(%10) : (tensor<1x288xf32>) -> tensor<288xf32>
        %12 = "stablehlo.dot_general"(%arg0, %arg0) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
        %13 = "stablehlo.divide"(%12, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %14 = "stablehlo.add"(%13, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %15 = "stablehlo.sqrt"(%14) : (tensor<f32>) -> tensor<f32>
        %16 = "stablehlo.divide"(%7, %15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %17 = "stablehlo.divide"(%8, %15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %18 = "stablehlo.multiply"(%15, %15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %19 = "stablehlo.divide"(%8, %18) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %20 = "stablehlo.multiply"(%11, %arg0) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %21 = "stablehlo.broadcast_in_dim"(%17) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
        %22 = "stablehlo.multiply"(%20, %21) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %23 = "stablehlo.slice"(%arg9) <{limit_indices = array<i64: 1, 288, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %24 = "stablehlo.reshape"(%23) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %25 = "stablehlo.dot_general"(%24, %22) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %26 = "stablehlo.slice"(%arg7) <{limit_indices = array<i64: 1, 288, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %27 = "stablehlo.reshape"(%26) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %28 = "stablehlo.dot_general"(%27, %22) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %29 = "stablehlo.slice"(%arg10) <{limit_indices = array<i64: 1, 288, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %30 = "stablehlo.reshape"(%29) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %31 = "stablehlo.dot_general"(%30, %22) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %32 = "stablehlo.reshape"(%25) : (tensor<288xf32>) -> tensor<144x2xf32>
        %33 = "stablehlo.reshape"(%28) : (tensor<288xf32>) -> tensor<144x2xf32>
        %34 = "stablehlo.dot_general"(%9, %33) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
        %35 = "stablehlo.dot_general"(%9, %32) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
        %36 = "stablehlo.reshape"(%35) : (tensor<144x2xf32>) -> tensor<288xf32>
        %37 = "stablehlo.slice"(%arg11) <{limit_indices = array<i64: 1, 1, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
        %38 = "stablehlo.reshape"(%37) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
        %39 = "stablehlo.reshape"(%34) : (tensor<144x2xf32>) -> tensor<1x288xf32>
        %40 = "stablehlo.slice"(%arg12) <{limit_indices = array<i64: 1, 1, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
        %41 = "stablehlo.reshape"(%40) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
        %42 = "stablehlo.reshape"(%31) : (tensor<288xf32>) -> tensor<1x288xf32>
        %43 = "stablehlo.slice"(%36) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %44 = "stablehlo.slice"(%38) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %45 = "stablehlo.slice"(%39) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %46 = "stablehlo.concatenate"(%44, %45) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %47 = "stablehlo.dot_general"(%46, %43) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %48 = "stablehlo.divide"(%47, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %49 = "stablehlo.reduce"(%48, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %50 = "stablehlo.broadcast_in_dim"(%49) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %51 = "stablehlo.compare"(%48, %50) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %52 = "stablehlo.convert"(%51) : (tensor<2xi1>) -> tensor<2xf32>
        %53 = "stablehlo.reduce"(%52, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %54 = "stablehlo.subtract"(%48, %50) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %55 = "stablehlo.exponential"(%54) : (tensor<2xf32>) -> tensor<2xf32>
        %56 = "stablehlo.slice"(%55) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %57 = "stablehlo.reshape"(%56) : (tensor<1xf32>) -> tensor<f32>
        %58 = "stablehlo.slice"(%55) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %59 = "stablehlo.reshape"(%58) : (tensor<1xf32>) -> tensor<f32>
        %60 = "stablehlo.add"(%57, %59) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %61 = "stablehlo.broadcast_in_dim"(%60) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %62 = "stablehlo.divide"(%55, %61) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %63 = "stablehlo.multiply"(%60, %60) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %64 = "stablehlo.divide"(%8, %63) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %65 = "stablehlo.slice"(%41) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %66 = "stablehlo.slice"(%42) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %67 = "stablehlo.concatenate"(%65, %66) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %68 = "stablehlo.dot_general"(%67, %62) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %69 = "stablehlo.slice"(%36) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %70 = "stablehlo.slice"(%38) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %71 = "stablehlo.slice"(%39) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %72 = "stablehlo.concatenate"(%70, %71) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %73 = "stablehlo.dot_general"(%72, %69) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %74 = "stablehlo.divide"(%73, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %75 = "stablehlo.reduce"(%74, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %76 = "stablehlo.broadcast_in_dim"(%75) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %77 = "stablehlo.compare"(%74, %76) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %78 = "stablehlo.convert"(%77) : (tensor<2xi1>) -> tensor<2xf32>
        %79 = "stablehlo.reduce"(%78, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %80 = "stablehlo.subtract"(%74, %76) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %81 = "stablehlo.exponential"(%80) : (tensor<2xf32>) -> tensor<2xf32>
        %82 = "stablehlo.slice"(%81) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %83 = "stablehlo.reshape"(%82) : (tensor<1xf32>) -> tensor<f32>
        %84 = "stablehlo.slice"(%81) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %85 = "stablehlo.reshape"(%84) : (tensor<1xf32>) -> tensor<f32>
        %86 = "stablehlo.add"(%83, %85) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %87 = "stablehlo.broadcast_in_dim"(%86) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %88 = "stablehlo.divide"(%81, %87) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %89 = "stablehlo.multiply"(%86, %86) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %90 = "stablehlo.divide"(%8, %89) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %91 = "stablehlo.slice"(%41) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %92 = "stablehlo.slice"(%42) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %93 = "stablehlo.concatenate"(%91, %92) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %94 = "stablehlo.dot_general"(%93, %88) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %95 = "stablehlo.slice"(%36) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %96 = "stablehlo.slice"(%38) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %97 = "stablehlo.slice"(%39) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %98 = "stablehlo.concatenate"(%96, %97) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %99 = "stablehlo.dot_general"(%98, %95) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %100 = "stablehlo.divide"(%99, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %101 = "stablehlo.reduce"(%100, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %102 = "stablehlo.broadcast_in_dim"(%101) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %103 = "stablehlo.compare"(%100, %102) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %104 = "stablehlo.convert"(%103) : (tensor<2xi1>) -> tensor<2xf32>
        %105 = "stablehlo.reduce"(%104, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %106 = "stablehlo.subtract"(%100, %102) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %107 = "stablehlo.exponential"(%106) : (tensor<2xf32>) -> tensor<2xf32>
        %108 = "stablehlo.slice"(%107) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %109 = "stablehlo.reshape"(%108) : (tensor<1xf32>) -> tensor<f32>
        %110 = "stablehlo.slice"(%107) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %111 = "stablehlo.reshape"(%110) : (tensor<1xf32>) -> tensor<f32>
        %112 = "stablehlo.add"(%109, %111) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %113 = "stablehlo.broadcast_in_dim"(%112) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %114 = "stablehlo.divide"(%107, %113) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %115 = "stablehlo.multiply"(%112, %112) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %116 = "stablehlo.divide"(%8, %115) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %117 = "stablehlo.slice"(%41) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %118 = "stablehlo.slice"(%42) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %119 = "stablehlo.concatenate"(%117, %118) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %120 = "stablehlo.dot_general"(%119, %114) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %121 = "stablehlo.slice"(%36) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %122 = "stablehlo.slice"(%38) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %123 = "stablehlo.slice"(%39) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %124 = "stablehlo.concatenate"(%122, %123) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %125 = "stablehlo.dot_general"(%124, %121) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %126 = "stablehlo.divide"(%125, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %127 = "stablehlo.reduce"(%126, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %128 = "stablehlo.broadcast_in_dim"(%127) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %129 = "stablehlo.compare"(%126, %128) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %130 = "stablehlo.convert"(%129) : (tensor<2xi1>) -> tensor<2xf32>
        %131 = "stablehlo.reduce"(%130, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %132 = "stablehlo.subtract"(%126, %128) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %133 = "stablehlo.exponential"(%132) : (tensor<2xf32>) -> tensor<2xf32>
        %134 = "stablehlo.slice"(%133) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %135 = "stablehlo.reshape"(%134) : (tensor<1xf32>) -> tensor<f32>
        %136 = "stablehlo.slice"(%133) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %137 = "stablehlo.reshape"(%136) : (tensor<1xf32>) -> tensor<f32>
        %138 = "stablehlo.add"(%135, %137) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %139 = "stablehlo.broadcast_in_dim"(%138) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %140 = "stablehlo.divide"(%133, %139) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %141 = "stablehlo.multiply"(%138, %138) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %142 = "stablehlo.divide"(%8, %141) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %143 = "stablehlo.slice"(%41) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %144 = "stablehlo.slice"(%42) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %145 = "stablehlo.concatenate"(%143, %144) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %146 = "stablehlo.dot_general"(%145, %140) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %147 = "stablehlo.slice"(%36) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %148 = "stablehlo.slice"(%38) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %149 = "stablehlo.slice"(%39) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %150 = "stablehlo.concatenate"(%148, %149) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %151 = "stablehlo.dot_general"(%150, %147) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %152 = "stablehlo.divide"(%151, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %153 = "stablehlo.reduce"(%152, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %154 = "stablehlo.broadcast_in_dim"(%153) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %155 = "stablehlo.compare"(%152, %154) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %156 = "stablehlo.convert"(%155) : (tensor<2xi1>) -> tensor<2xf32>
        %157 = "stablehlo.reduce"(%156, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %158 = "stablehlo.subtract"(%152, %154) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %159 = "stablehlo.exponential"(%158) : (tensor<2xf32>) -> tensor<2xf32>
        %160 = "stablehlo.slice"(%159) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %161 = "stablehlo.reshape"(%160) : (tensor<1xf32>) -> tensor<f32>
        %162 = "stablehlo.slice"(%159) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %163 = "stablehlo.reshape"(%162) : (tensor<1xf32>) -> tensor<f32>
        %164 = "stablehlo.add"(%161, %163) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %165 = "stablehlo.broadcast_in_dim"(%164) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %166 = "stablehlo.divide"(%159, %165) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %167 = "stablehlo.multiply"(%164, %164) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %168 = "stablehlo.divide"(%8, %167) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %169 = "stablehlo.slice"(%41) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %170 = "stablehlo.slice"(%42) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %171 = "stablehlo.concatenate"(%169, %170) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %172 = "stablehlo.dot_general"(%171, %166) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %173 = "stablehlo.slice"(%36) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %174 = "stablehlo.slice"(%38) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %175 = "stablehlo.slice"(%39) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %176 = "stablehlo.concatenate"(%174, %175) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %177 = "stablehlo.dot_general"(%176, %173) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %178 = "stablehlo.divide"(%177, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %179 = "stablehlo.reduce"(%178, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %180 = "stablehlo.broadcast_in_dim"(%179) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %181 = "stablehlo.compare"(%178, %180) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %182 = "stablehlo.convert"(%181) : (tensor<2xi1>) -> tensor<2xf32>
        %183 = "stablehlo.reduce"(%182, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %184 = "stablehlo.subtract"(%178, %180) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %185 = "stablehlo.exponential"(%184) : (tensor<2xf32>) -> tensor<2xf32>
        %186 = "stablehlo.slice"(%185) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %187 = "stablehlo.reshape"(%186) : (tensor<1xf32>) -> tensor<f32>
        %188 = "stablehlo.slice"(%185) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %189 = "stablehlo.reshape"(%188) : (tensor<1xf32>) -> tensor<f32>
        %190 = "stablehlo.add"(%187, %189) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %191 = "stablehlo.broadcast_in_dim"(%190) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %192 = "stablehlo.divide"(%185, %191) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %193 = "stablehlo.multiply"(%190, %190) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %194 = "stablehlo.divide"(%8, %193) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %195 = "stablehlo.slice"(%41) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %196 = "stablehlo.slice"(%42) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %197 = "stablehlo.concatenate"(%195, %196) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %198 = "stablehlo.dot_general"(%197, %192) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %199 = "stablehlo.concatenate"(%68, %94, %120, %146, %172, %198) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
        %200 = "stablehlo.slice"(%arg8) <{limit_indices = array<i64: 1, 288, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %201 = "stablehlo.reshape"(%200) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %202 = "stablehlo.dot_general"(%201, %199) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %203 = "stablehlo.add"(%arg0, %202) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %204 = "stablehlo.slice"(%arg2) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
        %205 = "stablehlo.reshape"(%204) : (tensor<1x288xf32>) -> tensor<288xf32>
        %206 = "stablehlo.dot_general"(%203, %203) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
        %207 = "stablehlo.divide"(%206, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %208 = "stablehlo.add"(%207, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %209 = "stablehlo.sqrt"(%208) : (tensor<f32>) -> tensor<f32>
        %210 = "stablehlo.divide"(%7, %209) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %211 = "stablehlo.divide"(%8, %209) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %212 = "stablehlo.multiply"(%209, %209) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %213 = "stablehlo.divide"(%8, %212) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %214 = "stablehlo.multiply"(%205, %203) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %215 = "stablehlo.broadcast_in_dim"(%211) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
        %216 = "stablehlo.multiply"(%214, %215) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %217 = "stablehlo.slice"(%arg4) <{limit_indices = array<i64: 1, 768, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
        %218 = "stablehlo.reshape"(%217) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
        %219 = "stablehlo.dot_general"(%218, %216) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
        %220 = "stablehlo.slice"(%arg6) <{limit_indices = array<i64: 1, 768, 288>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
        %221 = "stablehlo.reshape"(%220) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
        %222 = "stablehlo.dot_general"(%221, %216) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
        %223 = "stablehlo.negate"(%219) : (tensor<768xf32>) -> tensor<768xf32>
        %224 = "stablehlo.exponential"(%223) : (tensor<768xf32>) -> tensor<768xf32>
        %225 = "stablehlo.add"(%1, %224) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %226 = "stablehlo.divide"(%1, %225) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %227 = "stablehlo.multiply"(%225, %225) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %228 = "stablehlo.divide"(%1, %227) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %229 = "stablehlo.multiply"(%219, %226) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %230 = "stablehlo.multiply"(%229, %222) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %231 = "stablehlo.slice"(%arg5) <{limit_indices = array<i64: 1, 288, 768>, start_indices = array<i64: 0, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
        %232 = "stablehlo.reshape"(%231) : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
        %233 = "stablehlo.dot_general"(%232, %230) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
        %234 = "stablehlo.add"(%203, %233) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %235 = "stablehlo.slice"(%arg1) <{limit_indices = array<i64: 2, 288>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
        %236 = "stablehlo.reshape"(%235) : (tensor<1x288xf32>) -> tensor<288xf32>
        %237 = "stablehlo.dot_general"(%234, %234) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
        %238 = "stablehlo.divide"(%237, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %239 = "stablehlo.add"(%238, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %240 = "stablehlo.sqrt"(%239) : (tensor<f32>) -> tensor<f32>
        %241 = "stablehlo.divide"(%7, %240) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %242 = "stablehlo.divide"(%8, %240) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %243 = "stablehlo.multiply"(%240, %240) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %244 = "stablehlo.divide"(%8, %243) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %245 = "stablehlo.multiply"(%236, %234) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %246 = "stablehlo.broadcast_in_dim"(%242) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
        %247 = "stablehlo.multiply"(%245, %246) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %248 = "stablehlo.slice"(%arg9) <{limit_indices = array<i64: 2, 288, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %249 = "stablehlo.reshape"(%248) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %250 = "stablehlo.dot_general"(%249, %247) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %251 = "stablehlo.slice"(%arg7) <{limit_indices = array<i64: 2, 288, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %252 = "stablehlo.reshape"(%251) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %253 = "stablehlo.dot_general"(%252, %247) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %254 = "stablehlo.slice"(%arg10) <{limit_indices = array<i64: 2, 288, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %255 = "stablehlo.reshape"(%254) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %256 = "stablehlo.dot_general"(%255, %247) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %257 = "stablehlo.reshape"(%250) : (tensor<288xf32>) -> tensor<144x2xf32>
        %258 = "stablehlo.reshape"(%253) : (tensor<288xf32>) -> tensor<144x2xf32>
        %259 = "stablehlo.dot_general"(%9, %258) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
        %260 = "stablehlo.dot_general"(%9, %257) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
        %261 = "stablehlo.reshape"(%260) : (tensor<144x2xf32>) -> tensor<288xf32>
        %262 = "stablehlo.slice"(%arg11) <{limit_indices = array<i64: 2, 1, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
        %263 = "stablehlo.reshape"(%262) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
        %264 = "stablehlo.reshape"(%259) : (tensor<144x2xf32>) -> tensor<1x288xf32>
        %265 = "stablehlo.slice"(%arg12) <{limit_indices = array<i64: 2, 1, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
        %266 = "stablehlo.reshape"(%265) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
        %267 = "stablehlo.reshape"(%256) : (tensor<288xf32>) -> tensor<1x288xf32>
        %268 = "stablehlo.slice"(%261) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %269 = "stablehlo.slice"(%263) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %270 = "stablehlo.slice"(%264) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %271 = "stablehlo.concatenate"(%269, %270) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %272 = "stablehlo.dot_general"(%271, %268) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %273 = "stablehlo.divide"(%272, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %274 = "stablehlo.reduce"(%273, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %275 = "stablehlo.broadcast_in_dim"(%274) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %276 = "stablehlo.compare"(%273, %275) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %277 = "stablehlo.convert"(%276) : (tensor<2xi1>) -> tensor<2xf32>
        %278 = "stablehlo.reduce"(%277, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %279 = "stablehlo.subtract"(%273, %275) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %280 = "stablehlo.exponential"(%279) : (tensor<2xf32>) -> tensor<2xf32>
        %281 = "stablehlo.slice"(%280) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %282 = "stablehlo.reshape"(%281) : (tensor<1xf32>) -> tensor<f32>
        %283 = "stablehlo.slice"(%280) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %284 = "stablehlo.reshape"(%283) : (tensor<1xf32>) -> tensor<f32>
        %285 = "stablehlo.add"(%282, %284) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %286 = "stablehlo.broadcast_in_dim"(%285) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %287 = "stablehlo.divide"(%280, %286) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %288 = "stablehlo.multiply"(%285, %285) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %289 = "stablehlo.divide"(%8, %288) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %290 = "stablehlo.slice"(%266) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %291 = "stablehlo.slice"(%267) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %292 = "stablehlo.concatenate"(%290, %291) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %293 = "stablehlo.dot_general"(%292, %287) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %294 = "stablehlo.slice"(%261) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %295 = "stablehlo.slice"(%263) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %296 = "stablehlo.slice"(%264) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %297 = "stablehlo.concatenate"(%295, %296) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %298 = "stablehlo.dot_general"(%297, %294) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %299 = "stablehlo.divide"(%298, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %300 = "stablehlo.reduce"(%299, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %301 = "stablehlo.broadcast_in_dim"(%300) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %302 = "stablehlo.compare"(%299, %301) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %303 = "stablehlo.convert"(%302) : (tensor<2xi1>) -> tensor<2xf32>
        %304 = "stablehlo.reduce"(%303, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %305 = "stablehlo.subtract"(%299, %301) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %306 = "stablehlo.exponential"(%305) : (tensor<2xf32>) -> tensor<2xf32>
        %307 = "stablehlo.slice"(%306) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %308 = "stablehlo.reshape"(%307) : (tensor<1xf32>) -> tensor<f32>
        %309 = "stablehlo.slice"(%306) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %310 = "stablehlo.reshape"(%309) : (tensor<1xf32>) -> tensor<f32>
        %311 = "stablehlo.add"(%308, %310) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %312 = "stablehlo.broadcast_in_dim"(%311) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %313 = "stablehlo.divide"(%306, %312) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %314 = "stablehlo.multiply"(%311, %311) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %315 = "stablehlo.divide"(%8, %314) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %316 = "stablehlo.slice"(%266) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %317 = "stablehlo.slice"(%267) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %318 = "stablehlo.concatenate"(%316, %317) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %319 = "stablehlo.dot_general"(%318, %313) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %320 = "stablehlo.slice"(%261) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %321 = "stablehlo.slice"(%263) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %322 = "stablehlo.slice"(%264) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %323 = "stablehlo.concatenate"(%321, %322) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %324 = "stablehlo.dot_general"(%323, %320) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %325 = "stablehlo.divide"(%324, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %326 = "stablehlo.reduce"(%325, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %327 = "stablehlo.broadcast_in_dim"(%326) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %328 = "stablehlo.compare"(%325, %327) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %329 = "stablehlo.convert"(%328) : (tensor<2xi1>) -> tensor<2xf32>
        %330 = "stablehlo.reduce"(%329, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %331 = "stablehlo.subtract"(%325, %327) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %332 = "stablehlo.exponential"(%331) : (tensor<2xf32>) -> tensor<2xf32>
        %333 = "stablehlo.slice"(%332) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %334 = "stablehlo.reshape"(%333) : (tensor<1xf32>) -> tensor<f32>
        %335 = "stablehlo.slice"(%332) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %336 = "stablehlo.reshape"(%335) : (tensor<1xf32>) -> tensor<f32>
        %337 = "stablehlo.add"(%334, %336) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %338 = "stablehlo.broadcast_in_dim"(%337) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %339 = "stablehlo.divide"(%332, %338) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %340 = "stablehlo.multiply"(%337, %337) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %341 = "stablehlo.divide"(%8, %340) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %342 = "stablehlo.slice"(%266) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %343 = "stablehlo.slice"(%267) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %344 = "stablehlo.concatenate"(%342, %343) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %345 = "stablehlo.dot_general"(%344, %339) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %346 = "stablehlo.slice"(%261) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %347 = "stablehlo.slice"(%263) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %348 = "stablehlo.slice"(%264) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %349 = "stablehlo.concatenate"(%347, %348) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %350 = "stablehlo.dot_general"(%349, %346) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %351 = "stablehlo.divide"(%350, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %352 = "stablehlo.reduce"(%351, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %353 = "stablehlo.broadcast_in_dim"(%352) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %354 = "stablehlo.compare"(%351, %353) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %355 = "stablehlo.convert"(%354) : (tensor<2xi1>) -> tensor<2xf32>
        %356 = "stablehlo.reduce"(%355, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %357 = "stablehlo.subtract"(%351, %353) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %358 = "stablehlo.exponential"(%357) : (tensor<2xf32>) -> tensor<2xf32>
        %359 = "stablehlo.slice"(%358) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %360 = "stablehlo.reshape"(%359) : (tensor<1xf32>) -> tensor<f32>
        %361 = "stablehlo.slice"(%358) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %362 = "stablehlo.reshape"(%361) : (tensor<1xf32>) -> tensor<f32>
        %363 = "stablehlo.add"(%360, %362) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %364 = "stablehlo.broadcast_in_dim"(%363) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %365 = "stablehlo.divide"(%358, %364) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %366 = "stablehlo.multiply"(%363, %363) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %367 = "stablehlo.divide"(%8, %366) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %368 = "stablehlo.slice"(%266) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %369 = "stablehlo.slice"(%267) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %370 = "stablehlo.concatenate"(%368, %369) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %371 = "stablehlo.dot_general"(%370, %365) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %372 = "stablehlo.slice"(%261) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %373 = "stablehlo.slice"(%263) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %374 = "stablehlo.slice"(%264) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %375 = "stablehlo.concatenate"(%373, %374) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %376 = "stablehlo.dot_general"(%375, %372) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %377 = "stablehlo.divide"(%376, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %378 = "stablehlo.reduce"(%377, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %379 = "stablehlo.broadcast_in_dim"(%378) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %380 = "stablehlo.compare"(%377, %379) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %381 = "stablehlo.convert"(%380) : (tensor<2xi1>) -> tensor<2xf32>
        %382 = "stablehlo.reduce"(%381, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %383 = "stablehlo.subtract"(%377, %379) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %384 = "stablehlo.exponential"(%383) : (tensor<2xf32>) -> tensor<2xf32>
        %385 = "stablehlo.slice"(%384) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %386 = "stablehlo.reshape"(%385) : (tensor<1xf32>) -> tensor<f32>
        %387 = "stablehlo.slice"(%384) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %388 = "stablehlo.reshape"(%387) : (tensor<1xf32>) -> tensor<f32>
        %389 = "stablehlo.add"(%386, %388) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %390 = "stablehlo.broadcast_in_dim"(%389) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %391 = "stablehlo.divide"(%384, %390) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %392 = "stablehlo.multiply"(%389, %389) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %393 = "stablehlo.divide"(%8, %392) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %394 = "stablehlo.slice"(%266) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %395 = "stablehlo.slice"(%267) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %396 = "stablehlo.concatenate"(%394, %395) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %397 = "stablehlo.dot_general"(%396, %391) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %398 = "stablehlo.slice"(%261) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %399 = "stablehlo.slice"(%263) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %400 = "stablehlo.slice"(%264) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %401 = "stablehlo.concatenate"(%399, %400) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %402 = "stablehlo.dot_general"(%401, %398) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %403 = "stablehlo.divide"(%402, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %404 = "stablehlo.reduce"(%403, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %405 = "stablehlo.broadcast_in_dim"(%404) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %406 = "stablehlo.compare"(%403, %405) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %407 = "stablehlo.convert"(%406) : (tensor<2xi1>) -> tensor<2xf32>
        %408 = "stablehlo.reduce"(%407, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %409 = "stablehlo.subtract"(%403, %405) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %410 = "stablehlo.exponential"(%409) : (tensor<2xf32>) -> tensor<2xf32>
        %411 = "stablehlo.slice"(%410) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %412 = "stablehlo.reshape"(%411) : (tensor<1xf32>) -> tensor<f32>
        %413 = "stablehlo.slice"(%410) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %414 = "stablehlo.reshape"(%413) : (tensor<1xf32>) -> tensor<f32>
        %415 = "stablehlo.add"(%412, %414) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %416 = "stablehlo.broadcast_in_dim"(%415) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %417 = "stablehlo.divide"(%410, %416) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %418 = "stablehlo.multiply"(%415, %415) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %419 = "stablehlo.divide"(%8, %418) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %420 = "stablehlo.slice"(%266) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %421 = "stablehlo.slice"(%267) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %422 = "stablehlo.concatenate"(%420, %421) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %423 = "stablehlo.dot_general"(%422, %417) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %424 = "stablehlo.concatenate"(%293, %319, %345, %371, %397, %423) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
        %425 = "stablehlo.slice"(%arg8) <{limit_indices = array<i64: 2, 288, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %426 = "stablehlo.reshape"(%425) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %427 = "stablehlo.dot_general"(%426, %424) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %428 = "stablehlo.add"(%234, %427) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %429 = "stablehlo.slice"(%arg2) <{limit_indices = array<i64: 2, 288>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
        %430 = "stablehlo.reshape"(%429) : (tensor<1x288xf32>) -> tensor<288xf32>
        %431 = "stablehlo.dot_general"(%428, %428) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
        %432 = "stablehlo.divide"(%431, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %433 = "stablehlo.add"(%432, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %434 = "stablehlo.sqrt"(%433) : (tensor<f32>) -> tensor<f32>
        %435 = "stablehlo.divide"(%7, %434) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %436 = "stablehlo.divide"(%8, %434) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %437 = "stablehlo.multiply"(%434, %434) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %438 = "stablehlo.divide"(%8, %437) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %439 = "stablehlo.multiply"(%430, %428) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %440 = "stablehlo.broadcast_in_dim"(%436) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
        %441 = "stablehlo.multiply"(%439, %440) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %442 = "stablehlo.slice"(%arg4) <{limit_indices = array<i64: 2, 768, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
        %443 = "stablehlo.reshape"(%442) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
        %444 = "stablehlo.dot_general"(%443, %441) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
        %445 = "stablehlo.slice"(%arg6) <{limit_indices = array<i64: 2, 768, 288>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
        %446 = "stablehlo.reshape"(%445) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
        %447 = "stablehlo.dot_general"(%446, %441) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
        %448 = "stablehlo.negate"(%444) : (tensor<768xf32>) -> tensor<768xf32>
        %449 = "stablehlo.exponential"(%448) : (tensor<768xf32>) -> tensor<768xf32>
        %450 = "stablehlo.add"(%1, %449) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %451 = "stablehlo.divide"(%1, %450) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %452 = "stablehlo.multiply"(%450, %450) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %453 = "stablehlo.divide"(%1, %452) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %454 = "stablehlo.multiply"(%444, %451) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %455 = "stablehlo.multiply"(%454, %447) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %456 = "stablehlo.slice"(%arg5) <{limit_indices = array<i64: 2, 288, 768>, start_indices = array<i64: 1, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
        %457 = "stablehlo.reshape"(%456) : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
        %458 = "stablehlo.dot_general"(%457, %455) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
        %459 = "stablehlo.add"(%428, %458) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %460 = "stablehlo.slice"(%arg1) <{limit_indices = array<i64: 3, 288>, start_indices = array<i64: 2, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
        %461 = "stablehlo.reshape"(%460) : (tensor<1x288xf32>) -> tensor<288xf32>
        %462 = "stablehlo.dot_general"(%459, %459) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
        %463 = "stablehlo.divide"(%462, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %464 = "stablehlo.add"(%463, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %465 = "stablehlo.sqrt"(%464) : (tensor<f32>) -> tensor<f32>
        %466 = "stablehlo.divide"(%7, %465) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %467 = "stablehlo.divide"(%8, %465) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %468 = "stablehlo.multiply"(%465, %465) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %469 = "stablehlo.divide"(%8, %468) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %470 = "stablehlo.multiply"(%461, %459) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %471 = "stablehlo.broadcast_in_dim"(%467) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
        %472 = "stablehlo.multiply"(%470, %471) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %473 = "stablehlo.slice"(%arg9) <{limit_indices = array<i64: 3, 288, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %474 = "stablehlo.reshape"(%473) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %475 = "stablehlo.dot_general"(%474, %472) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %476 = "stablehlo.slice"(%arg7) <{limit_indices = array<i64: 3, 288, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %477 = "stablehlo.reshape"(%476) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %478 = "stablehlo.dot_general"(%477, %472) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %479 = "stablehlo.slice"(%arg10) <{limit_indices = array<i64: 3, 288, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %480 = "stablehlo.reshape"(%479) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %481 = "stablehlo.dot_general"(%480, %472) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %482 = "stablehlo.reshape"(%475) : (tensor<288xf32>) -> tensor<144x2xf32>
        %483 = "stablehlo.reshape"(%478) : (tensor<288xf32>) -> tensor<144x2xf32>
        %484 = "stablehlo.dot_general"(%9, %483) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
        %485 = "stablehlo.dot_general"(%9, %482) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
        %486 = "stablehlo.reshape"(%485) : (tensor<144x2xf32>) -> tensor<288xf32>
        %487 = "stablehlo.slice"(%arg11) <{limit_indices = array<i64: 3, 1, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
        %488 = "stablehlo.reshape"(%487) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
        %489 = "stablehlo.reshape"(%484) : (tensor<144x2xf32>) -> tensor<1x288xf32>
        %490 = "stablehlo.slice"(%arg12) <{limit_indices = array<i64: 3, 1, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
        %491 = "stablehlo.reshape"(%490) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
        %492 = "stablehlo.reshape"(%481) : (tensor<288xf32>) -> tensor<1x288xf32>
        %493 = "stablehlo.slice"(%486) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %494 = "stablehlo.slice"(%488) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %495 = "stablehlo.slice"(%489) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %496 = "stablehlo.concatenate"(%494, %495) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %497 = "stablehlo.dot_general"(%496, %493) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %498 = "stablehlo.divide"(%497, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %499 = "stablehlo.reduce"(%498, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %500 = "stablehlo.broadcast_in_dim"(%499) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %501 = "stablehlo.compare"(%498, %500) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %502 = "stablehlo.convert"(%501) : (tensor<2xi1>) -> tensor<2xf32>
        %503 = "stablehlo.reduce"(%502, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %504 = "stablehlo.subtract"(%498, %500) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %505 = "stablehlo.exponential"(%504) : (tensor<2xf32>) -> tensor<2xf32>
        %506 = "stablehlo.slice"(%505) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %507 = "stablehlo.reshape"(%506) : (tensor<1xf32>) -> tensor<f32>
        %508 = "stablehlo.slice"(%505) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %509 = "stablehlo.reshape"(%508) : (tensor<1xf32>) -> tensor<f32>
        %510 = "stablehlo.add"(%507, %509) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %511 = "stablehlo.broadcast_in_dim"(%510) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %512 = "stablehlo.divide"(%505, %511) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %513 = "stablehlo.multiply"(%510, %510) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %514 = "stablehlo.divide"(%8, %513) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %515 = "stablehlo.slice"(%491) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %516 = "stablehlo.slice"(%492) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %517 = "stablehlo.concatenate"(%515, %516) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %518 = "stablehlo.dot_general"(%517, %512) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %519 = "stablehlo.slice"(%486) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %520 = "stablehlo.slice"(%488) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %521 = "stablehlo.slice"(%489) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %522 = "stablehlo.concatenate"(%520, %521) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %523 = "stablehlo.dot_general"(%522, %519) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %524 = "stablehlo.divide"(%523, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %525 = "stablehlo.reduce"(%524, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %526 = "stablehlo.broadcast_in_dim"(%525) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %527 = "stablehlo.compare"(%524, %526) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %528 = "stablehlo.convert"(%527) : (tensor<2xi1>) -> tensor<2xf32>
        %529 = "stablehlo.reduce"(%528, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %530 = "stablehlo.subtract"(%524, %526) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %531 = "stablehlo.exponential"(%530) : (tensor<2xf32>) -> tensor<2xf32>
        %532 = "stablehlo.slice"(%531) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %533 = "stablehlo.reshape"(%532) : (tensor<1xf32>) -> tensor<f32>
        %534 = "stablehlo.slice"(%531) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %535 = "stablehlo.reshape"(%534) : (tensor<1xf32>) -> tensor<f32>
        %536 = "stablehlo.add"(%533, %535) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %537 = "stablehlo.broadcast_in_dim"(%536) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %538 = "stablehlo.divide"(%531, %537) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %539 = "stablehlo.multiply"(%536, %536) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %540 = "stablehlo.divide"(%8, %539) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %541 = "stablehlo.slice"(%491) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %542 = "stablehlo.slice"(%492) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %543 = "stablehlo.concatenate"(%541, %542) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %544 = "stablehlo.dot_general"(%543, %538) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %545 = "stablehlo.slice"(%486) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %546 = "stablehlo.slice"(%488) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %547 = "stablehlo.slice"(%489) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %548 = "stablehlo.concatenate"(%546, %547) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %549 = "stablehlo.dot_general"(%548, %545) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %550 = "stablehlo.divide"(%549, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %551 = "stablehlo.reduce"(%550, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %552 = "stablehlo.broadcast_in_dim"(%551) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %553 = "stablehlo.compare"(%550, %552) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %554 = "stablehlo.convert"(%553) : (tensor<2xi1>) -> tensor<2xf32>
        %555 = "stablehlo.reduce"(%554, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %556 = "stablehlo.subtract"(%550, %552) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %557 = "stablehlo.exponential"(%556) : (tensor<2xf32>) -> tensor<2xf32>
        %558 = "stablehlo.slice"(%557) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %559 = "stablehlo.reshape"(%558) : (tensor<1xf32>) -> tensor<f32>
        %560 = "stablehlo.slice"(%557) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %561 = "stablehlo.reshape"(%560) : (tensor<1xf32>) -> tensor<f32>
        %562 = "stablehlo.add"(%559, %561) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %563 = "stablehlo.broadcast_in_dim"(%562) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %564 = "stablehlo.divide"(%557, %563) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %565 = "stablehlo.multiply"(%562, %562) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %566 = "stablehlo.divide"(%8, %565) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %567 = "stablehlo.slice"(%491) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %568 = "stablehlo.slice"(%492) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %569 = "stablehlo.concatenate"(%567, %568) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %570 = "stablehlo.dot_general"(%569, %564) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %571 = "stablehlo.slice"(%486) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %572 = "stablehlo.slice"(%488) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %573 = "stablehlo.slice"(%489) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %574 = "stablehlo.concatenate"(%572, %573) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %575 = "stablehlo.dot_general"(%574, %571) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %576 = "stablehlo.divide"(%575, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %577 = "stablehlo.reduce"(%576, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %578 = "stablehlo.broadcast_in_dim"(%577) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %579 = "stablehlo.compare"(%576, %578) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %580 = "stablehlo.convert"(%579) : (tensor<2xi1>) -> tensor<2xf32>
        %581 = "stablehlo.reduce"(%580, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %582 = "stablehlo.subtract"(%576, %578) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %583 = "stablehlo.exponential"(%582) : (tensor<2xf32>) -> tensor<2xf32>
        %584 = "stablehlo.slice"(%583) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %585 = "stablehlo.reshape"(%584) : (tensor<1xf32>) -> tensor<f32>
        %586 = "stablehlo.slice"(%583) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %587 = "stablehlo.reshape"(%586) : (tensor<1xf32>) -> tensor<f32>
        %588 = "stablehlo.add"(%585, %587) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %589 = "stablehlo.broadcast_in_dim"(%588) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %590 = "stablehlo.divide"(%583, %589) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %591 = "stablehlo.multiply"(%588, %588) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %592 = "stablehlo.divide"(%8, %591) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %593 = "stablehlo.slice"(%491) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %594 = "stablehlo.slice"(%492) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %595 = "stablehlo.concatenate"(%593, %594) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %596 = "stablehlo.dot_general"(%595, %590) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %597 = "stablehlo.slice"(%486) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %598 = "stablehlo.slice"(%488) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %599 = "stablehlo.slice"(%489) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %600 = "stablehlo.concatenate"(%598, %599) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %601 = "stablehlo.dot_general"(%600, %597) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %602 = "stablehlo.divide"(%601, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %603 = "stablehlo.reduce"(%602, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %604 = "stablehlo.broadcast_in_dim"(%603) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %605 = "stablehlo.compare"(%602, %604) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %606 = "stablehlo.convert"(%605) : (tensor<2xi1>) -> tensor<2xf32>
        %607 = "stablehlo.reduce"(%606, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %608 = "stablehlo.subtract"(%602, %604) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %609 = "stablehlo.exponential"(%608) : (tensor<2xf32>) -> tensor<2xf32>
        %610 = "stablehlo.slice"(%609) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %611 = "stablehlo.reshape"(%610) : (tensor<1xf32>) -> tensor<f32>
        %612 = "stablehlo.slice"(%609) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %613 = "stablehlo.reshape"(%612) : (tensor<1xf32>) -> tensor<f32>
        %614 = "stablehlo.add"(%611, %613) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %615 = "stablehlo.broadcast_in_dim"(%614) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %616 = "stablehlo.divide"(%609, %615) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %617 = "stablehlo.multiply"(%614, %614) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %618 = "stablehlo.divide"(%8, %617) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %619 = "stablehlo.slice"(%491) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %620 = "stablehlo.slice"(%492) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %621 = "stablehlo.concatenate"(%619, %620) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %622 = "stablehlo.dot_general"(%621, %616) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %623 = "stablehlo.slice"(%486) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %624 = "stablehlo.slice"(%488) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %625 = "stablehlo.slice"(%489) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %626 = "stablehlo.concatenate"(%624, %625) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %627 = "stablehlo.dot_general"(%626, %623) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %628 = "stablehlo.divide"(%627, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %629 = "stablehlo.reduce"(%628, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %630 = "stablehlo.broadcast_in_dim"(%629) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %631 = "stablehlo.compare"(%628, %630) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %632 = "stablehlo.convert"(%631) : (tensor<2xi1>) -> tensor<2xf32>
        %633 = "stablehlo.reduce"(%632, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %634 = "stablehlo.subtract"(%628, %630) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %635 = "stablehlo.exponential"(%634) : (tensor<2xf32>) -> tensor<2xf32>
        %636 = "stablehlo.slice"(%635) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %637 = "stablehlo.reshape"(%636) : (tensor<1xf32>) -> tensor<f32>
        %638 = "stablehlo.slice"(%635) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %639 = "stablehlo.reshape"(%638) : (tensor<1xf32>) -> tensor<f32>
        %640 = "stablehlo.add"(%637, %639) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %641 = "stablehlo.broadcast_in_dim"(%640) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %642 = "stablehlo.divide"(%635, %641) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %643 = "stablehlo.multiply"(%640, %640) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %644 = "stablehlo.divide"(%8, %643) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %645 = "stablehlo.slice"(%491) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %646 = "stablehlo.slice"(%492) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %647 = "stablehlo.concatenate"(%645, %646) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %648 = "stablehlo.dot_general"(%647, %642) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %649 = "stablehlo.concatenate"(%518, %544, %570, %596, %622, %648) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
        %650 = "stablehlo.slice"(%arg8) <{limit_indices = array<i64: 3, 288, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %651 = "stablehlo.reshape"(%650) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %652 = "stablehlo.dot_general"(%651, %649) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %653 = "stablehlo.add"(%459, %652) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %654 = "stablehlo.slice"(%arg2) <{limit_indices = array<i64: 3, 288>, start_indices = array<i64: 2, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
        %655 = "stablehlo.reshape"(%654) : (tensor<1x288xf32>) -> tensor<288xf32>
        %656 = "stablehlo.dot_general"(%653, %653) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
        %657 = "stablehlo.divide"(%656, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %658 = "stablehlo.add"(%657, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %659 = "stablehlo.sqrt"(%658) : (tensor<f32>) -> tensor<f32>
        %660 = "stablehlo.divide"(%7, %659) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %661 = "stablehlo.divide"(%8, %659) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %662 = "stablehlo.multiply"(%659, %659) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %663 = "stablehlo.divide"(%8, %662) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %664 = "stablehlo.multiply"(%655, %653) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %665 = "stablehlo.broadcast_in_dim"(%661) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
        %666 = "stablehlo.multiply"(%664, %665) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %667 = "stablehlo.slice"(%arg4) <{limit_indices = array<i64: 3, 768, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
        %668 = "stablehlo.reshape"(%667) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
        %669 = "stablehlo.dot_general"(%668, %666) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
        %670 = "stablehlo.slice"(%arg6) <{limit_indices = array<i64: 3, 768, 288>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
        %671 = "stablehlo.reshape"(%670) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
        %672 = "stablehlo.dot_general"(%671, %666) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
        %673 = "stablehlo.negate"(%669) : (tensor<768xf32>) -> tensor<768xf32>
        %674 = "stablehlo.exponential"(%673) : (tensor<768xf32>) -> tensor<768xf32>
        %675 = "stablehlo.add"(%1, %674) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %676 = "stablehlo.divide"(%1, %675) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %677 = "stablehlo.multiply"(%675, %675) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %678 = "stablehlo.divide"(%1, %677) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %679 = "stablehlo.multiply"(%669, %676) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %680 = "stablehlo.multiply"(%679, %672) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %681 = "stablehlo.slice"(%arg5) <{limit_indices = array<i64: 3, 288, 768>, start_indices = array<i64: 2, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
        %682 = "stablehlo.reshape"(%681) : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
        %683 = "stablehlo.dot_general"(%682, %680) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
        %684 = "stablehlo.add"(%653, %683) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %685 = "stablehlo.slice"(%arg1) <{limit_indices = array<i64: 4, 288>, start_indices = array<i64: 3, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
        %686 = "stablehlo.reshape"(%685) : (tensor<1x288xf32>) -> tensor<288xf32>
        %687 = "stablehlo.dot_general"(%684, %684) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
        %688 = "stablehlo.divide"(%687, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %689 = "stablehlo.add"(%688, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %690 = "stablehlo.sqrt"(%689) : (tensor<f32>) -> tensor<f32>
        %691 = "stablehlo.divide"(%7, %690) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %692 = "stablehlo.divide"(%8, %690) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %693 = "stablehlo.multiply"(%690, %690) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %694 = "stablehlo.divide"(%8, %693) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %695 = "stablehlo.multiply"(%686, %684) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %696 = "stablehlo.broadcast_in_dim"(%692) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
        %697 = "stablehlo.multiply"(%695, %696) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %698 = "stablehlo.slice"(%arg9) <{limit_indices = array<i64: 4, 288, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %699 = "stablehlo.reshape"(%698) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %700 = "stablehlo.dot_general"(%699, %697) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %701 = "stablehlo.slice"(%arg7) <{limit_indices = array<i64: 4, 288, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %702 = "stablehlo.reshape"(%701) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %703 = "stablehlo.dot_general"(%702, %697) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %704 = "stablehlo.slice"(%arg10) <{limit_indices = array<i64: 4, 288, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %705 = "stablehlo.reshape"(%704) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %706 = "stablehlo.dot_general"(%705, %697) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %707 = "stablehlo.reshape"(%700) : (tensor<288xf32>) -> tensor<144x2xf32>
        %708 = "stablehlo.reshape"(%703) : (tensor<288xf32>) -> tensor<144x2xf32>
        %709 = "stablehlo.dot_general"(%9, %708) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
        %710 = "stablehlo.dot_general"(%9, %707) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
        %711 = "stablehlo.reshape"(%710) : (tensor<144x2xf32>) -> tensor<288xf32>
        %712 = "stablehlo.slice"(%arg11) <{limit_indices = array<i64: 4, 1, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
        %713 = "stablehlo.reshape"(%712) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
        %714 = "stablehlo.reshape"(%709) : (tensor<144x2xf32>) -> tensor<1x288xf32>
        %715 = "stablehlo.slice"(%arg12) <{limit_indices = array<i64: 4, 1, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
        %716 = "stablehlo.reshape"(%715) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
        %717 = "stablehlo.reshape"(%706) : (tensor<288xf32>) -> tensor<1x288xf32>
        %718 = "stablehlo.slice"(%711) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %719 = "stablehlo.slice"(%713) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %720 = "stablehlo.slice"(%714) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %721 = "stablehlo.concatenate"(%719, %720) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %722 = "stablehlo.dot_general"(%721, %718) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %723 = "stablehlo.divide"(%722, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %724 = "stablehlo.reduce"(%723, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %725 = "stablehlo.broadcast_in_dim"(%724) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %726 = "stablehlo.compare"(%723, %725) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %727 = "stablehlo.convert"(%726) : (tensor<2xi1>) -> tensor<2xf32>
        %728 = "stablehlo.reduce"(%727, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %729 = "stablehlo.subtract"(%723, %725) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %730 = "stablehlo.exponential"(%729) : (tensor<2xf32>) -> tensor<2xf32>
        %731 = "stablehlo.slice"(%730) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %732 = "stablehlo.reshape"(%731) : (tensor<1xf32>) -> tensor<f32>
        %733 = "stablehlo.slice"(%730) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %734 = "stablehlo.reshape"(%733) : (tensor<1xf32>) -> tensor<f32>
        %735 = "stablehlo.add"(%732, %734) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %736 = "stablehlo.broadcast_in_dim"(%735) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %737 = "stablehlo.divide"(%730, %736) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %738 = "stablehlo.multiply"(%735, %735) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %739 = "stablehlo.divide"(%8, %738) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %740 = "stablehlo.slice"(%716) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %741 = "stablehlo.slice"(%717) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %742 = "stablehlo.concatenate"(%740, %741) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %743 = "stablehlo.dot_general"(%742, %737) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %744 = "stablehlo.slice"(%711) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %745 = "stablehlo.slice"(%713) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %746 = "stablehlo.slice"(%714) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %747 = "stablehlo.concatenate"(%745, %746) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %748 = "stablehlo.dot_general"(%747, %744) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %749 = "stablehlo.divide"(%748, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %750 = "stablehlo.reduce"(%749, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %751 = "stablehlo.broadcast_in_dim"(%750) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %752 = "stablehlo.compare"(%749, %751) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %753 = "stablehlo.convert"(%752) : (tensor<2xi1>) -> tensor<2xf32>
        %754 = "stablehlo.reduce"(%753, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %755 = "stablehlo.subtract"(%749, %751) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %756 = "stablehlo.exponential"(%755) : (tensor<2xf32>) -> tensor<2xf32>
        %757 = "stablehlo.slice"(%756) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %758 = "stablehlo.reshape"(%757) : (tensor<1xf32>) -> tensor<f32>
        %759 = "stablehlo.slice"(%756) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %760 = "stablehlo.reshape"(%759) : (tensor<1xf32>) -> tensor<f32>
        %761 = "stablehlo.add"(%758, %760) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %762 = "stablehlo.broadcast_in_dim"(%761) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %763 = "stablehlo.divide"(%756, %762) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %764 = "stablehlo.multiply"(%761, %761) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %765 = "stablehlo.divide"(%8, %764) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %766 = "stablehlo.slice"(%716) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %767 = "stablehlo.slice"(%717) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %768 = "stablehlo.concatenate"(%766, %767) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %769 = "stablehlo.dot_general"(%768, %763) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %770 = "stablehlo.slice"(%711) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %771 = "stablehlo.slice"(%713) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %772 = "stablehlo.slice"(%714) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %773 = "stablehlo.concatenate"(%771, %772) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %774 = "stablehlo.dot_general"(%773, %770) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %775 = "stablehlo.divide"(%774, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %776 = "stablehlo.reduce"(%775, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %777 = "stablehlo.broadcast_in_dim"(%776) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %778 = "stablehlo.compare"(%775, %777) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %779 = "stablehlo.convert"(%778) : (tensor<2xi1>) -> tensor<2xf32>
        %780 = "stablehlo.reduce"(%779, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %781 = "stablehlo.subtract"(%775, %777) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %782 = "stablehlo.exponential"(%781) : (tensor<2xf32>) -> tensor<2xf32>
        %783 = "stablehlo.slice"(%782) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %784 = "stablehlo.reshape"(%783) : (tensor<1xf32>) -> tensor<f32>
        %785 = "stablehlo.slice"(%782) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %786 = "stablehlo.reshape"(%785) : (tensor<1xf32>) -> tensor<f32>
        %787 = "stablehlo.add"(%784, %786) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %788 = "stablehlo.broadcast_in_dim"(%787) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %789 = "stablehlo.divide"(%782, %788) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %790 = "stablehlo.multiply"(%787, %787) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %791 = "stablehlo.divide"(%8, %790) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %792 = "stablehlo.slice"(%716) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %793 = "stablehlo.slice"(%717) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %794 = "stablehlo.concatenate"(%792, %793) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %795 = "stablehlo.dot_general"(%794, %789) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %796 = "stablehlo.slice"(%711) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %797 = "stablehlo.slice"(%713) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %798 = "stablehlo.slice"(%714) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %799 = "stablehlo.concatenate"(%797, %798) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %800 = "stablehlo.dot_general"(%799, %796) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %801 = "stablehlo.divide"(%800, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %802 = "stablehlo.reduce"(%801, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %803 = "stablehlo.broadcast_in_dim"(%802) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %804 = "stablehlo.compare"(%801, %803) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %805 = "stablehlo.convert"(%804) : (tensor<2xi1>) -> tensor<2xf32>
        %806 = "stablehlo.reduce"(%805, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %807 = "stablehlo.subtract"(%801, %803) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %808 = "stablehlo.exponential"(%807) : (tensor<2xf32>) -> tensor<2xf32>
        %809 = "stablehlo.slice"(%808) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %810 = "stablehlo.reshape"(%809) : (tensor<1xf32>) -> tensor<f32>
        %811 = "stablehlo.slice"(%808) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %812 = "stablehlo.reshape"(%811) : (tensor<1xf32>) -> tensor<f32>
        %813 = "stablehlo.add"(%810, %812) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %814 = "stablehlo.broadcast_in_dim"(%813) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %815 = "stablehlo.divide"(%808, %814) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %816 = "stablehlo.multiply"(%813, %813) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %817 = "stablehlo.divide"(%8, %816) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %818 = "stablehlo.slice"(%716) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %819 = "stablehlo.slice"(%717) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %820 = "stablehlo.concatenate"(%818, %819) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %821 = "stablehlo.dot_general"(%820, %815) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %822 = "stablehlo.slice"(%711) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %823 = "stablehlo.slice"(%713) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %824 = "stablehlo.slice"(%714) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %825 = "stablehlo.concatenate"(%823, %824) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %826 = "stablehlo.dot_general"(%825, %822) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %827 = "stablehlo.divide"(%826, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %828 = "stablehlo.reduce"(%827, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %829 = "stablehlo.broadcast_in_dim"(%828) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %830 = "stablehlo.compare"(%827, %829) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %831 = "stablehlo.convert"(%830) : (tensor<2xi1>) -> tensor<2xf32>
        %832 = "stablehlo.reduce"(%831, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %833 = "stablehlo.subtract"(%827, %829) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %834 = "stablehlo.exponential"(%833) : (tensor<2xf32>) -> tensor<2xf32>
        %835 = "stablehlo.slice"(%834) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %836 = "stablehlo.reshape"(%835) : (tensor<1xf32>) -> tensor<f32>
        %837 = "stablehlo.slice"(%834) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %838 = "stablehlo.reshape"(%837) : (tensor<1xf32>) -> tensor<f32>
        %839 = "stablehlo.add"(%836, %838) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %840 = "stablehlo.broadcast_in_dim"(%839) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %841 = "stablehlo.divide"(%834, %840) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %842 = "stablehlo.multiply"(%839, %839) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %843 = "stablehlo.divide"(%8, %842) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %844 = "stablehlo.slice"(%716) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %845 = "stablehlo.slice"(%717) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %846 = "stablehlo.concatenate"(%844, %845) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %847 = "stablehlo.dot_general"(%846, %841) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %848 = "stablehlo.slice"(%711) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %849 = "stablehlo.slice"(%713) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %850 = "stablehlo.slice"(%714) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %851 = "stablehlo.concatenate"(%849, %850) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %852 = "stablehlo.dot_general"(%851, %848) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %853 = "stablehlo.divide"(%852, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %854 = "stablehlo.reduce"(%853, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %855 = "stablehlo.broadcast_in_dim"(%854) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %856 = "stablehlo.compare"(%853, %855) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %857 = "stablehlo.convert"(%856) : (tensor<2xi1>) -> tensor<2xf32>
        %858 = "stablehlo.reduce"(%857, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %859 = "stablehlo.subtract"(%853, %855) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %860 = "stablehlo.exponential"(%859) : (tensor<2xf32>) -> tensor<2xf32>
        %861 = "stablehlo.slice"(%860) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %862 = "stablehlo.reshape"(%861) : (tensor<1xf32>) -> tensor<f32>
        %863 = "stablehlo.slice"(%860) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %864 = "stablehlo.reshape"(%863) : (tensor<1xf32>) -> tensor<f32>
        %865 = "stablehlo.add"(%862, %864) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %866 = "stablehlo.broadcast_in_dim"(%865) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %867 = "stablehlo.divide"(%860, %866) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %868 = "stablehlo.multiply"(%865, %865) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %869 = "stablehlo.divide"(%8, %868) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %870 = "stablehlo.slice"(%716) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %871 = "stablehlo.slice"(%717) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %872 = "stablehlo.concatenate"(%870, %871) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %873 = "stablehlo.dot_general"(%872, %867) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %874 = "stablehlo.concatenate"(%743, %769, %795, %821, %847, %873) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
        %875 = "stablehlo.slice"(%arg8) <{limit_indices = array<i64: 4, 288, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %876 = "stablehlo.reshape"(%875) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %877 = "stablehlo.dot_general"(%876, %874) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %878 = "stablehlo.add"(%684, %877) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %879 = "stablehlo.slice"(%arg2) <{limit_indices = array<i64: 4, 288>, start_indices = array<i64: 3, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
        %880 = "stablehlo.reshape"(%879) : (tensor<1x288xf32>) -> tensor<288xf32>
        %881 = "stablehlo.dot_general"(%878, %878) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
        %882 = "stablehlo.divide"(%881, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %883 = "stablehlo.add"(%882, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %884 = "stablehlo.sqrt"(%883) : (tensor<f32>) -> tensor<f32>
        %885 = "stablehlo.divide"(%7, %884) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %886 = "stablehlo.divide"(%8, %884) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %887 = "stablehlo.multiply"(%884, %884) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %888 = "stablehlo.divide"(%8, %887) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %889 = "stablehlo.multiply"(%880, %878) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %890 = "stablehlo.broadcast_in_dim"(%886) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
        %891 = "stablehlo.multiply"(%889, %890) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %892 = "stablehlo.slice"(%arg4) <{limit_indices = array<i64: 4, 768, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
        %893 = "stablehlo.reshape"(%892) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
        %894 = "stablehlo.dot_general"(%893, %891) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
        %895 = "stablehlo.slice"(%arg6) <{limit_indices = array<i64: 4, 768, 288>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
        %896 = "stablehlo.reshape"(%895) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
        %897 = "stablehlo.dot_general"(%896, %891) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
        %898 = "stablehlo.negate"(%894) : (tensor<768xf32>) -> tensor<768xf32>
        %899 = "stablehlo.exponential"(%898) : (tensor<768xf32>) -> tensor<768xf32>
        %900 = "stablehlo.add"(%1, %899) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %901 = "stablehlo.divide"(%1, %900) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %902 = "stablehlo.multiply"(%900, %900) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %903 = "stablehlo.divide"(%1, %902) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %904 = "stablehlo.multiply"(%894, %901) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %905 = "stablehlo.multiply"(%904, %897) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %906 = "stablehlo.slice"(%arg5) <{limit_indices = array<i64: 4, 288, 768>, start_indices = array<i64: 3, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
        %907 = "stablehlo.reshape"(%906) : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
        %908 = "stablehlo.dot_general"(%907, %905) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
        %909 = "stablehlo.add"(%878, %908) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %910 = "stablehlo.slice"(%arg1) <{limit_indices = array<i64: 5, 288>, start_indices = array<i64: 4, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
        %911 = "stablehlo.reshape"(%910) : (tensor<1x288xf32>) -> tensor<288xf32>
        %912 = "stablehlo.dot_general"(%909, %909) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
        %913 = "stablehlo.divide"(%912, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %914 = "stablehlo.add"(%913, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %915 = "stablehlo.sqrt"(%914) : (tensor<f32>) -> tensor<f32>
        %916 = "stablehlo.divide"(%7, %915) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %917 = "stablehlo.divide"(%8, %915) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %918 = "stablehlo.multiply"(%915, %915) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %919 = "stablehlo.divide"(%8, %918) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %920 = "stablehlo.multiply"(%911, %909) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %921 = "stablehlo.broadcast_in_dim"(%917) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
        %922 = "stablehlo.multiply"(%920, %921) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %923 = "stablehlo.slice"(%arg9) <{limit_indices = array<i64: 5, 288, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %924 = "stablehlo.reshape"(%923) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %925 = "stablehlo.dot_general"(%924, %922) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %926 = "stablehlo.slice"(%arg7) <{limit_indices = array<i64: 5, 288, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %927 = "stablehlo.reshape"(%926) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %928 = "stablehlo.dot_general"(%927, %922) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %929 = "stablehlo.slice"(%arg10) <{limit_indices = array<i64: 5, 288, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %930 = "stablehlo.reshape"(%929) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %931 = "stablehlo.dot_general"(%930, %922) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %932 = "stablehlo.reshape"(%925) : (tensor<288xf32>) -> tensor<144x2xf32>
        %933 = "stablehlo.reshape"(%928) : (tensor<288xf32>) -> tensor<144x2xf32>
        %934 = "stablehlo.dot_general"(%9, %933) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
        %935 = "stablehlo.dot_general"(%9, %932) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
        %936 = "stablehlo.reshape"(%935) : (tensor<144x2xf32>) -> tensor<288xf32>
        %937 = "stablehlo.slice"(%arg11) <{limit_indices = array<i64: 5, 1, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
        %938 = "stablehlo.reshape"(%937) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
        %939 = "stablehlo.reshape"(%934) : (tensor<144x2xf32>) -> tensor<1x288xf32>
        %940 = "stablehlo.slice"(%arg12) <{limit_indices = array<i64: 5, 1, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
        %941 = "stablehlo.reshape"(%940) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
        %942 = "stablehlo.reshape"(%931) : (tensor<288xf32>) -> tensor<1x288xf32>
        %943 = "stablehlo.slice"(%936) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %944 = "stablehlo.slice"(%938) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %945 = "stablehlo.slice"(%939) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %946 = "stablehlo.concatenate"(%944, %945) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %947 = "stablehlo.dot_general"(%946, %943) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %948 = "stablehlo.divide"(%947, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %949 = "stablehlo.reduce"(%948, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %950 = "stablehlo.broadcast_in_dim"(%949) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %951 = "stablehlo.compare"(%948, %950) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %952 = "stablehlo.convert"(%951) : (tensor<2xi1>) -> tensor<2xf32>
        %953 = "stablehlo.reduce"(%952, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %954 = "stablehlo.subtract"(%948, %950) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %955 = "stablehlo.exponential"(%954) : (tensor<2xf32>) -> tensor<2xf32>
        %956 = "stablehlo.slice"(%955) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %957 = "stablehlo.reshape"(%956) : (tensor<1xf32>) -> tensor<f32>
        %958 = "stablehlo.slice"(%955) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %959 = "stablehlo.reshape"(%958) : (tensor<1xf32>) -> tensor<f32>
        %960 = "stablehlo.add"(%957, %959) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %961 = "stablehlo.broadcast_in_dim"(%960) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %962 = "stablehlo.divide"(%955, %961) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %963 = "stablehlo.multiply"(%960, %960) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %964 = "stablehlo.divide"(%8, %963) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %965 = "stablehlo.slice"(%941) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %966 = "stablehlo.slice"(%942) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %967 = "stablehlo.concatenate"(%965, %966) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %968 = "stablehlo.dot_general"(%967, %962) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %969 = "stablehlo.slice"(%936) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %970 = "stablehlo.slice"(%938) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %971 = "stablehlo.slice"(%939) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %972 = "stablehlo.concatenate"(%970, %971) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %973 = "stablehlo.dot_general"(%972, %969) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %974 = "stablehlo.divide"(%973, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %975 = "stablehlo.reduce"(%974, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %976 = "stablehlo.broadcast_in_dim"(%975) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %977 = "stablehlo.compare"(%974, %976) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %978 = "stablehlo.convert"(%977) : (tensor<2xi1>) -> tensor<2xf32>
        %979 = "stablehlo.reduce"(%978, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %980 = "stablehlo.subtract"(%974, %976) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %981 = "stablehlo.exponential"(%980) : (tensor<2xf32>) -> tensor<2xf32>
        %982 = "stablehlo.slice"(%981) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %983 = "stablehlo.reshape"(%982) : (tensor<1xf32>) -> tensor<f32>
        %984 = "stablehlo.slice"(%981) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %985 = "stablehlo.reshape"(%984) : (tensor<1xf32>) -> tensor<f32>
        %986 = "stablehlo.add"(%983, %985) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %987 = "stablehlo.broadcast_in_dim"(%986) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %988 = "stablehlo.divide"(%981, %987) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %989 = "stablehlo.multiply"(%986, %986) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %990 = "stablehlo.divide"(%8, %989) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %991 = "stablehlo.slice"(%941) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %992 = "stablehlo.slice"(%942) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %993 = "stablehlo.concatenate"(%991, %992) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %994 = "stablehlo.dot_general"(%993, %988) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %995 = "stablehlo.slice"(%936) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %996 = "stablehlo.slice"(%938) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %997 = "stablehlo.slice"(%939) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %998 = "stablehlo.concatenate"(%996, %997) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %999 = "stablehlo.dot_general"(%998, %995) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %1000 = "stablehlo.divide"(%999, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1001 = "stablehlo.reduce"(%1000, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1002 = "stablehlo.broadcast_in_dim"(%1001) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1003 = "stablehlo.compare"(%1000, %1002) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %1004 = "stablehlo.convert"(%1003) : (tensor<2xi1>) -> tensor<2xf32>
        %1005 = "stablehlo.reduce"(%1004, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1006 = "stablehlo.subtract"(%1000, %1002) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1007 = "stablehlo.exponential"(%1006) : (tensor<2xf32>) -> tensor<2xf32>
        %1008 = "stablehlo.slice"(%1007) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1009 = "stablehlo.reshape"(%1008) : (tensor<1xf32>) -> tensor<f32>
        %1010 = "stablehlo.slice"(%1007) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1011 = "stablehlo.reshape"(%1010) : (tensor<1xf32>) -> tensor<f32>
        %1012 = "stablehlo.add"(%1009, %1011) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1013 = "stablehlo.broadcast_in_dim"(%1012) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1014 = "stablehlo.divide"(%1007, %1013) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1015 = "stablehlo.multiply"(%1012, %1012) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1016 = "stablehlo.divide"(%8, %1015) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1017 = "stablehlo.slice"(%941) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1018 = "stablehlo.slice"(%942) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1019 = "stablehlo.concatenate"(%1017, %1018) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1020 = "stablehlo.dot_general"(%1019, %1014) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %1021 = "stablehlo.slice"(%936) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1022 = "stablehlo.slice"(%938) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1023 = "stablehlo.slice"(%939) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1024 = "stablehlo.concatenate"(%1022, %1023) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1025 = "stablehlo.dot_general"(%1024, %1021) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %1026 = "stablehlo.divide"(%1025, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1027 = "stablehlo.reduce"(%1026, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1028 = "stablehlo.broadcast_in_dim"(%1027) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1029 = "stablehlo.compare"(%1026, %1028) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %1030 = "stablehlo.convert"(%1029) : (tensor<2xi1>) -> tensor<2xf32>
        %1031 = "stablehlo.reduce"(%1030, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1032 = "stablehlo.subtract"(%1026, %1028) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1033 = "stablehlo.exponential"(%1032) : (tensor<2xf32>) -> tensor<2xf32>
        %1034 = "stablehlo.slice"(%1033) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1035 = "stablehlo.reshape"(%1034) : (tensor<1xf32>) -> tensor<f32>
        %1036 = "stablehlo.slice"(%1033) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1037 = "stablehlo.reshape"(%1036) : (tensor<1xf32>) -> tensor<f32>
        %1038 = "stablehlo.add"(%1035, %1037) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1039 = "stablehlo.broadcast_in_dim"(%1038) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1040 = "stablehlo.divide"(%1033, %1039) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1041 = "stablehlo.multiply"(%1038, %1038) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1042 = "stablehlo.divide"(%8, %1041) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1043 = "stablehlo.slice"(%941) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1044 = "stablehlo.slice"(%942) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1045 = "stablehlo.concatenate"(%1043, %1044) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1046 = "stablehlo.dot_general"(%1045, %1040) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %1047 = "stablehlo.slice"(%936) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1048 = "stablehlo.slice"(%938) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1049 = "stablehlo.slice"(%939) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1050 = "stablehlo.concatenate"(%1048, %1049) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1051 = "stablehlo.dot_general"(%1050, %1047) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %1052 = "stablehlo.divide"(%1051, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1053 = "stablehlo.reduce"(%1052, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1054 = "stablehlo.broadcast_in_dim"(%1053) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1055 = "stablehlo.compare"(%1052, %1054) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %1056 = "stablehlo.convert"(%1055) : (tensor<2xi1>) -> tensor<2xf32>
        %1057 = "stablehlo.reduce"(%1056, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1058 = "stablehlo.subtract"(%1052, %1054) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1059 = "stablehlo.exponential"(%1058) : (tensor<2xf32>) -> tensor<2xf32>
        %1060 = "stablehlo.slice"(%1059) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1061 = "stablehlo.reshape"(%1060) : (tensor<1xf32>) -> tensor<f32>
        %1062 = "stablehlo.slice"(%1059) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1063 = "stablehlo.reshape"(%1062) : (tensor<1xf32>) -> tensor<f32>
        %1064 = "stablehlo.add"(%1061, %1063) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1065 = "stablehlo.broadcast_in_dim"(%1064) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1066 = "stablehlo.divide"(%1059, %1065) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1067 = "stablehlo.multiply"(%1064, %1064) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1068 = "stablehlo.divide"(%8, %1067) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1069 = "stablehlo.slice"(%941) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1070 = "stablehlo.slice"(%942) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1071 = "stablehlo.concatenate"(%1069, %1070) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1072 = "stablehlo.dot_general"(%1071, %1066) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %1073 = "stablehlo.slice"(%936) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1074 = "stablehlo.slice"(%938) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1075 = "stablehlo.slice"(%939) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1076 = "stablehlo.concatenate"(%1074, %1075) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1077 = "stablehlo.dot_general"(%1076, %1073) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %1078 = "stablehlo.divide"(%1077, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1079 = "stablehlo.reduce"(%1078, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1080 = "stablehlo.broadcast_in_dim"(%1079) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1081 = "stablehlo.compare"(%1078, %1080) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %1082 = "stablehlo.convert"(%1081) : (tensor<2xi1>) -> tensor<2xf32>
        %1083 = "stablehlo.reduce"(%1082, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1084 = "stablehlo.subtract"(%1078, %1080) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1085 = "stablehlo.exponential"(%1084) : (tensor<2xf32>) -> tensor<2xf32>
        %1086 = "stablehlo.slice"(%1085) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1087 = "stablehlo.reshape"(%1086) : (tensor<1xf32>) -> tensor<f32>
        %1088 = "stablehlo.slice"(%1085) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1089 = "stablehlo.reshape"(%1088) : (tensor<1xf32>) -> tensor<f32>
        %1090 = "stablehlo.add"(%1087, %1089) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1091 = "stablehlo.broadcast_in_dim"(%1090) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1092 = "stablehlo.divide"(%1085, %1091) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1093 = "stablehlo.multiply"(%1090, %1090) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1094 = "stablehlo.divide"(%8, %1093) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1095 = "stablehlo.slice"(%941) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1096 = "stablehlo.slice"(%942) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1097 = "stablehlo.concatenate"(%1095, %1096) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1098 = "stablehlo.dot_general"(%1097, %1092) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %1099 = "stablehlo.concatenate"(%968, %994, %1020, %1046, %1072, %1098) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
        %1100 = "stablehlo.slice"(%arg8) <{limit_indices = array<i64: 5, 288, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %1101 = "stablehlo.reshape"(%1100) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %1102 = "stablehlo.dot_general"(%1101, %1099) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1103 = "stablehlo.add"(%909, %1102) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1104 = "stablehlo.slice"(%arg2) <{limit_indices = array<i64: 5, 288>, start_indices = array<i64: 4, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
        %1105 = "stablehlo.reshape"(%1104) : (tensor<1x288xf32>) -> tensor<288xf32>
        %1106 = "stablehlo.dot_general"(%1103, %1103) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
        %1107 = "stablehlo.divide"(%1106, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1108 = "stablehlo.add"(%1107, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1109 = "stablehlo.sqrt"(%1108) : (tensor<f32>) -> tensor<f32>
        %1110 = "stablehlo.divide"(%7, %1109) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1111 = "stablehlo.divide"(%8, %1109) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1112 = "stablehlo.multiply"(%1109, %1109) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1113 = "stablehlo.divide"(%8, %1112) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1114 = "stablehlo.multiply"(%1105, %1103) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1115 = "stablehlo.broadcast_in_dim"(%1111) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
        %1116 = "stablehlo.multiply"(%1114, %1115) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1117 = "stablehlo.slice"(%arg4) <{limit_indices = array<i64: 5, 768, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
        %1118 = "stablehlo.reshape"(%1117) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
        %1119 = "stablehlo.dot_general"(%1118, %1116) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
        %1120 = "stablehlo.slice"(%arg6) <{limit_indices = array<i64: 5, 768, 288>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
        %1121 = "stablehlo.reshape"(%1120) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
        %1122 = "stablehlo.dot_general"(%1121, %1116) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
        %1123 = "stablehlo.negate"(%1119) : (tensor<768xf32>) -> tensor<768xf32>
        %1124 = "stablehlo.exponential"(%1123) : (tensor<768xf32>) -> tensor<768xf32>
        %1125 = "stablehlo.add"(%1, %1124) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1126 = "stablehlo.divide"(%1, %1125) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1127 = "stablehlo.multiply"(%1125, %1125) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1128 = "stablehlo.divide"(%1, %1127) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1129 = "stablehlo.multiply"(%1119, %1126) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1130 = "stablehlo.multiply"(%1129, %1122) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1131 = "stablehlo.slice"(%arg5) <{limit_indices = array<i64: 5, 288, 768>, start_indices = array<i64: 4, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
        %1132 = "stablehlo.reshape"(%1131) : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
        %1133 = "stablehlo.dot_general"(%1132, %1130) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
        %1134 = "stablehlo.add"(%1103, %1133) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1135 = "stablehlo.slice"(%arg1) <{limit_indices = array<i64: 6, 288>, start_indices = array<i64: 5, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
        %1136 = "stablehlo.reshape"(%1135) : (tensor<1x288xf32>) -> tensor<288xf32>
        %1137 = "stablehlo.dot_general"(%1134, %1134) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
        %1138 = "stablehlo.divide"(%1137, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1139 = "stablehlo.add"(%1138, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1140 = "stablehlo.sqrt"(%1139) : (tensor<f32>) -> tensor<f32>
        %1141 = "stablehlo.divide"(%7, %1140) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1142 = "stablehlo.divide"(%8, %1140) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1143 = "stablehlo.multiply"(%1140, %1140) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1144 = "stablehlo.divide"(%8, %1143) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1145 = "stablehlo.multiply"(%1136, %1134) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1146 = "stablehlo.broadcast_in_dim"(%1142) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
        %1147 = "stablehlo.multiply"(%1145, %1146) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1148 = "stablehlo.slice"(%arg9) <{limit_indices = array<i64: 6, 288, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %1149 = "stablehlo.reshape"(%1148) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %1150 = "stablehlo.dot_general"(%1149, %1147) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1151 = "stablehlo.slice"(%arg7) <{limit_indices = array<i64: 6, 288, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %1152 = "stablehlo.reshape"(%1151) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %1153 = "stablehlo.dot_general"(%1152, %1147) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1154 = "stablehlo.slice"(%arg10) <{limit_indices = array<i64: 6, 288, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %1155 = "stablehlo.reshape"(%1154) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %1156 = "stablehlo.dot_general"(%1155, %1147) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1157 = "stablehlo.reshape"(%1150) : (tensor<288xf32>) -> tensor<144x2xf32>
        %1158 = "stablehlo.reshape"(%1153) : (tensor<288xf32>) -> tensor<144x2xf32>
        %1159 = "stablehlo.dot_general"(%9, %1158) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
        %1160 = "stablehlo.dot_general"(%9, %1157) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [2], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2x2xf32>, tensor<144x2xf32>) -> tensor<144x2xf32>
        %1161 = "stablehlo.reshape"(%1160) : (tensor<144x2xf32>) -> tensor<288xf32>
        %1162 = "stablehlo.slice"(%arg11) <{limit_indices = array<i64: 6, 1, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
        %1163 = "stablehlo.reshape"(%1162) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
        %1164 = "stablehlo.reshape"(%1159) : (tensor<144x2xf32>) -> tensor<1x288xf32>
        %1165 = "stablehlo.slice"(%arg12) <{limit_indices = array<i64: 6, 1, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x1x288xf32>) -> tensor<1x1x288xf32>
        %1166 = "stablehlo.reshape"(%1165) : (tensor<1x1x288xf32>) -> tensor<1x288xf32>
        %1167 = "stablehlo.reshape"(%1156) : (tensor<288xf32>) -> tensor<1x288xf32>
        %1168 = "stablehlo.slice"(%1161) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1169 = "stablehlo.slice"(%1163) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1170 = "stablehlo.slice"(%1164) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1171 = "stablehlo.concatenate"(%1169, %1170) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1172 = "stablehlo.dot_general"(%1171, %1168) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %1173 = "stablehlo.divide"(%1172, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1174 = "stablehlo.reduce"(%1173, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1175 = "stablehlo.broadcast_in_dim"(%1174) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1176 = "stablehlo.compare"(%1173, %1175) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %1177 = "stablehlo.convert"(%1176) : (tensor<2xi1>) -> tensor<2xf32>
        %1178 = "stablehlo.reduce"(%1177, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1179 = "stablehlo.subtract"(%1173, %1175) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1180 = "stablehlo.exponential"(%1179) : (tensor<2xf32>) -> tensor<2xf32>
        %1181 = "stablehlo.slice"(%1180) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1182 = "stablehlo.reshape"(%1181) : (tensor<1xf32>) -> tensor<f32>
        %1183 = "stablehlo.slice"(%1180) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1184 = "stablehlo.reshape"(%1183) : (tensor<1xf32>) -> tensor<f32>
        %1185 = "stablehlo.add"(%1182, %1184) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1186 = "stablehlo.broadcast_in_dim"(%1185) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1187 = "stablehlo.divide"(%1180, %1186) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1188 = "stablehlo.multiply"(%1185, %1185) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1189 = "stablehlo.divide"(%8, %1188) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1190 = "stablehlo.slice"(%1166) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1191 = "stablehlo.slice"(%1167) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1192 = "stablehlo.concatenate"(%1190, %1191) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1193 = "stablehlo.dot_general"(%1192, %1187) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %1194 = "stablehlo.slice"(%1161) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1195 = "stablehlo.slice"(%1163) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1196 = "stablehlo.slice"(%1164) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1197 = "stablehlo.concatenate"(%1195, %1196) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1198 = "stablehlo.dot_general"(%1197, %1194) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %1199 = "stablehlo.divide"(%1198, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1200 = "stablehlo.reduce"(%1199, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1201 = "stablehlo.broadcast_in_dim"(%1200) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1202 = "stablehlo.compare"(%1199, %1201) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %1203 = "stablehlo.convert"(%1202) : (tensor<2xi1>) -> tensor<2xf32>
        %1204 = "stablehlo.reduce"(%1203, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1205 = "stablehlo.subtract"(%1199, %1201) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1206 = "stablehlo.exponential"(%1205) : (tensor<2xf32>) -> tensor<2xf32>
        %1207 = "stablehlo.slice"(%1206) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1208 = "stablehlo.reshape"(%1207) : (tensor<1xf32>) -> tensor<f32>
        %1209 = "stablehlo.slice"(%1206) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1210 = "stablehlo.reshape"(%1209) : (tensor<1xf32>) -> tensor<f32>
        %1211 = "stablehlo.add"(%1208, %1210) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1212 = "stablehlo.broadcast_in_dim"(%1211) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1213 = "stablehlo.divide"(%1206, %1212) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1214 = "stablehlo.multiply"(%1211, %1211) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1215 = "stablehlo.divide"(%8, %1214) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1216 = "stablehlo.slice"(%1166) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1217 = "stablehlo.slice"(%1167) <{limit_indices = array<i64: 1, 96>, start_indices = array<i64: 0, 48>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1218 = "stablehlo.concatenate"(%1216, %1217) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1219 = "stablehlo.dot_general"(%1218, %1213) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %1220 = "stablehlo.slice"(%1161) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1221 = "stablehlo.slice"(%1163) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1222 = "stablehlo.slice"(%1164) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1223 = "stablehlo.concatenate"(%1221, %1222) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1224 = "stablehlo.dot_general"(%1223, %1220) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %1225 = "stablehlo.divide"(%1224, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1226 = "stablehlo.reduce"(%1225, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1227 = "stablehlo.broadcast_in_dim"(%1226) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1228 = "stablehlo.compare"(%1225, %1227) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %1229 = "stablehlo.convert"(%1228) : (tensor<2xi1>) -> tensor<2xf32>
        %1230 = "stablehlo.reduce"(%1229, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1231 = "stablehlo.subtract"(%1225, %1227) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1232 = "stablehlo.exponential"(%1231) : (tensor<2xf32>) -> tensor<2xf32>
        %1233 = "stablehlo.slice"(%1232) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1234 = "stablehlo.reshape"(%1233) : (tensor<1xf32>) -> tensor<f32>
        %1235 = "stablehlo.slice"(%1232) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1236 = "stablehlo.reshape"(%1235) : (tensor<1xf32>) -> tensor<f32>
        %1237 = "stablehlo.add"(%1234, %1236) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1238 = "stablehlo.broadcast_in_dim"(%1237) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1239 = "stablehlo.divide"(%1232, %1238) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1240 = "stablehlo.multiply"(%1237, %1237) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1241 = "stablehlo.divide"(%8, %1240) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1242 = "stablehlo.slice"(%1166) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1243 = "stablehlo.slice"(%1167) <{limit_indices = array<i64: 1, 144>, start_indices = array<i64: 0, 96>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1244 = "stablehlo.concatenate"(%1242, %1243) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1245 = "stablehlo.dot_general"(%1244, %1239) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %1246 = "stablehlo.slice"(%1161) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1247 = "stablehlo.slice"(%1163) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1248 = "stablehlo.slice"(%1164) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1249 = "stablehlo.concatenate"(%1247, %1248) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1250 = "stablehlo.dot_general"(%1249, %1246) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %1251 = "stablehlo.divide"(%1250, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1252 = "stablehlo.reduce"(%1251, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1253 = "stablehlo.broadcast_in_dim"(%1252) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1254 = "stablehlo.compare"(%1251, %1253) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %1255 = "stablehlo.convert"(%1254) : (tensor<2xi1>) -> tensor<2xf32>
        %1256 = "stablehlo.reduce"(%1255, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1257 = "stablehlo.subtract"(%1251, %1253) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1258 = "stablehlo.exponential"(%1257) : (tensor<2xf32>) -> tensor<2xf32>
        %1259 = "stablehlo.slice"(%1258) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1260 = "stablehlo.reshape"(%1259) : (tensor<1xf32>) -> tensor<f32>
        %1261 = "stablehlo.slice"(%1258) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1262 = "stablehlo.reshape"(%1261) : (tensor<1xf32>) -> tensor<f32>
        %1263 = "stablehlo.add"(%1260, %1262) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1264 = "stablehlo.broadcast_in_dim"(%1263) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1265 = "stablehlo.divide"(%1258, %1264) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1266 = "stablehlo.multiply"(%1263, %1263) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1267 = "stablehlo.divide"(%8, %1266) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1268 = "stablehlo.slice"(%1166) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1269 = "stablehlo.slice"(%1167) <{limit_indices = array<i64: 1, 192>, start_indices = array<i64: 0, 144>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1270 = "stablehlo.concatenate"(%1268, %1269) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1271 = "stablehlo.dot_general"(%1270, %1265) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %1272 = "stablehlo.slice"(%1161) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1273 = "stablehlo.slice"(%1163) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1274 = "stablehlo.slice"(%1164) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1275 = "stablehlo.concatenate"(%1273, %1274) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1276 = "stablehlo.dot_general"(%1275, %1272) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %1277 = "stablehlo.divide"(%1276, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1278 = "stablehlo.reduce"(%1277, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1279 = "stablehlo.broadcast_in_dim"(%1278) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1280 = "stablehlo.compare"(%1277, %1279) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %1281 = "stablehlo.convert"(%1280) : (tensor<2xi1>) -> tensor<2xf32>
        %1282 = "stablehlo.reduce"(%1281, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1283 = "stablehlo.subtract"(%1277, %1279) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1284 = "stablehlo.exponential"(%1283) : (tensor<2xf32>) -> tensor<2xf32>
        %1285 = "stablehlo.slice"(%1284) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1286 = "stablehlo.reshape"(%1285) : (tensor<1xf32>) -> tensor<f32>
        %1287 = "stablehlo.slice"(%1284) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1288 = "stablehlo.reshape"(%1287) : (tensor<1xf32>) -> tensor<f32>
        %1289 = "stablehlo.add"(%1286, %1288) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1290 = "stablehlo.broadcast_in_dim"(%1289) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1291 = "stablehlo.divide"(%1284, %1290) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1292 = "stablehlo.multiply"(%1289, %1289) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1293 = "stablehlo.divide"(%8, %1292) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1294 = "stablehlo.slice"(%1166) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1295 = "stablehlo.slice"(%1167) <{limit_indices = array<i64: 1, 240>, start_indices = array<i64: 0, 192>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1296 = "stablehlo.concatenate"(%1294, %1295) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1297 = "stablehlo.dot_general"(%1296, %1291) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %1298 = "stablehlo.slice"(%1161) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1299 = "stablehlo.slice"(%1163) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1300 = "stablehlo.slice"(%1164) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1301 = "stablehlo.concatenate"(%1299, %1300) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1302 = "stablehlo.dot_general"(%1301, %1298) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<48xf32>) -> tensor<2xf32>
        %1303 = "stablehlo.divide"(%1302, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1304 = "stablehlo.reduce"(%1303, %4) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.maximum"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1305 = "stablehlo.broadcast_in_dim"(%1304) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1306 = "stablehlo.compare"(%1303, %1305) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xi1>
        %1307 = "stablehlo.convert"(%1306) : (tensor<2xi1>) -> tensor<2xf32>
        %1308 = "stablehlo.reduce"(%1307, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1309 = "stablehlo.subtract"(%1303, %1305) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1310 = "stablehlo.exponential"(%1309) : (tensor<2xf32>) -> tensor<2xf32>
        %1311 = "stablehlo.slice"(%1310) <{limit_indices = array<i64: 1>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1312 = "stablehlo.reshape"(%1311) : (tensor<1xf32>) -> tensor<f32>
        %1313 = "stablehlo.slice"(%1310) <{limit_indices = array<i64: 2>, start_indices = array<i64: 1>, strides = array<i64: 1>}> : (tensor<2xf32>) -> tensor<1xf32>
        %1314 = "stablehlo.reshape"(%1313) : (tensor<1xf32>) -> tensor<f32>
        %1315 = "stablehlo.add"(%1312, %1314) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1316 = "stablehlo.broadcast_in_dim"(%1315) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1317 = "stablehlo.divide"(%1310, %1316) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1318 = "stablehlo.multiply"(%1315, %1315) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1319 = "stablehlo.divide"(%8, %1318) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1320 = "stablehlo.slice"(%1166) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1321 = "stablehlo.slice"(%1167) <{limit_indices = array<i64: 1, 288>, start_indices = array<i64: 0, 240>, strides = array<i64: 1, 1>}> : (tensor<1x288xf32>) -> tensor<1x48xf32>
        %1322 = "stablehlo.concatenate"(%1320, %1321) <{dimension = 0 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<2x48xf32>
        %1323 = "stablehlo.dot_general"(%1322, %1317) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2x48xf32>, tensor<2xf32>) -> tensor<48xf32>
        %1324 = "stablehlo.concatenate"(%1193, %1219, %1245, %1271, %1297, %1323) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
        %1325 = "stablehlo.slice"(%arg8) <{limit_indices = array<i64: 6, 288, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x288xf32>) -> tensor<1x288x288xf32>
        %1326 = "stablehlo.reshape"(%1325) : (tensor<1x288x288xf32>) -> tensor<288x288xf32>
        %1327 = "stablehlo.dot_general"(%1326, %1324) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1328 = "stablehlo.add"(%1134, %1327) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1329 = "stablehlo.slice"(%arg2) <{limit_indices = array<i64: 6, 288>, start_indices = array<i64: 5, 0>, strides = array<i64: 1, 1>}> : (tensor<6x288xf32>) -> tensor<1x288xf32>
        %1330 = "stablehlo.reshape"(%1329) : (tensor<1x288xf32>) -> tensor<288xf32>
        %1331 = "stablehlo.dot_general"(%1328, %1328) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
        %1332 = "stablehlo.divide"(%1331, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1333 = "stablehlo.add"(%1332, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1334 = "stablehlo.sqrt"(%1333) : (tensor<f32>) -> tensor<f32>
        %1335 = "stablehlo.divide"(%7, %1334) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1336 = "stablehlo.divide"(%8, %1334) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1337 = "stablehlo.multiply"(%1334, %1334) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1338 = "stablehlo.divide"(%8, %1337) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1339 = "stablehlo.multiply"(%1330, %1328) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1340 = "stablehlo.broadcast_in_dim"(%1336) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
        %1341 = "stablehlo.multiply"(%1339, %1340) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1342 = "stablehlo.slice"(%arg4) <{limit_indices = array<i64: 6, 768, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
        %1343 = "stablehlo.reshape"(%1342) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
        %1344 = "stablehlo.dot_general"(%1343, %1341) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
        %1345 = "stablehlo.slice"(%arg6) <{limit_indices = array<i64: 6, 768, 288>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x768x288xf32>) -> tensor<1x768x288xf32>
        %1346 = "stablehlo.reshape"(%1345) : (tensor<1x768x288xf32>) -> tensor<768x288xf32>
        %1347 = "stablehlo.dot_general"(%1346, %1341) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768x288xf32>, tensor<288xf32>) -> tensor<768xf32>
        %1348 = "stablehlo.negate"(%1344) : (tensor<768xf32>) -> tensor<768xf32>
        %1349 = "stablehlo.exponential"(%1348) : (tensor<768xf32>) -> tensor<768xf32>
        %1350 = "stablehlo.add"(%1, %1349) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1351 = "stablehlo.divide"(%1, %1350) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1352 = "stablehlo.multiply"(%1350, %1350) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1353 = "stablehlo.divide"(%1, %1352) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1354 = "stablehlo.multiply"(%1344, %1351) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1355 = "stablehlo.multiply"(%1354, %1347) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1356 = "stablehlo.slice"(%arg5) <{limit_indices = array<i64: 6, 288, 768>, start_indices = array<i64: 5, 0, 0>, strides = array<i64: 1, 1, 1>}> : (tensor<6x288x768xf32>) -> tensor<1x288x768xf32>
        %1357 = "stablehlo.reshape"(%1356) : (tensor<1x288x768xf32>) -> tensor<288x768xf32>
        %1358 = "stablehlo.dot_general"(%1357, %1355) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288x768xf32>, tensor<768xf32>) -> tensor<288xf32>
        %1359 = "stablehlo.add"(%1328, %1358) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1360 = "stablehlo.dot_general"(%1359, %1359) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<f32>
        %1361 = "stablehlo.divide"(%1360, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1362 = "stablehlo.add"(%1361, %5) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1363 = "stablehlo.sqrt"(%1362) : (tensor<f32>) -> tensor<f32>
        %1364 = "stablehlo.divide"(%7, %1363) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1365 = "stablehlo.divide"(%8, %1363) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1366 = "stablehlo.multiply"(%1363, %1363) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1367 = "stablehlo.divide"(%8, %1366) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1368 = "stablehlo.multiply"(%arg3, %1359) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1369 = "stablehlo.multiply"(%1368, %arg13) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1370 = "stablehlo.reduce"(%1369, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
        %1371 = "stablehlo.multiply"(%1370, %1367) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1372 = "stablehlo.negate"(%1371) : (tensor<f32>) -> tensor<f32>
        %1373 = "stablehlo.multiply"(%1372, %1364) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1374 = "stablehlo.divide"(%1373, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1375 = "stablehlo.dot_general"(%1374, %1359) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
        %1376 = "stablehlo.add"(%1375, %1375) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1377 = "stablehlo.broadcast_in_dim"(%1365) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<288xf32>
        %1378 = "stablehlo.multiply"(%arg13, %1377) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1379 = "stablehlo.multiply"(%arg3, %1378) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1380 = "stablehlo.add"(%1376, %1379) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1381 = "stablehlo.dot_general"(%1380, %1357) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
        %1382 = "stablehlo.multiply"(%1354, %1381) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1383 = "stablehlo.dot_general"(%1382, %1346) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
        %1384 = "stablehlo.dot_general"(%1382, %1341) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
        %1385 = "stablehlo.reshape"(%1384) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
        %1386 = "stablehlo.multiply"(%1381, %1347) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1387 = "stablehlo.multiply"(%1344, %1386) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1388 = "stablehlo.multiply"(%1387, %1353) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1389 = "stablehlo.negate"(%1388) : (tensor<768xf32>) -> tensor<768xf32>
        %1390 = "stablehlo.multiply"(%1389, %1349) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1391 = "stablehlo.negate"(%1390) : (tensor<768xf32>) -> tensor<768xf32>
        %1392 = "stablehlo.multiply"(%1386, %1351) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1393 = "stablehlo.add"(%1391, %1392) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1394 = "stablehlo.dot_general"(%1393, %1343) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
        %1395 = "stablehlo.add"(%1383, %1394) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1396 = "stablehlo.multiply"(%1339, %1395) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1397 = "stablehlo.reduce"(%1396, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
        %1398 = "stablehlo.multiply"(%1397, %1338) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1399 = "stablehlo.negate"(%1398) : (tensor<f32>) -> tensor<f32>
        %1400 = "stablehlo.multiply"(%1399, %1335) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1401 = "stablehlo.divide"(%1400, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1402 = "stablehlo.dot_general"(%1401, %1328) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
        %1403 = "stablehlo.add"(%1380, %1402) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1404 = "stablehlo.add"(%1403, %1402) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1405 = "stablehlo.multiply"(%1395, %1340) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1406 = "stablehlo.multiply"(%1330, %1405) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1407 = "stablehlo.add"(%1404, %1406) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1408 = "stablehlo.dot_general"(%1407, %1326) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %1409 = "stablehlo.slice"(%1408) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1410 = "stablehlo.slice"(%1408) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1411 = "stablehlo.slice"(%1408) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1412 = "stablehlo.slice"(%1408) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1413 = "stablehlo.slice"(%1408) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1414 = "stablehlo.slice"(%1408) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1415 = "stablehlo.dot_general"(%1414, %1322) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1416 = "stablehlo.broadcast_in_dim"(%1319) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1417 = "stablehlo.multiply"(%1415, %1416) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1418 = "stablehlo.multiply"(%1417, %1310) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1419 = "stablehlo.reduce"(%1418, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1420 = "stablehlo.negate"(%1419) : (tensor<f32>) -> tensor<f32>
        %1421 = "stablehlo.broadcast_in_dim"(%1420) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1422 = "stablehlo.divide"(%1415, %1316) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1423 = "stablehlo.add"(%1421, %1422) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1424 = "stablehlo.multiply"(%1423, %1310) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1425 = "stablehlo.negate"(%1424) : (tensor<2xf32>) -> tensor<2xf32>
        %1426 = "stablehlo.reduce"(%1425, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1427 = "stablehlo.divide"(%1426, %1308) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1428 = "stablehlo.broadcast_in_dim"(%1427) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1429 = "stablehlo.multiply"(%1428, %1307) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1430 = "stablehlo.add"(%1424, %1429) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1431 = "stablehlo.divide"(%1430, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1432 = "stablehlo.dot_general"(%1431, %1301) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1433 = "stablehlo.dot_general"(%1431, %1298) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1434 = "stablehlo.dot_general"(%1317, %1414) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1435 = "stablehlo.dot_general"(%1413, %1296) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1436 = "stablehlo.broadcast_in_dim"(%1293) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1437 = "stablehlo.multiply"(%1435, %1436) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1438 = "stablehlo.multiply"(%1437, %1284) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1439 = "stablehlo.reduce"(%1438, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1440 = "stablehlo.negate"(%1439) : (tensor<f32>) -> tensor<f32>
        %1441 = "stablehlo.broadcast_in_dim"(%1440) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1442 = "stablehlo.divide"(%1435, %1290) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1443 = "stablehlo.add"(%1441, %1442) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1444 = "stablehlo.multiply"(%1443, %1284) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1445 = "stablehlo.negate"(%1444) : (tensor<2xf32>) -> tensor<2xf32>
        %1446 = "stablehlo.reduce"(%1445, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1447 = "stablehlo.divide"(%1446, %1282) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1448 = "stablehlo.broadcast_in_dim"(%1447) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1449 = "stablehlo.multiply"(%1448, %1281) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1450 = "stablehlo.add"(%1444, %1449) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1451 = "stablehlo.divide"(%1450, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1452 = "stablehlo.dot_general"(%1451, %1275) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1453 = "stablehlo.dot_general"(%1451, %1272) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1454 = "stablehlo.dot_general"(%1291, %1413) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1455 = "stablehlo.dot_general"(%1412, %1270) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1456 = "stablehlo.broadcast_in_dim"(%1267) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1457 = "stablehlo.multiply"(%1455, %1456) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1458 = "stablehlo.multiply"(%1457, %1258) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1459 = "stablehlo.reduce"(%1458, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1460 = "stablehlo.negate"(%1459) : (tensor<f32>) -> tensor<f32>
        %1461 = "stablehlo.broadcast_in_dim"(%1460) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1462 = "stablehlo.divide"(%1455, %1264) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1463 = "stablehlo.add"(%1461, %1462) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1464 = "stablehlo.multiply"(%1463, %1258) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1465 = "stablehlo.negate"(%1464) : (tensor<2xf32>) -> tensor<2xf32>
        %1466 = "stablehlo.reduce"(%1465, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1467 = "stablehlo.divide"(%1466, %1256) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1468 = "stablehlo.broadcast_in_dim"(%1467) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1469 = "stablehlo.multiply"(%1468, %1255) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1470 = "stablehlo.add"(%1464, %1469) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1471 = "stablehlo.divide"(%1470, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1472 = "stablehlo.dot_general"(%1471, %1249) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1473 = "stablehlo.dot_general"(%1471, %1246) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1474 = "stablehlo.dot_general"(%1265, %1412) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1475 = "stablehlo.dot_general"(%1411, %1244) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1476 = "stablehlo.broadcast_in_dim"(%1241) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1477 = "stablehlo.multiply"(%1475, %1476) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1478 = "stablehlo.multiply"(%1477, %1232) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1479 = "stablehlo.reduce"(%1478, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1480 = "stablehlo.negate"(%1479) : (tensor<f32>) -> tensor<f32>
        %1481 = "stablehlo.broadcast_in_dim"(%1480) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1482 = "stablehlo.divide"(%1475, %1238) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1483 = "stablehlo.add"(%1481, %1482) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1484 = "stablehlo.multiply"(%1483, %1232) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1485 = "stablehlo.negate"(%1484) : (tensor<2xf32>) -> tensor<2xf32>
        %1486 = "stablehlo.reduce"(%1485, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1487 = "stablehlo.divide"(%1486, %1230) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1488 = "stablehlo.broadcast_in_dim"(%1487) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1489 = "stablehlo.multiply"(%1488, %1229) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1490 = "stablehlo.add"(%1484, %1489) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1491 = "stablehlo.divide"(%1490, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1492 = "stablehlo.dot_general"(%1491, %1223) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1493 = "stablehlo.dot_general"(%1491, %1220) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1494 = "stablehlo.dot_general"(%1239, %1411) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1495 = "stablehlo.dot_general"(%1410, %1218) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1496 = "stablehlo.broadcast_in_dim"(%1215) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1497 = "stablehlo.multiply"(%1495, %1496) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1498 = "stablehlo.multiply"(%1497, %1206) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1499 = "stablehlo.reduce"(%1498, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1500 = "stablehlo.negate"(%1499) : (tensor<f32>) -> tensor<f32>
        %1501 = "stablehlo.broadcast_in_dim"(%1500) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1502 = "stablehlo.divide"(%1495, %1212) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1503 = "stablehlo.add"(%1501, %1502) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1504 = "stablehlo.multiply"(%1503, %1206) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1505 = "stablehlo.negate"(%1504) : (tensor<2xf32>) -> tensor<2xf32>
        %1506 = "stablehlo.reduce"(%1505, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1507 = "stablehlo.divide"(%1506, %1204) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1508 = "stablehlo.broadcast_in_dim"(%1507) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1509 = "stablehlo.multiply"(%1508, %1203) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1510 = "stablehlo.add"(%1504, %1509) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1511 = "stablehlo.divide"(%1510, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1512 = "stablehlo.dot_general"(%1511, %1197) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1513 = "stablehlo.dot_general"(%1511, %1194) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1514 = "stablehlo.dot_general"(%1213, %1410) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1515 = "stablehlo.dot_general"(%1409, %1192) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1516 = "stablehlo.broadcast_in_dim"(%1189) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1517 = "stablehlo.multiply"(%1515, %1516) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1518 = "stablehlo.multiply"(%1517, %1180) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1519 = "stablehlo.reduce"(%1518, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1520 = "stablehlo.negate"(%1519) : (tensor<f32>) -> tensor<f32>
        %1521 = "stablehlo.broadcast_in_dim"(%1520) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1522 = "stablehlo.divide"(%1515, %1186) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1523 = "stablehlo.add"(%1521, %1522) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1524 = "stablehlo.multiply"(%1523, %1180) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1525 = "stablehlo.negate"(%1524) : (tensor<2xf32>) -> tensor<2xf32>
        %1526 = "stablehlo.reduce"(%1525, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1527 = "stablehlo.divide"(%1526, %1178) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1528 = "stablehlo.broadcast_in_dim"(%1527) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1529 = "stablehlo.multiply"(%1528, %1177) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1530 = "stablehlo.add"(%1524, %1529) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1531 = "stablehlo.divide"(%1530, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1532 = "stablehlo.dot_general"(%1531, %1171) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1533 = "stablehlo.concatenate"(%1532, %1512, %1492, %1472, %1452, %1432) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
        %1534 = "stablehlo.reshape"(%1533) : (tensor<288xf32>) -> tensor<144x2xf32>
        %1535 = "stablehlo.dot_general"(%1534, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
        %1536 = "stablehlo.reshape"(%1535) : (tensor<144x2xf32>) -> tensor<288xf32>
        %1537 = "stablehlo.dot_general"(%1536, %1149) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %1538 = "stablehlo.dot_general"(%1536, %1147) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %1539 = "stablehlo.reshape"(%1538) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %1540 = "stablehlo.dot_general"(%1531, %1168) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1541 = "stablehlo.slice"(%1540) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1542 = "stablehlo.slice"(%1513) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1543 = "stablehlo.slice"(%1493) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1544 = "stablehlo.slice"(%1473) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1545 = "stablehlo.slice"(%1453) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1546 = "stablehlo.slice"(%1433) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1547 = "stablehlo.concatenate"(%1541, %1542, %1543, %1544, %1545, %1546) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %1548 = "stablehlo.slice"(%1540) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1549 = "stablehlo.slice"(%1513) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1550 = "stablehlo.slice"(%1493) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1551 = "stablehlo.slice"(%1473) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1552 = "stablehlo.slice"(%1453) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1553 = "stablehlo.slice"(%1433) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1554 = "stablehlo.concatenate"(%1548, %1549, %1550, %1551, %1552, %1553) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %1555 = "stablehlo.reshape"(%1554) : (tensor<1x288xf32>) -> tensor<144x2xf32>
        %1556 = "stablehlo.dot_general"(%1555, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
        %1557 = "stablehlo.reshape"(%1556) : (tensor<144x2xf32>) -> tensor<288xf32>
        %1558 = "stablehlo.dot_general"(%1557, %1152) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %1559 = "stablehlo.add"(%1537, %1558) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1560 = "stablehlo.dot_general"(%1557, %1147) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %1561 = "stablehlo.reshape"(%1560) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %1562 = "stablehlo.reshape"(%1547) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
        %1563 = "stablehlo.dot_general"(%1187, %1409) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1564 = "stablehlo.slice"(%1563) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1565 = "stablehlo.slice"(%1514) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1566 = "stablehlo.slice"(%1494) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1567 = "stablehlo.slice"(%1474) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1568 = "stablehlo.slice"(%1454) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1569 = "stablehlo.slice"(%1434) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1570 = "stablehlo.concatenate"(%1564, %1565, %1566, %1567, %1568, %1569) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %1571 = "stablehlo.slice"(%1563) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1572 = "stablehlo.slice"(%1514) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1573 = "stablehlo.slice"(%1494) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1574 = "stablehlo.slice"(%1474) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1575 = "stablehlo.slice"(%1454) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1576 = "stablehlo.slice"(%1434) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1577 = "stablehlo.concatenate"(%1571, %1572, %1573, %1574, %1575, %1576) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %1578 = "stablehlo.reshape"(%1577) : (tensor<1x288xf32>) -> tensor<288xf32>
        %1579 = "stablehlo.dot_general"(%1578, %1155) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %1580 = "stablehlo.add"(%1559, %1579) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1581 = "stablehlo.multiply"(%1145, %1580) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1582 = "stablehlo.reduce"(%1581, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
        %1583 = "stablehlo.multiply"(%1582, %1144) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1584 = "stablehlo.negate"(%1583) : (tensor<f32>) -> tensor<f32>
        %1585 = "stablehlo.multiply"(%1584, %1141) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1586 = "stablehlo.divide"(%1585, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1587 = "stablehlo.dot_general"(%1586, %1134) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
        %1588 = "stablehlo.add"(%1407, %1587) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1589 = "stablehlo.add"(%1588, %1587) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1590 = "stablehlo.multiply"(%1580, %1146) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1591 = "stablehlo.multiply"(%1136, %1590) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1592 = "stablehlo.add"(%1589, %1591) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1593 = "stablehlo.dot_general"(%1592, %1132) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
        %1594 = "stablehlo.multiply"(%1129, %1593) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1595 = "stablehlo.dot_general"(%1594, %1121) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
        %1596 = "stablehlo.dot_general"(%1594, %1116) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
        %1597 = "stablehlo.reshape"(%1596) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
        %1598 = "stablehlo.multiply"(%1593, %1122) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1599 = "stablehlo.multiply"(%1119, %1598) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1600 = "stablehlo.multiply"(%1599, %1128) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1601 = "stablehlo.negate"(%1600) : (tensor<768xf32>) -> tensor<768xf32>
        %1602 = "stablehlo.multiply"(%1601, %1124) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1603 = "stablehlo.negate"(%1602) : (tensor<768xf32>) -> tensor<768xf32>
        %1604 = "stablehlo.multiply"(%1598, %1126) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1605 = "stablehlo.add"(%1603, %1604) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1606 = "stablehlo.dot_general"(%1605, %1118) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
        %1607 = "stablehlo.add"(%1595, %1606) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1608 = "stablehlo.multiply"(%1114, %1607) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1609 = "stablehlo.reduce"(%1608, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
        %1610 = "stablehlo.multiply"(%1609, %1113) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1611 = "stablehlo.negate"(%1610) : (tensor<f32>) -> tensor<f32>
        %1612 = "stablehlo.multiply"(%1611, %1110) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1613 = "stablehlo.divide"(%1612, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1614 = "stablehlo.dot_general"(%1613, %1103) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
        %1615 = "stablehlo.add"(%1592, %1614) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1616 = "stablehlo.add"(%1615, %1614) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1617 = "stablehlo.multiply"(%1607, %1115) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1618 = "stablehlo.multiply"(%1105, %1617) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1619 = "stablehlo.add"(%1616, %1618) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1620 = "stablehlo.dot_general"(%1619, %1101) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %1621 = "stablehlo.slice"(%1620) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1622 = "stablehlo.slice"(%1620) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1623 = "stablehlo.slice"(%1620) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1624 = "stablehlo.slice"(%1620) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1625 = "stablehlo.slice"(%1620) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1626 = "stablehlo.slice"(%1620) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1627 = "stablehlo.dot_general"(%1626, %1097) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1628 = "stablehlo.broadcast_in_dim"(%1094) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1629 = "stablehlo.multiply"(%1627, %1628) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1630 = "stablehlo.multiply"(%1629, %1085) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1631 = "stablehlo.reduce"(%1630, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1632 = "stablehlo.negate"(%1631) : (tensor<f32>) -> tensor<f32>
        %1633 = "stablehlo.broadcast_in_dim"(%1632) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1634 = "stablehlo.divide"(%1627, %1091) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1635 = "stablehlo.add"(%1633, %1634) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1636 = "stablehlo.multiply"(%1635, %1085) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1637 = "stablehlo.negate"(%1636) : (tensor<2xf32>) -> tensor<2xf32>
        %1638 = "stablehlo.reduce"(%1637, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1639 = "stablehlo.divide"(%1638, %1083) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1640 = "stablehlo.broadcast_in_dim"(%1639) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1641 = "stablehlo.multiply"(%1640, %1082) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1642 = "stablehlo.add"(%1636, %1641) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1643 = "stablehlo.divide"(%1642, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1644 = "stablehlo.dot_general"(%1643, %1076) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1645 = "stablehlo.dot_general"(%1643, %1073) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1646 = "stablehlo.dot_general"(%1092, %1626) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1647 = "stablehlo.dot_general"(%1625, %1071) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1648 = "stablehlo.broadcast_in_dim"(%1068) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1649 = "stablehlo.multiply"(%1647, %1648) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1650 = "stablehlo.multiply"(%1649, %1059) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1651 = "stablehlo.reduce"(%1650, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1652 = "stablehlo.negate"(%1651) : (tensor<f32>) -> tensor<f32>
        %1653 = "stablehlo.broadcast_in_dim"(%1652) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1654 = "stablehlo.divide"(%1647, %1065) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1655 = "stablehlo.add"(%1653, %1654) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1656 = "stablehlo.multiply"(%1655, %1059) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1657 = "stablehlo.negate"(%1656) : (tensor<2xf32>) -> tensor<2xf32>
        %1658 = "stablehlo.reduce"(%1657, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1659 = "stablehlo.divide"(%1658, %1057) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1660 = "stablehlo.broadcast_in_dim"(%1659) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1661 = "stablehlo.multiply"(%1660, %1056) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1662 = "stablehlo.add"(%1656, %1661) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1663 = "stablehlo.divide"(%1662, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1664 = "stablehlo.dot_general"(%1663, %1050) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1665 = "stablehlo.dot_general"(%1663, %1047) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1666 = "stablehlo.dot_general"(%1066, %1625) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1667 = "stablehlo.dot_general"(%1624, %1045) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1668 = "stablehlo.broadcast_in_dim"(%1042) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1669 = "stablehlo.multiply"(%1667, %1668) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1670 = "stablehlo.multiply"(%1669, %1033) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1671 = "stablehlo.reduce"(%1670, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1672 = "stablehlo.negate"(%1671) : (tensor<f32>) -> tensor<f32>
        %1673 = "stablehlo.broadcast_in_dim"(%1672) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1674 = "stablehlo.divide"(%1667, %1039) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1675 = "stablehlo.add"(%1673, %1674) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1676 = "stablehlo.multiply"(%1675, %1033) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1677 = "stablehlo.negate"(%1676) : (tensor<2xf32>) -> tensor<2xf32>
        %1678 = "stablehlo.reduce"(%1677, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1679 = "stablehlo.divide"(%1678, %1031) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1680 = "stablehlo.broadcast_in_dim"(%1679) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1681 = "stablehlo.multiply"(%1680, %1030) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1682 = "stablehlo.add"(%1676, %1681) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1683 = "stablehlo.divide"(%1682, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1684 = "stablehlo.dot_general"(%1683, %1024) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1685 = "stablehlo.dot_general"(%1683, %1021) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1686 = "stablehlo.dot_general"(%1040, %1624) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1687 = "stablehlo.dot_general"(%1623, %1019) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1688 = "stablehlo.broadcast_in_dim"(%1016) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1689 = "stablehlo.multiply"(%1687, %1688) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1690 = "stablehlo.multiply"(%1689, %1007) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1691 = "stablehlo.reduce"(%1690, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1692 = "stablehlo.negate"(%1691) : (tensor<f32>) -> tensor<f32>
        %1693 = "stablehlo.broadcast_in_dim"(%1692) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1694 = "stablehlo.divide"(%1687, %1013) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1695 = "stablehlo.add"(%1693, %1694) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1696 = "stablehlo.multiply"(%1695, %1007) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1697 = "stablehlo.negate"(%1696) : (tensor<2xf32>) -> tensor<2xf32>
        %1698 = "stablehlo.reduce"(%1697, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1699 = "stablehlo.divide"(%1698, %1005) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1700 = "stablehlo.broadcast_in_dim"(%1699) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1701 = "stablehlo.multiply"(%1700, %1004) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1702 = "stablehlo.add"(%1696, %1701) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1703 = "stablehlo.divide"(%1702, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1704 = "stablehlo.dot_general"(%1703, %998) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1705 = "stablehlo.dot_general"(%1703, %995) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1706 = "stablehlo.dot_general"(%1014, %1623) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1707 = "stablehlo.dot_general"(%1622, %993) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1708 = "stablehlo.broadcast_in_dim"(%990) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1709 = "stablehlo.multiply"(%1707, %1708) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1710 = "stablehlo.multiply"(%1709, %981) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1711 = "stablehlo.reduce"(%1710, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1712 = "stablehlo.negate"(%1711) : (tensor<f32>) -> tensor<f32>
        %1713 = "stablehlo.broadcast_in_dim"(%1712) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1714 = "stablehlo.divide"(%1707, %987) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1715 = "stablehlo.add"(%1713, %1714) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1716 = "stablehlo.multiply"(%1715, %981) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1717 = "stablehlo.negate"(%1716) : (tensor<2xf32>) -> tensor<2xf32>
        %1718 = "stablehlo.reduce"(%1717, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1719 = "stablehlo.divide"(%1718, %979) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1720 = "stablehlo.broadcast_in_dim"(%1719) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1721 = "stablehlo.multiply"(%1720, %978) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1722 = "stablehlo.add"(%1716, %1721) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1723 = "stablehlo.divide"(%1722, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1724 = "stablehlo.dot_general"(%1723, %972) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1725 = "stablehlo.dot_general"(%1723, %969) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1726 = "stablehlo.dot_general"(%988, %1622) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1727 = "stablehlo.dot_general"(%1621, %967) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1728 = "stablehlo.broadcast_in_dim"(%964) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1729 = "stablehlo.multiply"(%1727, %1728) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1730 = "stablehlo.multiply"(%1729, %955) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1731 = "stablehlo.reduce"(%1730, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1732 = "stablehlo.negate"(%1731) : (tensor<f32>) -> tensor<f32>
        %1733 = "stablehlo.broadcast_in_dim"(%1732) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1734 = "stablehlo.divide"(%1727, %961) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1735 = "stablehlo.add"(%1733, %1734) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1736 = "stablehlo.multiply"(%1735, %955) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1737 = "stablehlo.negate"(%1736) : (tensor<2xf32>) -> tensor<2xf32>
        %1738 = "stablehlo.reduce"(%1737, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1739 = "stablehlo.divide"(%1738, %953) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1740 = "stablehlo.broadcast_in_dim"(%1739) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1741 = "stablehlo.multiply"(%1740, %952) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1742 = "stablehlo.add"(%1736, %1741) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1743 = "stablehlo.divide"(%1742, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1744 = "stablehlo.dot_general"(%1743, %946) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1745 = "stablehlo.concatenate"(%1744, %1724, %1704, %1684, %1664, %1644) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
        %1746 = "stablehlo.reshape"(%1745) : (tensor<288xf32>) -> tensor<144x2xf32>
        %1747 = "stablehlo.dot_general"(%1746, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
        %1748 = "stablehlo.reshape"(%1747) : (tensor<144x2xf32>) -> tensor<288xf32>
        %1749 = "stablehlo.dot_general"(%1748, %924) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %1750 = "stablehlo.dot_general"(%1748, %922) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %1751 = "stablehlo.reshape"(%1750) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %1752 = "stablehlo.dot_general"(%1743, %943) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1753 = "stablehlo.slice"(%1752) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1754 = "stablehlo.slice"(%1725) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1755 = "stablehlo.slice"(%1705) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1756 = "stablehlo.slice"(%1685) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1757 = "stablehlo.slice"(%1665) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1758 = "stablehlo.slice"(%1645) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1759 = "stablehlo.concatenate"(%1753, %1754, %1755, %1756, %1757, %1758) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %1760 = "stablehlo.slice"(%1752) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1761 = "stablehlo.slice"(%1725) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1762 = "stablehlo.slice"(%1705) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1763 = "stablehlo.slice"(%1685) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1764 = "stablehlo.slice"(%1665) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1765 = "stablehlo.slice"(%1645) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1766 = "stablehlo.concatenate"(%1760, %1761, %1762, %1763, %1764, %1765) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %1767 = "stablehlo.reshape"(%1766) : (tensor<1x288xf32>) -> tensor<144x2xf32>
        %1768 = "stablehlo.dot_general"(%1767, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
        %1769 = "stablehlo.reshape"(%1768) : (tensor<144x2xf32>) -> tensor<288xf32>
        %1770 = "stablehlo.dot_general"(%1769, %927) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %1771 = "stablehlo.add"(%1749, %1770) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1772 = "stablehlo.dot_general"(%1769, %922) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %1773 = "stablehlo.reshape"(%1772) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %1774 = "stablehlo.reshape"(%1759) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
        %1775 = "stablehlo.dot_general"(%962, %1621) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1776 = "stablehlo.slice"(%1775) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1777 = "stablehlo.slice"(%1726) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1778 = "stablehlo.slice"(%1706) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1779 = "stablehlo.slice"(%1686) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1780 = "stablehlo.slice"(%1666) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1781 = "stablehlo.slice"(%1646) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1782 = "stablehlo.concatenate"(%1776, %1777, %1778, %1779, %1780, %1781) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %1783 = "stablehlo.slice"(%1775) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1784 = "stablehlo.slice"(%1726) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1785 = "stablehlo.slice"(%1706) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1786 = "stablehlo.slice"(%1686) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1787 = "stablehlo.slice"(%1666) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1788 = "stablehlo.slice"(%1646) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1789 = "stablehlo.concatenate"(%1783, %1784, %1785, %1786, %1787, %1788) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %1790 = "stablehlo.reshape"(%1789) : (tensor<1x288xf32>) -> tensor<288xf32>
        %1791 = "stablehlo.dot_general"(%1790, %930) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %1792 = "stablehlo.add"(%1771, %1791) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1793 = "stablehlo.multiply"(%920, %1792) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1794 = "stablehlo.reduce"(%1793, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
        %1795 = "stablehlo.multiply"(%1794, %919) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1796 = "stablehlo.negate"(%1795) : (tensor<f32>) -> tensor<f32>
        %1797 = "stablehlo.multiply"(%1796, %916) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1798 = "stablehlo.divide"(%1797, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1799 = "stablehlo.dot_general"(%1798, %909) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
        %1800 = "stablehlo.add"(%1619, %1799) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1801 = "stablehlo.add"(%1800, %1799) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1802 = "stablehlo.multiply"(%1792, %921) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1803 = "stablehlo.multiply"(%911, %1802) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1804 = "stablehlo.add"(%1801, %1803) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1805 = "stablehlo.dot_general"(%1804, %907) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
        %1806 = "stablehlo.multiply"(%904, %1805) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1807 = "stablehlo.dot_general"(%1806, %896) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
        %1808 = "stablehlo.dot_general"(%1806, %891) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
        %1809 = "stablehlo.reshape"(%1808) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
        %1810 = "stablehlo.multiply"(%1805, %897) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1811 = "stablehlo.multiply"(%894, %1810) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1812 = "stablehlo.multiply"(%1811, %903) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1813 = "stablehlo.negate"(%1812) : (tensor<768xf32>) -> tensor<768xf32>
        %1814 = "stablehlo.multiply"(%1813, %899) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1815 = "stablehlo.negate"(%1814) : (tensor<768xf32>) -> tensor<768xf32>
        %1816 = "stablehlo.multiply"(%1810, %901) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1817 = "stablehlo.add"(%1815, %1816) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %1818 = "stablehlo.dot_general"(%1817, %893) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
        %1819 = "stablehlo.add"(%1807, %1818) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1820 = "stablehlo.multiply"(%889, %1819) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1821 = "stablehlo.reduce"(%1820, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
        %1822 = "stablehlo.multiply"(%1821, %888) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1823 = "stablehlo.negate"(%1822) : (tensor<f32>) -> tensor<f32>
        %1824 = "stablehlo.multiply"(%1823, %885) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1825 = "stablehlo.divide"(%1824, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1826 = "stablehlo.dot_general"(%1825, %878) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
        %1827 = "stablehlo.add"(%1804, %1826) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1828 = "stablehlo.add"(%1827, %1826) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1829 = "stablehlo.multiply"(%1819, %890) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1830 = "stablehlo.multiply"(%880, %1829) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1831 = "stablehlo.add"(%1828, %1830) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1832 = "stablehlo.dot_general"(%1831, %876) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %1833 = "stablehlo.slice"(%1832) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1834 = "stablehlo.slice"(%1832) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1835 = "stablehlo.slice"(%1832) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1836 = "stablehlo.slice"(%1832) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1837 = "stablehlo.slice"(%1832) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1838 = "stablehlo.slice"(%1832) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %1839 = "stablehlo.dot_general"(%1838, %872) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1840 = "stablehlo.broadcast_in_dim"(%869) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1841 = "stablehlo.multiply"(%1839, %1840) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1842 = "stablehlo.multiply"(%1841, %860) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1843 = "stablehlo.reduce"(%1842, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1844 = "stablehlo.negate"(%1843) : (tensor<f32>) -> tensor<f32>
        %1845 = "stablehlo.broadcast_in_dim"(%1844) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1846 = "stablehlo.divide"(%1839, %866) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1847 = "stablehlo.add"(%1845, %1846) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1848 = "stablehlo.multiply"(%1847, %860) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1849 = "stablehlo.negate"(%1848) : (tensor<2xf32>) -> tensor<2xf32>
        %1850 = "stablehlo.reduce"(%1849, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1851 = "stablehlo.divide"(%1850, %858) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1852 = "stablehlo.broadcast_in_dim"(%1851) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1853 = "stablehlo.multiply"(%1852, %857) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1854 = "stablehlo.add"(%1848, %1853) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1855 = "stablehlo.divide"(%1854, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1856 = "stablehlo.dot_general"(%1855, %851) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1857 = "stablehlo.dot_general"(%1855, %848) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1858 = "stablehlo.dot_general"(%867, %1838) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1859 = "stablehlo.dot_general"(%1837, %846) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1860 = "stablehlo.broadcast_in_dim"(%843) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1861 = "stablehlo.multiply"(%1859, %1860) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1862 = "stablehlo.multiply"(%1861, %834) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1863 = "stablehlo.reduce"(%1862, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1864 = "stablehlo.negate"(%1863) : (tensor<f32>) -> tensor<f32>
        %1865 = "stablehlo.broadcast_in_dim"(%1864) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1866 = "stablehlo.divide"(%1859, %840) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1867 = "stablehlo.add"(%1865, %1866) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1868 = "stablehlo.multiply"(%1867, %834) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1869 = "stablehlo.negate"(%1868) : (tensor<2xf32>) -> tensor<2xf32>
        %1870 = "stablehlo.reduce"(%1869, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1871 = "stablehlo.divide"(%1870, %832) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1872 = "stablehlo.broadcast_in_dim"(%1871) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1873 = "stablehlo.multiply"(%1872, %831) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1874 = "stablehlo.add"(%1868, %1873) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1875 = "stablehlo.divide"(%1874, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1876 = "stablehlo.dot_general"(%1875, %825) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1877 = "stablehlo.dot_general"(%1875, %822) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1878 = "stablehlo.dot_general"(%841, %1837) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1879 = "stablehlo.dot_general"(%1836, %820) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1880 = "stablehlo.broadcast_in_dim"(%817) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1881 = "stablehlo.multiply"(%1879, %1880) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1882 = "stablehlo.multiply"(%1881, %808) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1883 = "stablehlo.reduce"(%1882, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1884 = "stablehlo.negate"(%1883) : (tensor<f32>) -> tensor<f32>
        %1885 = "stablehlo.broadcast_in_dim"(%1884) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1886 = "stablehlo.divide"(%1879, %814) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1887 = "stablehlo.add"(%1885, %1886) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1888 = "stablehlo.multiply"(%1887, %808) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1889 = "stablehlo.negate"(%1888) : (tensor<2xf32>) -> tensor<2xf32>
        %1890 = "stablehlo.reduce"(%1889, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1891 = "stablehlo.divide"(%1890, %806) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1892 = "stablehlo.broadcast_in_dim"(%1891) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1893 = "stablehlo.multiply"(%1892, %805) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1894 = "stablehlo.add"(%1888, %1893) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1895 = "stablehlo.divide"(%1894, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1896 = "stablehlo.dot_general"(%1895, %799) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1897 = "stablehlo.dot_general"(%1895, %796) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1898 = "stablehlo.dot_general"(%815, %1836) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1899 = "stablehlo.dot_general"(%1835, %794) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1900 = "stablehlo.broadcast_in_dim"(%791) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1901 = "stablehlo.multiply"(%1899, %1900) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1902 = "stablehlo.multiply"(%1901, %782) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1903 = "stablehlo.reduce"(%1902, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1904 = "stablehlo.negate"(%1903) : (tensor<f32>) -> tensor<f32>
        %1905 = "stablehlo.broadcast_in_dim"(%1904) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1906 = "stablehlo.divide"(%1899, %788) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1907 = "stablehlo.add"(%1905, %1906) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1908 = "stablehlo.multiply"(%1907, %782) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1909 = "stablehlo.negate"(%1908) : (tensor<2xf32>) -> tensor<2xf32>
        %1910 = "stablehlo.reduce"(%1909, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1911 = "stablehlo.divide"(%1910, %780) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1912 = "stablehlo.broadcast_in_dim"(%1911) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1913 = "stablehlo.multiply"(%1912, %779) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1914 = "stablehlo.add"(%1908, %1913) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1915 = "stablehlo.divide"(%1914, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1916 = "stablehlo.dot_general"(%1915, %773) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1917 = "stablehlo.dot_general"(%1915, %770) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1918 = "stablehlo.dot_general"(%789, %1835) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1919 = "stablehlo.dot_general"(%1834, %768) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1920 = "stablehlo.broadcast_in_dim"(%765) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1921 = "stablehlo.multiply"(%1919, %1920) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1922 = "stablehlo.multiply"(%1921, %756) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1923 = "stablehlo.reduce"(%1922, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1924 = "stablehlo.negate"(%1923) : (tensor<f32>) -> tensor<f32>
        %1925 = "stablehlo.broadcast_in_dim"(%1924) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1926 = "stablehlo.divide"(%1919, %762) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1927 = "stablehlo.add"(%1925, %1926) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1928 = "stablehlo.multiply"(%1927, %756) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1929 = "stablehlo.negate"(%1928) : (tensor<2xf32>) -> tensor<2xf32>
        %1930 = "stablehlo.reduce"(%1929, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1931 = "stablehlo.divide"(%1930, %754) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1932 = "stablehlo.broadcast_in_dim"(%1931) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1933 = "stablehlo.multiply"(%1932, %753) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1934 = "stablehlo.add"(%1928, %1933) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1935 = "stablehlo.divide"(%1934, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1936 = "stablehlo.dot_general"(%1935, %747) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1937 = "stablehlo.dot_general"(%1935, %744) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1938 = "stablehlo.dot_general"(%763, %1834) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1939 = "stablehlo.dot_general"(%1833, %742) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %1940 = "stablehlo.broadcast_in_dim"(%739) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1941 = "stablehlo.multiply"(%1939, %1940) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1942 = "stablehlo.multiply"(%1941, %730) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1943 = "stablehlo.reduce"(%1942, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1944 = "stablehlo.negate"(%1943) : (tensor<f32>) -> tensor<f32>
        %1945 = "stablehlo.broadcast_in_dim"(%1944) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1946 = "stablehlo.divide"(%1939, %736) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1947 = "stablehlo.add"(%1945, %1946) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1948 = "stablehlo.multiply"(%1947, %730) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1949 = "stablehlo.negate"(%1948) : (tensor<2xf32>) -> tensor<2xf32>
        %1950 = "stablehlo.reduce"(%1949, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %1951 = "stablehlo.divide"(%1950, %728) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %1952 = "stablehlo.broadcast_in_dim"(%1951) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %1953 = "stablehlo.multiply"(%1952, %727) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1954 = "stablehlo.add"(%1948, %1953) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1955 = "stablehlo.divide"(%1954, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %1956 = "stablehlo.dot_general"(%1955, %721) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %1957 = "stablehlo.concatenate"(%1956, %1936, %1916, %1896, %1876, %1856) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
        %1958 = "stablehlo.reshape"(%1957) : (tensor<288xf32>) -> tensor<144x2xf32>
        %1959 = "stablehlo.dot_general"(%1958, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
        %1960 = "stablehlo.reshape"(%1959) : (tensor<144x2xf32>) -> tensor<288xf32>
        %1961 = "stablehlo.dot_general"(%1960, %699) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %1962 = "stablehlo.dot_general"(%1960, %697) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %1963 = "stablehlo.reshape"(%1962) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %1964 = "stablehlo.dot_general"(%1955, %718) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1965 = "stablehlo.slice"(%1964) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1966 = "stablehlo.slice"(%1937) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1967 = "stablehlo.slice"(%1917) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1968 = "stablehlo.slice"(%1897) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1969 = "stablehlo.slice"(%1877) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1970 = "stablehlo.slice"(%1857) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1971 = "stablehlo.concatenate"(%1965, %1966, %1967, %1968, %1969, %1970) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %1972 = "stablehlo.slice"(%1964) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1973 = "stablehlo.slice"(%1937) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1974 = "stablehlo.slice"(%1917) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1975 = "stablehlo.slice"(%1897) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1976 = "stablehlo.slice"(%1877) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1977 = "stablehlo.slice"(%1857) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1978 = "stablehlo.concatenate"(%1972, %1973, %1974, %1975, %1976, %1977) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %1979 = "stablehlo.reshape"(%1978) : (tensor<1x288xf32>) -> tensor<144x2xf32>
        %1980 = "stablehlo.dot_general"(%1979, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
        %1981 = "stablehlo.reshape"(%1980) : (tensor<144x2xf32>) -> tensor<288xf32>
        %1982 = "stablehlo.dot_general"(%1981, %702) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %1983 = "stablehlo.add"(%1961, %1982) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %1984 = "stablehlo.dot_general"(%1981, %697) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %1985 = "stablehlo.reshape"(%1984) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %1986 = "stablehlo.reshape"(%1971) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
        %1987 = "stablehlo.dot_general"(%737, %1833) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %1988 = "stablehlo.slice"(%1987) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1989 = "stablehlo.slice"(%1938) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1990 = "stablehlo.slice"(%1918) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1991 = "stablehlo.slice"(%1898) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1992 = "stablehlo.slice"(%1878) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1993 = "stablehlo.slice"(%1858) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1994 = "stablehlo.concatenate"(%1988, %1989, %1990, %1991, %1992, %1993) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %1995 = "stablehlo.slice"(%1987) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1996 = "stablehlo.slice"(%1938) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1997 = "stablehlo.slice"(%1918) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1998 = "stablehlo.slice"(%1898) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %1999 = "stablehlo.slice"(%1878) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2000 = "stablehlo.slice"(%1858) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2001 = "stablehlo.concatenate"(%1995, %1996, %1997, %1998, %1999, %2000) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %2002 = "stablehlo.reshape"(%2001) : (tensor<1x288xf32>) -> tensor<288xf32>
        %2003 = "stablehlo.dot_general"(%2002, %705) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %2004 = "stablehlo.add"(%1983, %2003) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2005 = "stablehlo.multiply"(%695, %2004) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2006 = "stablehlo.reduce"(%2005, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
        %2007 = "stablehlo.multiply"(%2006, %694) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2008 = "stablehlo.negate"(%2007) : (tensor<f32>) -> tensor<f32>
        %2009 = "stablehlo.multiply"(%2008, %691) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2010 = "stablehlo.divide"(%2009, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2011 = "stablehlo.dot_general"(%2010, %684) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
        %2012 = "stablehlo.add"(%1831, %2011) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2013 = "stablehlo.add"(%2012, %2011) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2014 = "stablehlo.multiply"(%2004, %696) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2015 = "stablehlo.multiply"(%686, %2014) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2016 = "stablehlo.add"(%2013, %2015) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2017 = "stablehlo.dot_general"(%2016, %682) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
        %2018 = "stablehlo.multiply"(%679, %2017) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2019 = "stablehlo.dot_general"(%2018, %671) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
        %2020 = "stablehlo.dot_general"(%2018, %666) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
        %2021 = "stablehlo.reshape"(%2020) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
        %2022 = "stablehlo.multiply"(%2017, %672) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2023 = "stablehlo.multiply"(%669, %2022) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2024 = "stablehlo.multiply"(%2023, %678) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2025 = "stablehlo.negate"(%2024) : (tensor<768xf32>) -> tensor<768xf32>
        %2026 = "stablehlo.multiply"(%2025, %674) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2027 = "stablehlo.negate"(%2026) : (tensor<768xf32>) -> tensor<768xf32>
        %2028 = "stablehlo.multiply"(%2022, %676) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2029 = "stablehlo.add"(%2027, %2028) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2030 = "stablehlo.dot_general"(%2029, %668) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
        %2031 = "stablehlo.add"(%2019, %2030) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2032 = "stablehlo.multiply"(%664, %2031) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2033 = "stablehlo.reduce"(%2032, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
        %2034 = "stablehlo.multiply"(%2033, %663) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2035 = "stablehlo.negate"(%2034) : (tensor<f32>) -> tensor<f32>
        %2036 = "stablehlo.multiply"(%2035, %660) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2037 = "stablehlo.divide"(%2036, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2038 = "stablehlo.dot_general"(%2037, %653) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
        %2039 = "stablehlo.add"(%2016, %2038) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2040 = "stablehlo.add"(%2039, %2038) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2041 = "stablehlo.multiply"(%2031, %665) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2042 = "stablehlo.multiply"(%655, %2041) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2043 = "stablehlo.add"(%2040, %2042) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2044 = "stablehlo.dot_general"(%2043, %651) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %2045 = "stablehlo.slice"(%2044) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2046 = "stablehlo.slice"(%2044) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2047 = "stablehlo.slice"(%2044) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2048 = "stablehlo.slice"(%2044) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2049 = "stablehlo.slice"(%2044) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2050 = "stablehlo.slice"(%2044) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2051 = "stablehlo.dot_general"(%2050, %647) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2052 = "stablehlo.broadcast_in_dim"(%644) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2053 = "stablehlo.multiply"(%2051, %2052) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2054 = "stablehlo.multiply"(%2053, %635) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2055 = "stablehlo.reduce"(%2054, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2056 = "stablehlo.negate"(%2055) : (tensor<f32>) -> tensor<f32>
        %2057 = "stablehlo.broadcast_in_dim"(%2056) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2058 = "stablehlo.divide"(%2051, %641) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2059 = "stablehlo.add"(%2057, %2058) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2060 = "stablehlo.multiply"(%2059, %635) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2061 = "stablehlo.negate"(%2060) : (tensor<2xf32>) -> tensor<2xf32>
        %2062 = "stablehlo.reduce"(%2061, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2063 = "stablehlo.divide"(%2062, %633) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2064 = "stablehlo.broadcast_in_dim"(%2063) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2065 = "stablehlo.multiply"(%2064, %632) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2066 = "stablehlo.add"(%2060, %2065) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2067 = "stablehlo.divide"(%2066, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2068 = "stablehlo.dot_general"(%2067, %626) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2069 = "stablehlo.dot_general"(%2067, %623) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2070 = "stablehlo.dot_general"(%642, %2050) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2071 = "stablehlo.dot_general"(%2049, %621) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2072 = "stablehlo.broadcast_in_dim"(%618) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2073 = "stablehlo.multiply"(%2071, %2072) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2074 = "stablehlo.multiply"(%2073, %609) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2075 = "stablehlo.reduce"(%2074, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2076 = "stablehlo.negate"(%2075) : (tensor<f32>) -> tensor<f32>
        %2077 = "stablehlo.broadcast_in_dim"(%2076) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2078 = "stablehlo.divide"(%2071, %615) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2079 = "stablehlo.add"(%2077, %2078) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2080 = "stablehlo.multiply"(%2079, %609) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2081 = "stablehlo.negate"(%2080) : (tensor<2xf32>) -> tensor<2xf32>
        %2082 = "stablehlo.reduce"(%2081, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2083 = "stablehlo.divide"(%2082, %607) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2084 = "stablehlo.broadcast_in_dim"(%2083) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2085 = "stablehlo.multiply"(%2084, %606) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2086 = "stablehlo.add"(%2080, %2085) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2087 = "stablehlo.divide"(%2086, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2088 = "stablehlo.dot_general"(%2087, %600) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2089 = "stablehlo.dot_general"(%2087, %597) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2090 = "stablehlo.dot_general"(%616, %2049) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2091 = "stablehlo.dot_general"(%2048, %595) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2092 = "stablehlo.broadcast_in_dim"(%592) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2093 = "stablehlo.multiply"(%2091, %2092) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2094 = "stablehlo.multiply"(%2093, %583) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2095 = "stablehlo.reduce"(%2094, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2096 = "stablehlo.negate"(%2095) : (tensor<f32>) -> tensor<f32>
        %2097 = "stablehlo.broadcast_in_dim"(%2096) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2098 = "stablehlo.divide"(%2091, %589) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2099 = "stablehlo.add"(%2097, %2098) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2100 = "stablehlo.multiply"(%2099, %583) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2101 = "stablehlo.negate"(%2100) : (tensor<2xf32>) -> tensor<2xf32>
        %2102 = "stablehlo.reduce"(%2101, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2103 = "stablehlo.divide"(%2102, %581) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2104 = "stablehlo.broadcast_in_dim"(%2103) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2105 = "stablehlo.multiply"(%2104, %580) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2106 = "stablehlo.add"(%2100, %2105) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2107 = "stablehlo.divide"(%2106, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2108 = "stablehlo.dot_general"(%2107, %574) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2109 = "stablehlo.dot_general"(%2107, %571) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2110 = "stablehlo.dot_general"(%590, %2048) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2111 = "stablehlo.dot_general"(%2047, %569) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2112 = "stablehlo.broadcast_in_dim"(%566) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2113 = "stablehlo.multiply"(%2111, %2112) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2114 = "stablehlo.multiply"(%2113, %557) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2115 = "stablehlo.reduce"(%2114, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2116 = "stablehlo.negate"(%2115) : (tensor<f32>) -> tensor<f32>
        %2117 = "stablehlo.broadcast_in_dim"(%2116) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2118 = "stablehlo.divide"(%2111, %563) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2119 = "stablehlo.add"(%2117, %2118) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2120 = "stablehlo.multiply"(%2119, %557) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2121 = "stablehlo.negate"(%2120) : (tensor<2xf32>) -> tensor<2xf32>
        %2122 = "stablehlo.reduce"(%2121, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2123 = "stablehlo.divide"(%2122, %555) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2124 = "stablehlo.broadcast_in_dim"(%2123) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2125 = "stablehlo.multiply"(%2124, %554) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2126 = "stablehlo.add"(%2120, %2125) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2127 = "stablehlo.divide"(%2126, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2128 = "stablehlo.dot_general"(%2127, %548) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2129 = "stablehlo.dot_general"(%2127, %545) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2130 = "stablehlo.dot_general"(%564, %2047) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2131 = "stablehlo.dot_general"(%2046, %543) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2132 = "stablehlo.broadcast_in_dim"(%540) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2133 = "stablehlo.multiply"(%2131, %2132) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2134 = "stablehlo.multiply"(%2133, %531) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2135 = "stablehlo.reduce"(%2134, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2136 = "stablehlo.negate"(%2135) : (tensor<f32>) -> tensor<f32>
        %2137 = "stablehlo.broadcast_in_dim"(%2136) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2138 = "stablehlo.divide"(%2131, %537) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2139 = "stablehlo.add"(%2137, %2138) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2140 = "stablehlo.multiply"(%2139, %531) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2141 = "stablehlo.negate"(%2140) : (tensor<2xf32>) -> tensor<2xf32>
        %2142 = "stablehlo.reduce"(%2141, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2143 = "stablehlo.divide"(%2142, %529) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2144 = "stablehlo.broadcast_in_dim"(%2143) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2145 = "stablehlo.multiply"(%2144, %528) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2146 = "stablehlo.add"(%2140, %2145) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2147 = "stablehlo.divide"(%2146, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2148 = "stablehlo.dot_general"(%2147, %522) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2149 = "stablehlo.dot_general"(%2147, %519) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2150 = "stablehlo.dot_general"(%538, %2046) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2151 = "stablehlo.dot_general"(%2045, %517) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2152 = "stablehlo.broadcast_in_dim"(%514) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2153 = "stablehlo.multiply"(%2151, %2152) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2154 = "stablehlo.multiply"(%2153, %505) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2155 = "stablehlo.reduce"(%2154, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2156 = "stablehlo.negate"(%2155) : (tensor<f32>) -> tensor<f32>
        %2157 = "stablehlo.broadcast_in_dim"(%2156) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2158 = "stablehlo.divide"(%2151, %511) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2159 = "stablehlo.add"(%2157, %2158) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2160 = "stablehlo.multiply"(%2159, %505) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2161 = "stablehlo.negate"(%2160) : (tensor<2xf32>) -> tensor<2xf32>
        %2162 = "stablehlo.reduce"(%2161, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2163 = "stablehlo.divide"(%2162, %503) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2164 = "stablehlo.broadcast_in_dim"(%2163) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2165 = "stablehlo.multiply"(%2164, %502) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2166 = "stablehlo.add"(%2160, %2165) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2167 = "stablehlo.divide"(%2166, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2168 = "stablehlo.dot_general"(%2167, %496) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2169 = "stablehlo.concatenate"(%2168, %2148, %2128, %2108, %2088, %2068) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
        %2170 = "stablehlo.reshape"(%2169) : (tensor<288xf32>) -> tensor<144x2xf32>
        %2171 = "stablehlo.dot_general"(%2170, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
        %2172 = "stablehlo.reshape"(%2171) : (tensor<144x2xf32>) -> tensor<288xf32>
        %2173 = "stablehlo.dot_general"(%2172, %474) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %2174 = "stablehlo.dot_general"(%2172, %472) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2175 = "stablehlo.reshape"(%2174) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2176 = "stablehlo.dot_general"(%2167, %493) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2177 = "stablehlo.slice"(%2176) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2178 = "stablehlo.slice"(%2149) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2179 = "stablehlo.slice"(%2129) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2180 = "stablehlo.slice"(%2109) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2181 = "stablehlo.slice"(%2089) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2182 = "stablehlo.slice"(%2069) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2183 = "stablehlo.concatenate"(%2177, %2178, %2179, %2180, %2181, %2182) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %2184 = "stablehlo.slice"(%2176) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2185 = "stablehlo.slice"(%2149) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2186 = "stablehlo.slice"(%2129) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2187 = "stablehlo.slice"(%2109) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2188 = "stablehlo.slice"(%2089) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2189 = "stablehlo.slice"(%2069) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2190 = "stablehlo.concatenate"(%2184, %2185, %2186, %2187, %2188, %2189) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %2191 = "stablehlo.reshape"(%2190) : (tensor<1x288xf32>) -> tensor<144x2xf32>
        %2192 = "stablehlo.dot_general"(%2191, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
        %2193 = "stablehlo.reshape"(%2192) : (tensor<144x2xf32>) -> tensor<288xf32>
        %2194 = "stablehlo.dot_general"(%2193, %477) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %2195 = "stablehlo.add"(%2173, %2194) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2196 = "stablehlo.dot_general"(%2193, %472) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2197 = "stablehlo.reshape"(%2196) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2198 = "stablehlo.reshape"(%2183) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
        %2199 = "stablehlo.dot_general"(%512, %2045) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2200 = "stablehlo.slice"(%2199) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2201 = "stablehlo.slice"(%2150) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2202 = "stablehlo.slice"(%2130) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2203 = "stablehlo.slice"(%2110) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2204 = "stablehlo.slice"(%2090) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2205 = "stablehlo.slice"(%2070) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2206 = "stablehlo.concatenate"(%2200, %2201, %2202, %2203, %2204, %2205) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %2207 = "stablehlo.slice"(%2199) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2208 = "stablehlo.slice"(%2150) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2209 = "stablehlo.slice"(%2130) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2210 = "stablehlo.slice"(%2110) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2211 = "stablehlo.slice"(%2090) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2212 = "stablehlo.slice"(%2070) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2213 = "stablehlo.concatenate"(%2207, %2208, %2209, %2210, %2211, %2212) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %2214 = "stablehlo.reshape"(%2213) : (tensor<1x288xf32>) -> tensor<288xf32>
        %2215 = "stablehlo.dot_general"(%2214, %480) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %2216 = "stablehlo.add"(%2195, %2215) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2217 = "stablehlo.multiply"(%470, %2216) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2218 = "stablehlo.reduce"(%2217, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
        %2219 = "stablehlo.multiply"(%2218, %469) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2220 = "stablehlo.negate"(%2219) : (tensor<f32>) -> tensor<f32>
        %2221 = "stablehlo.multiply"(%2220, %466) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2222 = "stablehlo.divide"(%2221, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2223 = "stablehlo.dot_general"(%2222, %459) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
        %2224 = "stablehlo.add"(%2043, %2223) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2225 = "stablehlo.add"(%2224, %2223) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2226 = "stablehlo.multiply"(%2216, %471) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2227 = "stablehlo.multiply"(%461, %2226) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2228 = "stablehlo.add"(%2225, %2227) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2229 = "stablehlo.dot_general"(%2228, %457) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
        %2230 = "stablehlo.multiply"(%454, %2229) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2231 = "stablehlo.dot_general"(%2230, %446) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
        %2232 = "stablehlo.dot_general"(%2230, %441) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
        %2233 = "stablehlo.reshape"(%2232) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
        %2234 = "stablehlo.multiply"(%2229, %447) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2235 = "stablehlo.multiply"(%444, %2234) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2236 = "stablehlo.multiply"(%2235, %453) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2237 = "stablehlo.negate"(%2236) : (tensor<768xf32>) -> tensor<768xf32>
        %2238 = "stablehlo.multiply"(%2237, %449) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2239 = "stablehlo.negate"(%2238) : (tensor<768xf32>) -> tensor<768xf32>
        %2240 = "stablehlo.multiply"(%2234, %451) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2241 = "stablehlo.add"(%2239, %2240) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2242 = "stablehlo.dot_general"(%2241, %443) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
        %2243 = "stablehlo.add"(%2231, %2242) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2244 = "stablehlo.multiply"(%439, %2243) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2245 = "stablehlo.reduce"(%2244, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
        %2246 = "stablehlo.multiply"(%2245, %438) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2247 = "stablehlo.negate"(%2246) : (tensor<f32>) -> tensor<f32>
        %2248 = "stablehlo.multiply"(%2247, %435) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2249 = "stablehlo.divide"(%2248, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2250 = "stablehlo.dot_general"(%2249, %428) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
        %2251 = "stablehlo.add"(%2228, %2250) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2252 = "stablehlo.add"(%2251, %2250) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2253 = "stablehlo.multiply"(%2243, %440) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2254 = "stablehlo.multiply"(%430, %2253) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2255 = "stablehlo.add"(%2252, %2254) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2256 = "stablehlo.dot_general"(%2255, %426) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %2257 = "stablehlo.slice"(%2256) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2258 = "stablehlo.slice"(%2256) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2259 = "stablehlo.slice"(%2256) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2260 = "stablehlo.slice"(%2256) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2261 = "stablehlo.slice"(%2256) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2262 = "stablehlo.slice"(%2256) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2263 = "stablehlo.dot_general"(%2262, %422) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2264 = "stablehlo.broadcast_in_dim"(%419) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2265 = "stablehlo.multiply"(%2263, %2264) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2266 = "stablehlo.multiply"(%2265, %410) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2267 = "stablehlo.reduce"(%2266, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2268 = "stablehlo.negate"(%2267) : (tensor<f32>) -> tensor<f32>
        %2269 = "stablehlo.broadcast_in_dim"(%2268) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2270 = "stablehlo.divide"(%2263, %416) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2271 = "stablehlo.add"(%2269, %2270) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2272 = "stablehlo.multiply"(%2271, %410) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2273 = "stablehlo.negate"(%2272) : (tensor<2xf32>) -> tensor<2xf32>
        %2274 = "stablehlo.reduce"(%2273, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2275 = "stablehlo.divide"(%2274, %408) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2276 = "stablehlo.broadcast_in_dim"(%2275) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2277 = "stablehlo.multiply"(%2276, %407) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2278 = "stablehlo.add"(%2272, %2277) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2279 = "stablehlo.divide"(%2278, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2280 = "stablehlo.dot_general"(%2279, %401) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2281 = "stablehlo.dot_general"(%2279, %398) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2282 = "stablehlo.dot_general"(%417, %2262) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2283 = "stablehlo.dot_general"(%2261, %396) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2284 = "stablehlo.broadcast_in_dim"(%393) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2285 = "stablehlo.multiply"(%2283, %2284) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2286 = "stablehlo.multiply"(%2285, %384) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2287 = "stablehlo.reduce"(%2286, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2288 = "stablehlo.negate"(%2287) : (tensor<f32>) -> tensor<f32>
        %2289 = "stablehlo.broadcast_in_dim"(%2288) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2290 = "stablehlo.divide"(%2283, %390) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2291 = "stablehlo.add"(%2289, %2290) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2292 = "stablehlo.multiply"(%2291, %384) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2293 = "stablehlo.negate"(%2292) : (tensor<2xf32>) -> tensor<2xf32>
        %2294 = "stablehlo.reduce"(%2293, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2295 = "stablehlo.divide"(%2294, %382) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2296 = "stablehlo.broadcast_in_dim"(%2295) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2297 = "stablehlo.multiply"(%2296, %381) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2298 = "stablehlo.add"(%2292, %2297) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2299 = "stablehlo.divide"(%2298, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2300 = "stablehlo.dot_general"(%2299, %375) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2301 = "stablehlo.dot_general"(%2299, %372) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2302 = "stablehlo.dot_general"(%391, %2261) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2303 = "stablehlo.dot_general"(%2260, %370) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2304 = "stablehlo.broadcast_in_dim"(%367) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2305 = "stablehlo.multiply"(%2303, %2304) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2306 = "stablehlo.multiply"(%2305, %358) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2307 = "stablehlo.reduce"(%2306, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2308 = "stablehlo.negate"(%2307) : (tensor<f32>) -> tensor<f32>
        %2309 = "stablehlo.broadcast_in_dim"(%2308) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2310 = "stablehlo.divide"(%2303, %364) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2311 = "stablehlo.add"(%2309, %2310) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2312 = "stablehlo.multiply"(%2311, %358) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2313 = "stablehlo.negate"(%2312) : (tensor<2xf32>) -> tensor<2xf32>
        %2314 = "stablehlo.reduce"(%2313, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2315 = "stablehlo.divide"(%2314, %356) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2316 = "stablehlo.broadcast_in_dim"(%2315) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2317 = "stablehlo.multiply"(%2316, %355) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2318 = "stablehlo.add"(%2312, %2317) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2319 = "stablehlo.divide"(%2318, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2320 = "stablehlo.dot_general"(%2319, %349) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2321 = "stablehlo.dot_general"(%2319, %346) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2322 = "stablehlo.dot_general"(%365, %2260) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2323 = "stablehlo.dot_general"(%2259, %344) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2324 = "stablehlo.broadcast_in_dim"(%341) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2325 = "stablehlo.multiply"(%2323, %2324) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2326 = "stablehlo.multiply"(%2325, %332) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2327 = "stablehlo.reduce"(%2326, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2328 = "stablehlo.negate"(%2327) : (tensor<f32>) -> tensor<f32>
        %2329 = "stablehlo.broadcast_in_dim"(%2328) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2330 = "stablehlo.divide"(%2323, %338) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2331 = "stablehlo.add"(%2329, %2330) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2332 = "stablehlo.multiply"(%2331, %332) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2333 = "stablehlo.negate"(%2332) : (tensor<2xf32>) -> tensor<2xf32>
        %2334 = "stablehlo.reduce"(%2333, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2335 = "stablehlo.divide"(%2334, %330) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2336 = "stablehlo.broadcast_in_dim"(%2335) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2337 = "stablehlo.multiply"(%2336, %329) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2338 = "stablehlo.add"(%2332, %2337) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2339 = "stablehlo.divide"(%2338, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2340 = "stablehlo.dot_general"(%2339, %323) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2341 = "stablehlo.dot_general"(%2339, %320) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2342 = "stablehlo.dot_general"(%339, %2259) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2343 = "stablehlo.dot_general"(%2258, %318) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2344 = "stablehlo.broadcast_in_dim"(%315) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2345 = "stablehlo.multiply"(%2343, %2344) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2346 = "stablehlo.multiply"(%2345, %306) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2347 = "stablehlo.reduce"(%2346, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2348 = "stablehlo.negate"(%2347) : (tensor<f32>) -> tensor<f32>
        %2349 = "stablehlo.broadcast_in_dim"(%2348) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2350 = "stablehlo.divide"(%2343, %312) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2351 = "stablehlo.add"(%2349, %2350) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2352 = "stablehlo.multiply"(%2351, %306) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2353 = "stablehlo.negate"(%2352) : (tensor<2xf32>) -> tensor<2xf32>
        %2354 = "stablehlo.reduce"(%2353, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2355 = "stablehlo.divide"(%2354, %304) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2356 = "stablehlo.broadcast_in_dim"(%2355) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2357 = "stablehlo.multiply"(%2356, %303) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2358 = "stablehlo.add"(%2352, %2357) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2359 = "stablehlo.divide"(%2358, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2360 = "stablehlo.dot_general"(%2359, %297) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2361 = "stablehlo.dot_general"(%2359, %294) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2362 = "stablehlo.dot_general"(%313, %2258) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2363 = "stablehlo.dot_general"(%2257, %292) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2364 = "stablehlo.broadcast_in_dim"(%289) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2365 = "stablehlo.multiply"(%2363, %2364) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2366 = "stablehlo.multiply"(%2365, %280) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2367 = "stablehlo.reduce"(%2366, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2368 = "stablehlo.negate"(%2367) : (tensor<f32>) -> tensor<f32>
        %2369 = "stablehlo.broadcast_in_dim"(%2368) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2370 = "stablehlo.divide"(%2363, %286) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2371 = "stablehlo.add"(%2369, %2370) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2372 = "stablehlo.multiply"(%2371, %280) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2373 = "stablehlo.negate"(%2372) : (tensor<2xf32>) -> tensor<2xf32>
        %2374 = "stablehlo.reduce"(%2373, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2375 = "stablehlo.divide"(%2374, %278) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2376 = "stablehlo.broadcast_in_dim"(%2375) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2377 = "stablehlo.multiply"(%2376, %277) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2378 = "stablehlo.add"(%2372, %2377) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2379 = "stablehlo.divide"(%2378, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2380 = "stablehlo.dot_general"(%2379, %271) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2381 = "stablehlo.concatenate"(%2380, %2360, %2340, %2320, %2300, %2280) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
        %2382 = "stablehlo.reshape"(%2381) : (tensor<288xf32>) -> tensor<144x2xf32>
        %2383 = "stablehlo.dot_general"(%2382, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
        %2384 = "stablehlo.reshape"(%2383) : (tensor<144x2xf32>) -> tensor<288xf32>
        %2385 = "stablehlo.dot_general"(%2384, %249) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %2386 = "stablehlo.dot_general"(%2384, %247) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2387 = "stablehlo.reshape"(%2386) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2388 = "stablehlo.dot_general"(%2379, %268) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2389 = "stablehlo.slice"(%2388) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2390 = "stablehlo.slice"(%2361) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2391 = "stablehlo.slice"(%2341) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2392 = "stablehlo.slice"(%2321) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2393 = "stablehlo.slice"(%2301) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2394 = "stablehlo.slice"(%2281) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2395 = "stablehlo.concatenate"(%2389, %2390, %2391, %2392, %2393, %2394) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %2396 = "stablehlo.slice"(%2388) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2397 = "stablehlo.slice"(%2361) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2398 = "stablehlo.slice"(%2341) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2399 = "stablehlo.slice"(%2321) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2400 = "stablehlo.slice"(%2301) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2401 = "stablehlo.slice"(%2281) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2402 = "stablehlo.concatenate"(%2396, %2397, %2398, %2399, %2400, %2401) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %2403 = "stablehlo.reshape"(%2402) : (tensor<1x288xf32>) -> tensor<144x2xf32>
        %2404 = "stablehlo.dot_general"(%2403, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
        %2405 = "stablehlo.reshape"(%2404) : (tensor<144x2xf32>) -> tensor<288xf32>
        %2406 = "stablehlo.dot_general"(%2405, %252) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %2407 = "stablehlo.add"(%2385, %2406) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2408 = "stablehlo.dot_general"(%2405, %247) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2409 = "stablehlo.reshape"(%2408) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2410 = "stablehlo.reshape"(%2395) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
        %2411 = "stablehlo.dot_general"(%287, %2257) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2412 = "stablehlo.slice"(%2411) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2413 = "stablehlo.slice"(%2362) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2414 = "stablehlo.slice"(%2342) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2415 = "stablehlo.slice"(%2322) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2416 = "stablehlo.slice"(%2302) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2417 = "stablehlo.slice"(%2282) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2418 = "stablehlo.concatenate"(%2412, %2413, %2414, %2415, %2416, %2417) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %2419 = "stablehlo.slice"(%2411) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2420 = "stablehlo.slice"(%2362) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2421 = "stablehlo.slice"(%2342) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2422 = "stablehlo.slice"(%2322) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2423 = "stablehlo.slice"(%2302) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2424 = "stablehlo.slice"(%2282) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2425 = "stablehlo.concatenate"(%2419, %2420, %2421, %2422, %2423, %2424) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %2426 = "stablehlo.reshape"(%2425) : (tensor<1x288xf32>) -> tensor<288xf32>
        %2427 = "stablehlo.dot_general"(%2426, %255) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %2428 = "stablehlo.add"(%2407, %2427) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2429 = "stablehlo.multiply"(%245, %2428) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2430 = "stablehlo.reduce"(%2429, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
        %2431 = "stablehlo.multiply"(%2430, %244) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2432 = "stablehlo.negate"(%2431) : (tensor<f32>) -> tensor<f32>
        %2433 = "stablehlo.multiply"(%2432, %241) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2434 = "stablehlo.divide"(%2433, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2435 = "stablehlo.dot_general"(%2434, %234) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
        %2436 = "stablehlo.add"(%2255, %2435) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2437 = "stablehlo.add"(%2436, %2435) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2438 = "stablehlo.multiply"(%2428, %246) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2439 = "stablehlo.multiply"(%236, %2438) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2440 = "stablehlo.add"(%2437, %2439) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2441 = "stablehlo.dot_general"(%2440, %232) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x768xf32>) -> tensor<768xf32>
        %2442 = "stablehlo.multiply"(%229, %2441) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2443 = "stablehlo.dot_general"(%2442, %221) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
        %2444 = "stablehlo.dot_general"(%2442, %216) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
        %2445 = "stablehlo.reshape"(%2444) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
        %2446 = "stablehlo.concatenate"(%2445, %2233, %2021, %1809, %1597, %1385) <{dimension = 0 : i64}> : (tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>) -> tensor<6x768x288xf32>
        %2447 = "stablehlo.multiply"(%2441, %222) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2448 = "stablehlo.multiply"(%219, %2447) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2449 = "stablehlo.multiply"(%2448, %228) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2450 = "stablehlo.negate"(%2449) : (tensor<768xf32>) -> tensor<768xf32>
        %2451 = "stablehlo.multiply"(%2450, %224) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2452 = "stablehlo.negate"(%2451) : (tensor<768xf32>) -> tensor<768xf32>
        %2453 = "stablehlo.multiply"(%2447, %226) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2454 = "stablehlo.add"(%2452, %2453) : (tensor<768xf32>, tensor<768xf32>) -> tensor<768xf32>
        %2455 = "stablehlo.dot_general"(%2454, %218) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<768x288xf32>) -> tensor<288xf32>
        %2456 = "stablehlo.add"(%2443, %2455) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2457 = "stablehlo.multiply"(%214, %2456) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2458 = "stablehlo.reduce"(%2457, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
        %2459 = "stablehlo.multiply"(%2458, %213) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2460 = "stablehlo.negate"(%2459) : (tensor<f32>) -> tensor<f32>
        %2461 = "stablehlo.multiply"(%2460, %210) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2462 = "stablehlo.divide"(%2461, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2463 = "stablehlo.dot_general"(%2462, %203) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
        %2464 = "stablehlo.add"(%2440, %2463) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2465 = "stablehlo.add"(%2464, %2463) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2466 = "stablehlo.multiply"(%2456, %215) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2467 = "stablehlo.multiply"(%205, %2466) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2468 = "stablehlo.add"(%2465, %2467) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2469 = "stablehlo.dot_general"(%2468, %201) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %2470 = "stablehlo.slice"(%2469) <{limit_indices = array<i64: 48>, start_indices = array<i64: 0>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2471 = "stablehlo.slice"(%2469) <{limit_indices = array<i64: 96>, start_indices = array<i64: 48>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2472 = "stablehlo.slice"(%2469) <{limit_indices = array<i64: 144>, start_indices = array<i64: 96>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2473 = "stablehlo.slice"(%2469) <{limit_indices = array<i64: 192>, start_indices = array<i64: 144>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2474 = "stablehlo.slice"(%2469) <{limit_indices = array<i64: 240>, start_indices = array<i64: 192>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2475 = "stablehlo.slice"(%2469) <{limit_indices = array<i64: 288>, start_indices = array<i64: 240>, strides = array<i64: 1>}> : (tensor<288xf32>) -> tensor<48xf32>
        %2476 = "stablehlo.dot_general"(%2475, %197) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2477 = "stablehlo.broadcast_in_dim"(%194) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2478 = "stablehlo.multiply"(%2476, %2477) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2479 = "stablehlo.multiply"(%2478, %185) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2480 = "stablehlo.reduce"(%2479, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2481 = "stablehlo.negate"(%2480) : (tensor<f32>) -> tensor<f32>
        %2482 = "stablehlo.broadcast_in_dim"(%2481) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2483 = "stablehlo.divide"(%2476, %191) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2484 = "stablehlo.add"(%2482, %2483) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2485 = "stablehlo.multiply"(%2484, %185) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2486 = "stablehlo.negate"(%2485) : (tensor<2xf32>) -> tensor<2xf32>
        %2487 = "stablehlo.reduce"(%2486, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2488 = "stablehlo.divide"(%2487, %183) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2489 = "stablehlo.broadcast_in_dim"(%2488) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2490 = "stablehlo.multiply"(%2489, %182) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2491 = "stablehlo.add"(%2485, %2490) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2492 = "stablehlo.divide"(%2491, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2493 = "stablehlo.dot_general"(%2492, %176) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2494 = "stablehlo.dot_general"(%2492, %173) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2495 = "stablehlo.dot_general"(%192, %2475) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2496 = "stablehlo.dot_general"(%2474, %171) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2497 = "stablehlo.broadcast_in_dim"(%168) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2498 = "stablehlo.multiply"(%2496, %2497) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2499 = "stablehlo.multiply"(%2498, %159) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2500 = "stablehlo.reduce"(%2499, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2501 = "stablehlo.negate"(%2500) : (tensor<f32>) -> tensor<f32>
        %2502 = "stablehlo.broadcast_in_dim"(%2501) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2503 = "stablehlo.divide"(%2496, %165) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2504 = "stablehlo.add"(%2502, %2503) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2505 = "stablehlo.multiply"(%2504, %159) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2506 = "stablehlo.negate"(%2505) : (tensor<2xf32>) -> tensor<2xf32>
        %2507 = "stablehlo.reduce"(%2506, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2508 = "stablehlo.divide"(%2507, %157) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2509 = "stablehlo.broadcast_in_dim"(%2508) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2510 = "stablehlo.multiply"(%2509, %156) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2511 = "stablehlo.add"(%2505, %2510) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2512 = "stablehlo.divide"(%2511, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2513 = "stablehlo.dot_general"(%2512, %150) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2514 = "stablehlo.dot_general"(%2512, %147) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2515 = "stablehlo.dot_general"(%166, %2474) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2516 = "stablehlo.dot_general"(%2473, %145) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2517 = "stablehlo.broadcast_in_dim"(%142) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2518 = "stablehlo.multiply"(%2516, %2517) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2519 = "stablehlo.multiply"(%2518, %133) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2520 = "stablehlo.reduce"(%2519, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2521 = "stablehlo.negate"(%2520) : (tensor<f32>) -> tensor<f32>
        %2522 = "stablehlo.broadcast_in_dim"(%2521) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2523 = "stablehlo.divide"(%2516, %139) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2524 = "stablehlo.add"(%2522, %2523) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2525 = "stablehlo.multiply"(%2524, %133) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2526 = "stablehlo.negate"(%2525) : (tensor<2xf32>) -> tensor<2xf32>
        %2527 = "stablehlo.reduce"(%2526, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2528 = "stablehlo.divide"(%2527, %131) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2529 = "stablehlo.broadcast_in_dim"(%2528) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2530 = "stablehlo.multiply"(%2529, %130) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2531 = "stablehlo.add"(%2525, %2530) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2532 = "stablehlo.divide"(%2531, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2533 = "stablehlo.dot_general"(%2532, %124) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2534 = "stablehlo.dot_general"(%2532, %121) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2535 = "stablehlo.dot_general"(%140, %2473) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2536 = "stablehlo.dot_general"(%2472, %119) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2537 = "stablehlo.broadcast_in_dim"(%116) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2538 = "stablehlo.multiply"(%2536, %2537) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2539 = "stablehlo.multiply"(%2538, %107) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2540 = "stablehlo.reduce"(%2539, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2541 = "stablehlo.negate"(%2540) : (tensor<f32>) -> tensor<f32>
        %2542 = "stablehlo.broadcast_in_dim"(%2541) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2543 = "stablehlo.divide"(%2536, %113) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2544 = "stablehlo.add"(%2542, %2543) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2545 = "stablehlo.multiply"(%2544, %107) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2546 = "stablehlo.negate"(%2545) : (tensor<2xf32>) -> tensor<2xf32>
        %2547 = "stablehlo.reduce"(%2546, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2548 = "stablehlo.divide"(%2547, %105) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2549 = "stablehlo.broadcast_in_dim"(%2548) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2550 = "stablehlo.multiply"(%2549, %104) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2551 = "stablehlo.add"(%2545, %2550) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2552 = "stablehlo.divide"(%2551, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2553 = "stablehlo.dot_general"(%2552, %98) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2554 = "stablehlo.dot_general"(%2552, %95) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2555 = "stablehlo.dot_general"(%114, %2472) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2556 = "stablehlo.dot_general"(%2471, %93) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2557 = "stablehlo.broadcast_in_dim"(%90) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2558 = "stablehlo.multiply"(%2556, %2557) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2559 = "stablehlo.multiply"(%2558, %81) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2560 = "stablehlo.reduce"(%2559, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2561 = "stablehlo.negate"(%2560) : (tensor<f32>) -> tensor<f32>
        %2562 = "stablehlo.broadcast_in_dim"(%2561) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2563 = "stablehlo.divide"(%2556, %87) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2564 = "stablehlo.add"(%2562, %2563) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2565 = "stablehlo.multiply"(%2564, %81) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2566 = "stablehlo.negate"(%2565) : (tensor<2xf32>) -> tensor<2xf32>
        %2567 = "stablehlo.reduce"(%2566, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2568 = "stablehlo.divide"(%2567, %79) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2569 = "stablehlo.broadcast_in_dim"(%2568) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2570 = "stablehlo.multiply"(%2569, %78) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2571 = "stablehlo.add"(%2565, %2570) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2572 = "stablehlo.divide"(%2571, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2573 = "stablehlo.dot_general"(%2572, %72) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2574 = "stablehlo.dot_general"(%2572, %69) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2575 = "stablehlo.dot_general"(%88, %2471) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2576 = "stablehlo.dot_general"(%2470, %67) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<48xf32>, tensor<2x48xf32>) -> tensor<2xf32>
        %2577 = "stablehlo.broadcast_in_dim"(%64) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2578 = "stablehlo.multiply"(%2576, %2577) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2579 = "stablehlo.multiply"(%2578, %55) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2580 = "stablehlo.reduce"(%2579, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2581 = "stablehlo.negate"(%2580) : (tensor<f32>) -> tensor<f32>
        %2582 = "stablehlo.broadcast_in_dim"(%2581) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2583 = "stablehlo.divide"(%2576, %61) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2584 = "stablehlo.add"(%2582, %2583) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2585 = "stablehlo.multiply"(%2584, %55) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2586 = "stablehlo.negate"(%2585) : (tensor<2xf32>) -> tensor<2xf32>
        %2587 = "stablehlo.reduce"(%2586, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<2xf32>, tensor<f32>) -> tensor<f32>
        %2588 = "stablehlo.divide"(%2587, %53) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2589 = "stablehlo.broadcast_in_dim"(%2588) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<2xf32>
        %2590 = "stablehlo.multiply"(%2589, %52) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2591 = "stablehlo.add"(%2585, %2590) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2592 = "stablehlo.divide"(%2591, %2) : (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>
        %2593 = "stablehlo.dot_general"(%2592, %46) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<2x48xf32>) -> tensor<48xf32>
        %2594 = "stablehlo.concatenate"(%2593, %2573, %2553, %2533, %2513, %2493) <{dimension = 0 : i64}> : (tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>, tensor<48xf32>) -> tensor<288xf32>
        %2595 = "stablehlo.reshape"(%2594) : (tensor<288xf32>) -> tensor<144x2xf32>
        %2596 = "stablehlo.dot_general"(%2595, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
        %2597 = "stablehlo.reshape"(%2596) : (tensor<144x2xf32>) -> tensor<288xf32>
        %2598 = "stablehlo.dot_general"(%2597, %24) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %2599 = "stablehlo.dot_general"(%2597, %22) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2600 = "stablehlo.reshape"(%2599) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2601 = "stablehlo.concatenate"(%2600, %2387, %2175, %1963, %1751, %1539) <{dimension = 0 : i64}> : (tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>) -> tensor<6x288x288xf32>
        %2602 = "stablehlo.dot_general"(%2592, %43) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2603 = "stablehlo.slice"(%2602) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2604 = "stablehlo.slice"(%2574) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2605 = "stablehlo.slice"(%2554) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2606 = "stablehlo.slice"(%2534) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2607 = "stablehlo.slice"(%2514) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2608 = "stablehlo.slice"(%2494) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2609 = "stablehlo.concatenate"(%2603, %2604, %2605, %2606, %2607, %2608) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %2610 = "stablehlo.slice"(%2602) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2611 = "stablehlo.slice"(%2574) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2612 = "stablehlo.slice"(%2554) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2613 = "stablehlo.slice"(%2534) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2614 = "stablehlo.slice"(%2514) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2615 = "stablehlo.slice"(%2494) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2616 = "stablehlo.concatenate"(%2610, %2611, %2612, %2613, %2614, %2615) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %2617 = "stablehlo.reshape"(%2616) : (tensor<1x288xf32>) -> tensor<144x2xf32>
        %2618 = "stablehlo.dot_general"(%2617, %9) <{dot_dimension_numbers = #stablehlo.dot<lhs_batching_dimensions = [0], rhs_batching_dimensions = [0], lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<144x2xf32>, tensor<144x2x2xf32>) -> tensor<144x2xf32>
        %2619 = "stablehlo.reshape"(%2618) : (tensor<144x2xf32>) -> tensor<288xf32>
        %2620 = "stablehlo.dot_general"(%2619, %27) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %2621 = "stablehlo.add"(%2598, %2620) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2622 = "stablehlo.dot_general"(%2619, %22) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2623 = "stablehlo.reshape"(%2622) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2624 = "stablehlo.concatenate"(%2623, %2409, %2197, %1985, %1773, %1561) <{dimension = 0 : i64}> : (tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>) -> tensor<6x288x288xf32>
        %2625 = "stablehlo.reshape"(%2609) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
        %2626 = "stablehlo.concatenate"(%2625, %2410, %2198, %1986, %1774, %1562) <{dimension = 0 : i64}> : (tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>) -> tensor<6x1x288xf32>
        %2627 = "stablehlo.dot_general"(%62, %2470) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<2xf32>, tensor<48xf32>) -> tensor<2x48xf32>
        %2628 = "stablehlo.slice"(%2627) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2629 = "stablehlo.slice"(%2575) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2630 = "stablehlo.slice"(%2555) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2631 = "stablehlo.slice"(%2535) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2632 = "stablehlo.slice"(%2515) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2633 = "stablehlo.slice"(%2495) <{limit_indices = array<i64: 1, 48>, start_indices = array<i64: 0, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2634 = "stablehlo.concatenate"(%2628, %2629, %2630, %2631, %2632, %2633) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %2635 = "stablehlo.slice"(%2627) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2636 = "stablehlo.slice"(%2575) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2637 = "stablehlo.slice"(%2555) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2638 = "stablehlo.slice"(%2535) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2639 = "stablehlo.slice"(%2515) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2640 = "stablehlo.slice"(%2495) <{limit_indices = array<i64: 2, 48>, start_indices = array<i64: 1, 0>, strides = array<i64: 1, 1>}> : (tensor<2x48xf32>) -> tensor<1x48xf32>
        %2641 = "stablehlo.concatenate"(%2635, %2636, %2637, %2638, %2639, %2640) <{dimension = 1 : i64}> : (tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>, tensor<1x48xf32>) -> tensor<1x288xf32>
        %2642 = "stablehlo.reshape"(%2641) : (tensor<1x288xf32>) -> tensor<288xf32>
        %2643 = "stablehlo.dot_general"(%2642, %30) <{dot_dimension_numbers = #stablehlo.dot<lhs_contracting_dimensions = [0], rhs_contracting_dimensions = [0]>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288x288xf32>) -> tensor<288xf32>
        %2644 = "stablehlo.add"(%2621, %2643) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2645 = "stablehlo.multiply"(%20, %2644) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2646 = "stablehlo.reduce"(%2645, %3) <{dimensions = array<i64: 0>}> ({
        ^bb0(%arg14: tensor<f32>, %arg15: tensor<f32>):
          %2743 = "stablehlo.add"(%arg14, %arg15) : (tensor<f32>, tensor<f32>) -> tensor<f32>
          "stablehlo.return"(%2743) : (tensor<f32>) -> ()
        }) : (tensor<288xf32>, tensor<f32>) -> tensor<f32>
        %2647 = "stablehlo.multiply"(%2646, %19) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2648 = "stablehlo.negate"(%2647) : (tensor<f32>) -> tensor<f32>
        %2649 = "stablehlo.multiply"(%2648, %16) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2650 = "stablehlo.divide"(%2649, %6) : (tensor<f32>, tensor<f32>) -> tensor<f32>
        %2651 = "stablehlo.dot_general"(%2650, %arg0) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<f32>, tensor<288xf32>) -> tensor<288xf32>
        %2652 = "stablehlo.add"(%2468, %2651) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2653 = "stablehlo.add"(%2652, %2651) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2654 = "stablehlo.multiply"(%2644, %21) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2655 = "stablehlo.multiply"(%11, %2654) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2656 = "stablehlo.add"(%2653, %2655) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2657 = "stablehlo.multiply"(%2654, %arg0) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2658 = "stablehlo.reshape"(%2657) : (tensor<288xf32>) -> tensor<1x288xf32>
        %2659 = "stablehlo.dot_general"(%2642, %22) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2660 = "stablehlo.reshape"(%2659) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2661 = "stablehlo.reshape"(%2634) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
        %2662 = "stablehlo.dot_general"(%2468, %199) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2663 = "stablehlo.reshape"(%2662) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2664 = "stablehlo.multiply"(%2466, %203) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2665 = "stablehlo.reshape"(%2664) : (tensor<288xf32>) -> tensor<1x288xf32>
        %2666 = "stablehlo.dot_general"(%2454, %216) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
        %2667 = "stablehlo.reshape"(%2666) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
        %2668 = "stablehlo.dot_general"(%2440, %230) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
        %2669 = "stablehlo.reshape"(%2668) : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
        %2670 = "stablehlo.multiply"(%2438, %234) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2671 = "stablehlo.reshape"(%2670) : (tensor<288xf32>) -> tensor<1x288xf32>
        %2672 = "stablehlo.dot_general"(%2426, %247) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2673 = "stablehlo.reshape"(%2672) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2674 = "stablehlo.reshape"(%2418) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
        %2675 = "stablehlo.dot_general"(%2255, %424) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2676 = "stablehlo.reshape"(%2675) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2677 = "stablehlo.multiply"(%2253, %428) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2678 = "stablehlo.reshape"(%2677) : (tensor<288xf32>) -> tensor<1x288xf32>
        %2679 = "stablehlo.dot_general"(%2241, %441) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
        %2680 = "stablehlo.reshape"(%2679) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
        %2681 = "stablehlo.dot_general"(%2228, %455) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
        %2682 = "stablehlo.reshape"(%2681) : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
        %2683 = "stablehlo.multiply"(%2226, %459) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2684 = "stablehlo.reshape"(%2683) : (tensor<288xf32>) -> tensor<1x288xf32>
        %2685 = "stablehlo.dot_general"(%2214, %472) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2686 = "stablehlo.reshape"(%2685) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2687 = "stablehlo.reshape"(%2206) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
        %2688 = "stablehlo.dot_general"(%2043, %649) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2689 = "stablehlo.reshape"(%2688) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2690 = "stablehlo.multiply"(%2041, %653) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2691 = "stablehlo.reshape"(%2690) : (tensor<288xf32>) -> tensor<1x288xf32>
        %2692 = "stablehlo.dot_general"(%2029, %666) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
        %2693 = "stablehlo.reshape"(%2692) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
        %2694 = "stablehlo.dot_general"(%2016, %680) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
        %2695 = "stablehlo.reshape"(%2694) : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
        %2696 = "stablehlo.multiply"(%2014, %684) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2697 = "stablehlo.reshape"(%2696) : (tensor<288xf32>) -> tensor<1x288xf32>
        %2698 = "stablehlo.dot_general"(%2002, %697) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2699 = "stablehlo.reshape"(%2698) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2700 = "stablehlo.reshape"(%1994) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
        %2701 = "stablehlo.dot_general"(%1831, %874) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2702 = "stablehlo.reshape"(%2701) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2703 = "stablehlo.multiply"(%1829, %878) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2704 = "stablehlo.reshape"(%2703) : (tensor<288xf32>) -> tensor<1x288xf32>
        %2705 = "stablehlo.dot_general"(%1817, %891) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
        %2706 = "stablehlo.reshape"(%2705) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
        %2707 = "stablehlo.dot_general"(%1804, %905) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
        %2708 = "stablehlo.reshape"(%2707) : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
        %2709 = "stablehlo.multiply"(%1802, %909) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2710 = "stablehlo.reshape"(%2709) : (tensor<288xf32>) -> tensor<1x288xf32>
        %2711 = "stablehlo.dot_general"(%1790, %922) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2712 = "stablehlo.reshape"(%2711) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2713 = "stablehlo.reshape"(%1782) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
        %2714 = "stablehlo.dot_general"(%1619, %1099) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2715 = "stablehlo.reshape"(%2714) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2716 = "stablehlo.multiply"(%1617, %1103) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2717 = "stablehlo.reshape"(%2716) : (tensor<288xf32>) -> tensor<1x288xf32>
        %2718 = "stablehlo.dot_general"(%1605, %1116) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
        %2719 = "stablehlo.reshape"(%2718) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
        %2720 = "stablehlo.dot_general"(%1592, %1130) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
        %2721 = "stablehlo.reshape"(%2720) : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
        %2722 = "stablehlo.multiply"(%1590, %1134) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2723 = "stablehlo.reshape"(%2722) : (tensor<288xf32>) -> tensor<1x288xf32>
        %2724 = "stablehlo.concatenate"(%2658, %2671, %2684, %2697, %2710, %2723) <{dimension = 0 : i64}> : (tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>) -> tensor<6x288xf32>
        %2725 = "stablehlo.dot_general"(%1578, %1147) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2726 = "stablehlo.reshape"(%2725) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2727 = "stablehlo.concatenate"(%2660, %2673, %2686, %2699, %2712, %2726) <{dimension = 0 : i64}> : (tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>) -> tensor<6x288x288xf32>
        %2728 = "stablehlo.reshape"(%1570) : (tensor<1x288xf32>) -> tensor<1x1x288xf32>
        %2729 = "stablehlo.concatenate"(%2661, %2674, %2687, %2700, %2713, %2728) <{dimension = 0 : i64}> : (tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>, tensor<1x1x288xf32>) -> tensor<6x1x288xf32>
        %2730 = "stablehlo.dot_general"(%1407, %1324) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<288xf32>) -> tensor<288x288xf32>
        %2731 = "stablehlo.reshape"(%2730) : (tensor<288x288xf32>) -> tensor<1x288x288xf32>
        %2732 = "stablehlo.concatenate"(%2663, %2676, %2689, %2702, %2715, %2731) <{dimension = 0 : i64}> : (tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>, tensor<1x288x288xf32>) -> tensor<6x288x288xf32>
        %2733 = "stablehlo.multiply"(%1405, %1328) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        %2734 = "stablehlo.reshape"(%2733) : (tensor<288xf32>) -> tensor<1x288xf32>
        %2735 = "stablehlo.concatenate"(%2665, %2678, %2691, %2704, %2717, %2734) <{dimension = 0 : i64}> : (tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>, tensor<1x288xf32>) -> tensor<6x288xf32>
    Jax2 rev (Array([-6.86408228e-08,  4.21906954e-08,  1.17837608e-07,  3.79193438e-07,
        1.87490897e-07,  7.23556695e-07,  9.79631523e-08, -3.31773066e-07,
        4.02368215e-07,  1.08053335e-07,  4.93508821e-07, -9.26528276e-09,
        1.70167880e-08, -6.06286108e-07, -5.95512006e-07, -1.93254607e-07,
        4.33923589e-07, -1.08318190e-08, -7.33497387e-08,  3.32936082e-07,
       -4.18106119e-08, -7.68011432e-07,  7.67988183e-07,  1.37110973e-07,
       -7.53293477e-07, -5.19659011e-07, -5.47181457e-07, -4.74780194e-07,
       -1.09416681e-06, -1.77187204e-07,  1.16568863e-07,  4.33848328e-07,
       -2.21843933e-07,  2.23926861e-07, -6.71994258e-07,  4.99407633e-07,
       -8.38962748e-08,  5.74726812e-07,  2.11452402e-07,  4.06514822e-08,
        1.64278333e-07,  1.50903460e-07, -5.40260503e-09,  8.70453079e-08,
        1.61527964e-07, -2.25055473e-07, -2.47880685e-08,  1.20487258e-07,
        6.23215158e-07,  9.19801195e-08,  2.56129454e-07,  5.02109970e-07,
        6.70257805e-08,  1.04174653e-07, -4.15205648e-08,  1.87939335e-07,
        4.38711652e-07, -2.48181465e-07,  2.32253015e-07, -4.64785302e-07,
       -3.03568100e-07, -5.58818328e-07,  9.50947552e-08,  1.13133595e-07,
       -2.17893681e-09, -2.20923795e-07,  3.02371745e-07,  1.72557634e-06,
        2.98470553e-07,  1.47123940e-08, -8.53288782e-08, -1.19442205e-07,
        1.61918749e-07,  6.79746535e-08,  1.26499017e-07, -7.60650892e-07,
        7.08876655e-08, -8.57948578e-07,  5.60488786e-07,  1.31472234e-07,
       -1.35581502e-07, -1.53091889e-07, -5.43999334e-09,  1.31034241e-07,
       -3.84336658e-07, -3.06770630e-07, -1.81460109e-07, -8.59075211e-09,
        6.71974334e-08, -1.33693902e-07,  2.88377777e-07,  5.65853156e-07,
       -3.77868439e-08,  1.14585566e-06, -1.92390573e-07, -1.84777321e-07,
        2.57143256e-07, -6.31657073e-08, -9.05696425e-08,  1.62616800e-07,
        5.11932058e-07,  8.54942130e-07,  1.81083990e-07, -3.88105889e-07,
        1.09523391e-07, -2.86763168e-07,  1.44920114e-06,  6.60731274e-08,
       -3.52259462e-07,  3.19866302e-07, -2.07359321e-07,  4.32996146e-08,
       -3.83730054e-07,  2.04251918e-07, -3.16490798e-07, -3.74791455e-07,
        9.46253181e-07, -1.30327553e-08,  2.92616619e-07, -2.48266133e-07,
        1.02249551e-08,  1.02647334e-06,  1.84591869e-07,  3.56919005e-09,
        1.57320663e-08,  6.85378666e-07, -4.02478321e-07,  6.18712264e-08,
        2.58430987e-07, -7.49129924e-07,  7.20021603e-07, -5.05634432e-08,
        5.70314675e-08,  4.01292425e-07, -5.21791890e-07,  5.30305009e-08,
       -4.95378345e-07,  7.72219977e-08, -3.37234383e-07, -5.28767679e-08,
        1.08730944e-07,  1.31315474e-07,  3.65712509e-07, -8.08554262e-07,
        1.91631997e-07, -8.42335282e-07,  4.83950259e-07,  4.59258843e-07,
       -6.15280612e-07, -1.22344500e-06,  2.34015872e-07,  7.07483778e-08,
        5.39801476e-07,  1.39701353e-06,  3.04554675e-07,  2.52107188e-08,
        4.83204232e-08, -4.75948809e-07, -2.52900833e-07,  7.46215250e-08,
       -2.31107133e-09,  1.56125708e-07,  2.60826340e-07,  2.72517777e-08,
       -7.04579008e-07,  1.57311391e-07, -1.15654950e-06, -9.39920085e-07,
       -4.97331825e-07,  6.46740546e-08, -2.65434323e-07,  6.43622897e-08,
        9.37891400e-08,  2.52144559e-07,  9.06175970e-08,  1.44713468e-07,
        1.31762633e-07,  4.81381548e-08,  9.00499764e-09,  1.27348398e-08,
        4.32467040e-08, -1.25784441e-08,  7.66482486e-08,  2.04513384e-07,
       -3.94884552e-07, -1.94403327e-07, -2.98042835e-07,  2.18630575e-07,
        1.69301885e-07,  1.49153067e-07, -3.50019917e-07,  8.77085540e-07,
        4.23077239e-07, -1.09007931e-06, -1.36423535e-06,  4.79422830e-08,
        9.21597064e-07, -1.03429571e-07, -5.79991195e-07, -3.09759798e-07,
        3.58044446e-07, -6.62943904e-08, -1.58884603e-07, -3.58757944e-07,
       -1.61528453e-06, -7.06735534e-07, -7.84457868e-08,  2.55476706e-08,
       -7.91445302e-07,  3.60562851e-08, -4.64593342e-08, -7.16763395e-07,
        4.69918007e-07,  3.78396301e-08,  1.09304949e-07, -5.59533191e-07,
       -3.28639032e-07, -8.60765567e-07,  4.96651126e-07,  6.62748221e-07,
        2.11249969e-07,  1.11245996e-07,  1.35924793e-07, -1.73352049e-07,
       -4.84629993e-07, -1.07275946e-06,  3.53337327e-07,  4.73680934e-08,
       -6.40715143e-07, -3.24083032e-07,  6.44099956e-08, -2.05601381e-07,
        1.65275594e-07,  4.72725148e-08, -6.40937060e-07,  8.60434994e-08,
       -3.91629811e-07,  1.39183157e-07, -9.12502500e-08,  2.04173332e-07,
        2.10377834e-07,  2.19034277e-07, -1.68734374e-07, -1.08304384e-07,
        6.66635287e-07, -1.13561964e-06, -4.51580831e-07, -4.66988524e-07,
        9.00098598e-07,  9.01734012e-08, -2.67860656e-07,  2.83206305e-07,
        1.05244041e-07,  1.10610802e-06, -2.04430139e-09, -1.12441159e-08,
        1.13123171e-07,  1.05943030e-07,  8.35827962e-07, -5.38025688e-07,
       -3.97798289e-07, -1.12537066e-07, -3.02546397e-07,  1.52792026e-07,
       -6.16381897e-07, -3.72609634e-07, -3.07205454e-07,  8.12457301e-07,
       -5.32849413e-07, -1.08672182e-07, -1.15581528e-07, -9.30150037e-08,
       -1.85540880e-08, -1.37492336e-07,  5.40914868e-07,  6.27180867e-08,
       -4.74730456e-07, -1.04523406e-06, -1.33274710e-07,  6.83533514e-08,
        7.06085501e-08,  3.79577614e-07,  1.53265859e-07,  5.01433028e-08,
       -1.67806196e-08, -2.22508689e-07,  1.08804400e-07, -7.36162974e-07],      dtype=float32), {'rms_att_weight': Array([[-3.0143696e-07, -1.2328665e-07, -1.7465823e-08, ...,
        -1.4061717e-07, -1.5792592e-07, -5.4863358e-07],
       [-1.6369802e-06, -8.6754056e-07, -1.8289523e-06, ...,
        -1.0596178e-06, -1.2871564e-06, -1.0761667e-06],
       [-6.9325080e-07, -4.5352172e-07, -8.4269311e-07, ...,
        -8.1122982e-07, -1.5815522e-07,  1.1964835e-07],
       [ 5.1793427e-07, -5.5533786e-07, -2.4150373e-07, ...,
         9.4964332e-07, -1.0185217e-07, -1.0075292e-07],
       [-1.1727195e-06, -1.6750417e-06, -1.1069870e-06, ...,
        -2.1841936e-06, -2.1553085e-06, -1.5655169e-06],
       [-2.2943155e-07, -3.5378143e-08, -6.5307557e-07, ...,
        -7.1474807e-07, -5.4531517e-07,  5.6257981e-08]], dtype=float32), 'rms_ffn_weight': Array([[ 2.95414764e-04,  2.42857262e-04,  2.86784052e-04, ...,
         2.67516210e-04,  2.00823299e-04,  1.17813550e-04],
       [ 7.73553184e-05, -1.25005434e-04, -1.21706857e-04, ...,
        -1.22196643e-05, -3.80375750e-05, -1.78491362e-04],
       [-4.37740673e-04, -3.44874308e-04, -4.67159349e-04, ...,
        -4.63766919e-04, -2.63263530e-04, -3.33167176e-04],
       [ 1.32752233e-04,  9.45400825e-05,  1.38524949e-04, ...,
         1.74323704e-05,  8.29400742e-05, -2.30727273e-05],
       [-9.23259358e-05,  3.04452551e-05, -7.10105960e-05, ...,
        -1.10016546e-04, -1.20125704e-04, -1.12619549e-04],
       [ 9.48957895e-05,  2.31729471e-04,  2.89788470e-04, ...,
         3.06937902e-04,  2.39924557e-04,  1.72888089e-04]],      dtype=float32), 'rms_final_weight': Array([0.3122053 , 0.38303918, 0.8200591 , 0.61894673, 0.12635426,
       0.24344024, 0.8361446 , 0.06651747, 0.896955  , 0.9979907 ,
       0.6266402 , 0.07218794, 0.23386627, 0.44796824, 0.9262833 ,
       0.15019089, 0.7380873 , 0.20100224, 0.183272  , 0.9952421 ,
       0.3053508 , 0.46485856, 0.8713649 , 0.7386524 , 0.45421234,
       0.9742905 , 0.80178434, 0.8113896 , 0.18982358, 0.63831717,
       0.1872204 , 0.10730092, 0.3926591 , 0.6619144 , 0.90564454,
       0.56765217, 0.0778048 , 0.6635671 , 0.4967288 , 0.93859744,
       0.12237269, 0.15338296, 0.58576405, 0.45069534, 0.0977786 ,
       0.00641902, 0.69381803, 0.4580174 , 0.1595322 , 0.48593563,
       0.28240606, 0.5517295 , 0.21862239, 0.91464216, 0.5406124 ,
       0.00819704, 0.30426028, 0.6022607 , 0.96227723, 0.9489469 ,
       0.186835  , 0.34483457, 0.18725023, 0.4927935 , 0.5340233 ,
       0.58169085, 0.07708689, 0.7007939 , 0.55612355, 0.38934347,
       0.9926272 , 0.3682517 , 0.5676963 , 0.17936414, 0.69174665,
       0.7956288 , 0.9634303 , 0.81479746, 0.06194434, 0.2468073 ,
       0.8020321 , 0.38030377, 0.35621735, 0.27904525, 0.25768125,
       0.06319077, 0.99190855, 0.05523045, 0.2980475 , 0.25185248,
       0.38000903, 0.85173017, 0.9537092 , 0.9449313 , 0.38227183,
       0.48736802, 0.89497286, 0.95300776, 0.71275187, 0.6176107 ,
       0.839199  , 0.7585798 , 0.68531674, 0.7475704 , 0.63421494,
       1.0108242 , 0.3633397 , 0.5698798 , 0.5270483 , 0.96704113,
       0.89812386, 0.76888496, 0.8005023 , 0.4232546 , 0.8666324 ,
       0.21481518, 0.91262794, 0.34706104, 0.25790077, 0.60310835,
       0.3188328 , 0.2731171 , 0.9384355 , 0.48072326, 0.98125595,
       0.7326272 , 0.9047383 , 0.5255142 , 0.86498344, 0.96362615,
       0.12110879, 0.7292903 , 0.28708053, 0.09494646, 0.8906763 ,
       0.35737857, 0.96169263, 0.02848402, 0.36005193, 0.78592503,
       0.47747067, 0.14686225, 0.86080545, 0.04425434, 0.90892106,
       0.4249482 , 0.0747368 , 0.7905809 , 0.30792928, 0.46037206,
       0.24123558, 0.42178747, 0.06162682, 0.78396076, 0.34331495,
       0.9420474 , 0.3242471 , 0.8216802 , 0.36618954, 0.3667223 ,
       0.4056759 , 0.7121504 , 0.73845303, 0.96334136, 0.8625689 ,
       0.64736134, 0.9211619 , 0.84406066, 0.34351304, 0.3043062 ,
       0.59214056, 0.49616915, 0.7642584 , 0.7106041 , 0.14271905,
       0.4835507 , 0.7055461 , 0.3586383 , 0.22076729, 0.31910723,
       0.5656433 , 0.71893984, 0.6566055 , 0.47881052, 0.4351634 ,
       0.5286704 , 0.68011975, 0.57306236, 0.87672895, 0.9661281 ,
       0.2449497 , 0.9602345 , 0.22372767, 0.48450968, 0.95286757,
       0.39947754, 0.5368166 , 0.10909911, 0.20554121, 0.611804  ,
       0.44083962, 0.91954535, 0.8771144 , 0.7255645 , 0.3669443 ,
       0.4372653 , 0.65592253, 0.49335885, 0.75596845, 0.00718008,
       0.8201033 , 0.18157919, 0.02211665, 0.5196222 , 0.10101545,
       0.5055483 , 0.57251376, 0.26995882, 0.08761868, 0.99912083,
       0.35904372, 0.7904374 , 0.9225819 , 0.61186445, 0.3830875 ,
       0.07389324, 0.26608193, 0.45918933, 0.20400742, 0.77979153,
       0.6035741 , 0.10805453, 0.6190611 , 0.8768369 , 0.31287163,
       0.80589724, 0.9268372 , 0.90927136, 0.08478162, 0.684047  ,
       0.48910892, 0.22513983, 0.97408646, 0.41005015, 0.22878326,
       0.78730536, 0.59618664, 0.41042367, 0.5120551 , 0.06035588,
       0.36444396, 0.70929223, 0.16675206, 0.75272256, 0.881576  ,
       0.30691344, 0.14660256, 0.26519263, 0.6609811 , 0.55440545,
       0.12501441, 0.3364693 , 0.09852853, 0.8370226 , 0.422585  ,
       0.23525533, 0.77372366, 0.37565795, 0.46482727, 0.15144964,
       0.7651885 , 0.12105324, 0.6146893 , 0.3594155 , 0.8886243 ,
       0.49813882, 0.79519606, 0.8493521 , 0.78389865, 1.004332  ,
       0.09718259, 0.06170881, 0.16077426, 0.9070744 , 0.41441402,
       0.6486587 , 0.717869  , 0.19379644], dtype=float32), 'w1': Array([[[ 3.64633615e-06,  8.72685121e-07,  3.56683722e-06, ...,
          4.34024429e-07,  3.36852531e-06,  1.65969777e-06],
        [ 2.63794050e-06,  6.31343710e-07,  2.58042724e-06, ...,
          3.13994803e-07,  2.43695831e-06,  1.20070774e-06],
        [ 5.99563145e-06,  1.43494674e-06,  5.86491251e-06, ...,
          7.13661734e-07,  5.53883001e-06,  2.72902321e-06],
        ...,
        [-2.69627344e-06, -6.45304681e-07, -2.63748825e-06, ...,
         -3.20938199e-07, -2.49084701e-06, -1.22725908e-06],
        [ 4.82197811e-06,  1.15405385e-06,  4.71684734e-06, ...,
          5.73961415e-07,  4.45459636e-06,  2.19481308e-06],
        [ 2.64609454e-08,  6.33295238e-09,  2.58840345e-08, ...,
          3.14965387e-09,  2.44449119e-08,  1.20441923e-08]],

       [[ 6.17717888e-07,  1.09563098e-06,  1.04882361e-06, ...,
          8.52585856e-07,  1.04958804e-06,  1.77660084e-07],
        [ 2.71790918e-06,  4.82068845e-06,  4.61473974e-06, ...,
          3.75130958e-06,  4.61810305e-06,  7.81690176e-07],
        [ 4.20589959e-06,  7.45990064e-06,  7.14120006e-06, ...,
          5.80506230e-06,  7.14640510e-06,  1.20964694e-06],
        ...,
        [-1.76960100e-06, -3.13869759e-06, -3.00460670e-06, ...,
         -2.44243665e-06, -3.00679653e-06, -5.08949938e-07],
        [ 1.09699340e-06,  1.94571021e-06,  1.86258580e-06, ...,
          1.51409097e-06,  1.86394334e-06,  3.15503172e-07],
        [-8.96390975e-06, -1.58990661e-05, -1.52198290e-05, ...,
         -1.23721575e-05, -1.52309212e-05, -2.57808483e-06]],

       [[-1.93336447e-07, -6.80360870e-08, -4.80970357e-08, ...,
         -8.59555911e-08, -4.33284733e-08, -1.73667392e-08],
        [ 1.00252350e-06,  3.52793137e-07,  2.49401523e-07, ...,
          4.45712629e-07,  2.24674707e-07,  9.00531916e-08],
        [ 8.26453572e-08,  2.90833224e-08,  2.05599946e-08, ...,
          3.67433586e-08,  1.85215825e-08,  7.42374429e-09],
        ...,
        [-4.22935273e-06, -1.48833089e-06, -1.05215202e-06, ...,
         -1.88033107e-06, -9.47836782e-07, -3.79908016e-07],
        [ 1.25773568e-06,  4.42603607e-07,  3.12891615e-07, ...,
          5.59177579e-07,  2.81870086e-07,  1.12978007e-07],
        [-1.98665907e-06, -6.99115446e-07, -4.94228630e-07, ...,
         -8.83250152e-07, -4.45228522e-07, -1.78454655e-07]],

       [[ 1.61405887e-06,  3.88676108e-06,  1.28759098e-06, ...,
          3.81181007e-06,  2.52378095e-06,  4.18733225e-06],
        [ 1.04036246e-06,  2.50526227e-06,  8.29933413e-07, ...,
          2.45695151e-06,  1.62673564e-06,  2.69899897e-06],
        [ 2.18161540e-06,  5.25347514e-06,  1.74035063e-06, ...,
          5.15216880e-06,  3.41122609e-06,  5.65973687e-06],
        ...,
        [-4.35050924e-06, -1.04763167e-05, -3.47055288e-06, ...,
         -1.02742943e-05, -6.80256016e-06, -1.12864700e-05],
        [ 9.54388035e-09,  2.29823005e-08,  7.61348584e-09, ...,
          2.25391155e-08,  1.49230388e-08,  2.47595651e-08],
        [ 2.92645313e-06,  7.04709419e-06,  2.33453375e-06, ...,
          6.91120022e-06,  4.57587203e-06,  7.59205977e-06]],

       [[-1.22685060e-06, -3.18147659e-06, -9.29465898e-07, ...,
         -6.83750841e-07, -3.66203790e-06, -1.67669032e-06],
        [ 3.25078145e-06,  8.42994632e-06,  2.46280206e-06, ...,
          1.81173198e-06,  9.70328801e-06,  4.44272018e-06],
        [ 9.40266034e-07,  2.43830368e-06,  7.12348481e-07, ...,
          5.24030952e-07,  2.80660879e-06,  1.28502597e-06],
        ...,
        [ 2.98411942e-06,  7.73843658e-06,  2.26077805e-06, ...,
          1.66311543e-06,  8.90732554e-06,  4.07828293e-06],
        [ 4.92612116e-07,  1.27744477e-06,  3.73204472e-07, ...,
          2.74543567e-07,  1.47040259e-06,  6.73234354e-07],
        [-2.64967912e-06, -6.87116426e-06, -2.00740510e-06, ...,
         -1.47672449e-06, -7.90905142e-06, -3.62121614e-06]],

       [[ 1.07997903e-05,  1.15772727e-05,  1.09909579e-05, ...,
          2.53739813e-06,  1.04543878e-05,  5.79772086e-06],
        [-1.01716732e-05, -1.09039374e-05, -1.03517223e-05, ...,
         -2.38982284e-06, -9.84635972e-06, -5.46052479e-06],
        [-1.57906391e-06, -1.69274165e-06, -1.60701495e-06, ...,
         -3.70999231e-07, -1.52856171e-06, -8.47699027e-07],
        ...,
        [ 1.05452659e-06,  1.13044246e-06,  1.07319272e-06, ...,
          2.47759772e-07,  1.02080037e-06,  5.66108270e-07],
        [ 1.41518228e-06,  1.51706206e-06,  1.44023250e-06, ...,
          3.32495432e-07,  1.36992151e-06,  7.59721445e-07],
        [-7.34297373e-06, -7.87159843e-06, -7.47295189e-06, ...,
         -1.72522311e-06, -7.10812810e-06, -3.94197605e-06]]],      dtype=float32), 'w2': Array([[[-5.74465557e-05, -5.38376735e-05, -5.58964130e-05, ...,
         -5.03214651e-05, -5.12089464e-05, -5.16573673e-05],
        [-5.19956629e-05, -4.87292164e-05, -5.05926073e-05, ...,
         -4.55466470e-05, -4.63499164e-05, -4.67557875e-05],
        [-7.43175624e-05, -6.96488132e-05, -7.23121630e-05, ...,
         -6.50999646e-05, -6.62480743e-05, -6.68281937e-05],
        ...,
        [ 1.85051264e-04,  1.73426059e-04,  1.80057817e-04, ...,
          1.62099386e-04,  1.64958197e-04,  1.66402679e-04],
        [-1.23381105e-05, -1.15630110e-05, -1.20051773e-05, ...,
         -1.08078157e-05, -1.09984248e-05, -1.10947340e-05],
        [-1.11180387e-04, -1.04195860e-04, -1.08180284e-04, ...,
         -9.73907008e-05, -9.91082998e-05, -9.99761614e-05]],

       [[-5.27832017e-05, -5.08860903e-05, -5.84037953e-05, ...,
         -5.79213447e-05, -5.05039752e-05, -5.37620872e-05],
        [-4.73958862e-05, -4.56924026e-05, -5.24428106e-05, ...,
         -5.20096037e-05, -4.53492867e-05, -4.82748583e-05],
        [-6.78453362e-05, -6.54068645e-05, -7.50698091e-05, ...,
         -7.44496865e-05, -6.49157082e-05, -6.91035530e-05],
        ...,
        [ 1.69247956e-04,  1.63164921e-04,  1.87270241e-04, ...,
          1.85723271e-04,  1.61939679e-04,  1.72386732e-04],
        [-1.13198012e-05, -1.09129496e-05, -1.25251845e-05, ...,
         -1.24217186e-05, -1.08310014e-05, -1.15297307e-05],
        [-1.01789803e-04, -9.81313206e-05, -1.12628841e-04, ...,
         -1.11698457e-04, -9.73944261e-05, -1.03677536e-04]],

       [[-6.29638671e-05, -5.50060577e-05, -5.62734313e-05, ...,
         -5.55980114e-05, -5.51145604e-05, -5.87623581e-05],
        [-5.67860588e-05, -4.96090433e-05, -5.07520672e-05, ...,
         -5.01429167e-05, -4.97069013e-05, -5.29967911e-05],
        [-8.12159269e-05, -7.09512897e-05, -7.25860591e-05, ...,
         -7.17148432e-05, -7.10912500e-05, -7.57964735e-05],
        ...,
        [ 2.02039228e-04,  1.76504109e-04,  1.80570874e-04, ...,
          1.78403585e-04,  1.76852278e-04,  1.88557373e-04],
        [-1.37589886e-05, -1.20200320e-05, -1.22969814e-05, ...,
         -1.21493867e-05, -1.20437426e-05, -1.28408665e-05],
        [-1.21824298e-04, -1.06427295e-04, -1.08879452e-04, ...,
         -1.07572625e-04, -1.06637235e-04, -1.13695096e-04]],

       [[-5.23333874e-05, -4.88984006e-05, -5.27251104e-05, ...,
         -5.09480342e-05, -4.80538692e-05, -4.87045327e-05],
        [-4.72214706e-05, -4.41220109e-05, -4.75749293e-05, ...,
         -4.59714392e-05, -4.33599707e-05, -4.39470787e-05],
        [-6.74981347e-05, -6.30677823e-05, -6.80033700e-05, ...,
         -6.57113487e-05, -6.19785278e-05, -6.28177368e-05],
        ...,
        [ 1.67982813e-04,  1.56956987e-04,  1.69240186e-04, ...,
          1.63536024e-04,  1.54246154e-04,  1.56334689e-04],
        [-1.14248487e-05, -1.06749594e-05, -1.15103649e-05, ...,
         -1.11224135e-05, -1.04905912e-05, -1.06326370e-05],
        [-1.01212929e-04, -9.45696520e-05, -1.01970523e-04, ...,
         -9.85336592e-05, -9.29363232e-05, -9.41947146e-05]],

       [[-5.49333417e-05, -4.95117929e-05, -5.46458905e-05, ...,
         -5.63307367e-05, -6.19458006e-05, -6.00997482e-05],
        [-4.96023931e-05, -4.47069724e-05, -4.93428379e-05, ...,
         -5.08641824e-05, -5.59343389e-05, -5.42674316e-05],
        [-7.08599182e-05, -6.38665224e-05, -7.04891281e-05, ...,
         -7.26624567e-05, -7.99054687e-05, -7.75241933e-05],
        ...,
        [ 1.76331247e-04,  1.58928538e-04,  1.75408553e-04, ...,
          1.80816758e-04,  1.98840644e-04,  1.92914958e-04],
        [-1.19392580e-05, -1.07609339e-05, -1.18767830e-05, ...,
         -1.22429692e-05, -1.34633528e-05, -1.30621293e-05],
        [-1.06232139e-04, -9.57477459e-05, -1.05676263e-04, ...,
         -1.08934481e-04, -1.19793105e-04, -1.16223127e-04]],

       [[-5.45921284e-05, -5.96108148e-05, -5.57108215e-05, ...,
         -5.79298212e-05, -5.71885976e-05, -5.48706012e-05],
        [-4.93639964e-05, -5.39020584e-05, -5.03755582e-05, ...,
         -5.23820490e-05, -5.17118133e-05, -4.96158027e-05],
        [-7.05126222e-05, -7.69948892e-05, -7.19575546e-05, ...,
         -7.48236780e-05, -7.38662930e-05, -7.08723092e-05],
        ...,
        [ 1.75282272e-04,  1.91396073e-04,  1.78874136e-04, ...,
          1.85998812e-04,  1.83618919e-04,  1.76176385e-04],
        [-1.19150491e-05, -1.30104063e-05, -1.21592111e-05, ...,
         -1.26435207e-05, -1.24817443e-05, -1.19758279e-05],
        [-1.05577041e-04, -1.15282797e-04, -1.07740510e-04, ...,
         -1.12031885e-04, -1.10598419e-04, -1.06115585e-04]]],      dtype=float32), 'w3': Array([[[ 3.5490775e-06,  8.4940797e-07,  3.4716991e-06, ...,
          4.2244770e-07,  3.2786768e-06,  1.6154287e-06],
        [ 2.7477595e-06,  6.5762691e-07,  2.6878517e-06, ...,
          3.2706660e-07,  2.5384104e-06,  1.2506939e-06],
        [ 5.3019940e-06,  1.2689371e-06,  5.1863981e-06, ...,
          6.3109786e-07,  4.8980405e-06,  2.4133012e-06],
        ...,
        [-2.5464431e-06, -6.0944546e-07, -2.4909245e-06, ...,
         -3.0310386e-07, -2.3524321e-06, -1.1590610e-06],
        [ 4.5189145e-06,  1.0815211e-06,  4.4203916e-06, ...,
          5.3788767e-07,  4.1746230e-06,  2.0568682e-06],
        [ 2.6770024e-08,  6.4069248e-09,  2.6186374e-08, ...,
          3.1864436e-09,  2.4730442e-08,  1.2184874e-08]],

       [[ 6.6705354e-07,  1.1831364e-06,  1.1325907e-06, ...,
          9.2067989e-07,  1.1334162e-06,  1.9184938e-07],
        [ 2.3132554e-06,  4.1029639e-06,  3.9276779e-06, ...,
          3.1927987e-06,  3.9305405e-06,  6.6530885e-07],
        [ 3.9754595e-06,  7.0511746e-06,  6.7499354e-06, ...,
          5.4870043e-06,  6.7548553e-06,  1.1433707e-06],
        ...,
        [-1.8314257e-06, -3.2483547e-06, -3.1095790e-06, ...,
         -2.5277684e-06, -3.1118454e-06, -5.2673118e-07],
        [ 1.1988182e-06,  2.1263140e-06,  2.0354742e-06, ...,
          1.6546313e-06,  2.0369575e-06,  3.4478867e-07],
        [-9.2805594e-06, -1.6460699e-05, -1.5757467e-05, ...,
         -1.2809203e-05, -1.5768952e-05, -2.6691553e-06]],

       [[-1.9254314e-07, -6.7756915e-08, -4.7899679e-08, ...,
         -8.5602892e-08, -4.3150685e-08, -1.7295479e-08],
        [ 9.8565999e-07,  3.4685877e-07,  2.4520634e-07, ...,
          4.3821527e-07,  2.2089544e-07,  8.8538393e-08],
        [ 8.2081016e-08,  2.8884729e-08,  2.0419604e-08, ...,
          3.6492459e-08,  1.8395109e-08,  7.3730515e-09],
        ...,
        [-4.2611964e-06, -1.4995367e-06, -1.0600738e-06, ...,
         -1.8944883e-06, -9.5497319e-07, -3.8276841e-07],
        [ 1.3054347e-06,  4.5938916e-07,  3.2475791e-07, ...,
          5.8038415e-07,  2.9255989e-07,  1.1726265e-07],
        [-1.9165298e-06, -6.7443659e-07, -4.7678228e-07, ...,
         -8.5207131e-07, -4.2951189e-07, -1.7215518e-07]],

       [[ 1.7120665e-06,  4.1227700e-06,  1.3657750e-06, ...,
          4.0432678e-06,  2.6770281e-06,  4.4415920e-06],
        [ 1.0612503e-06,  2.5555612e-06,  8.4659627e-07, ...,
          2.5062807e-06,  1.6593963e-06,  2.7531878e-06],
        [ 1.9702500e-06,  4.7444933e-06,  1.5717370e-06, ...,
          4.6530017e-06,  3.0807300e-06,  5.1113943e-06],
        ...,
        [-4.3448213e-06, -1.0462620e-05, -3.4660154e-06, ...,
         -1.0260861e-05, -6.7936667e-06, -1.1271714e-05],
        [ 9.7296962e-09,  2.3429756e-08,  7.7617175e-09, ...,
          2.2977945e-08,  1.5213585e-08,  2.5241626e-08],
        [ 3.0418371e-06,  7.3249462e-06,  2.4265794e-06, ...,
          7.1836944e-06,  4.7562889e-06,  7.8913981e-06]],

       [[-1.1891536e-06, -3.0837207e-06, -9.0090657e-07, ...,
         -6.6274151e-07, -3.5495161e-06, -1.6251713e-06],
        [ 3.3974245e-06,  8.8102224e-06,  2.5738996e-06, ...,
          1.8934595e-06,  1.0141005e-05,  4.6431319e-06],
        [ 9.6939925e-07,  2.5138522e-06,  7.3441993e-07, ...,
          5.4026754e-07,  2.8935690e-06,  1.3248413e-06],
        ...,
        [ 3.1900177e-06,  8.2723736e-06,  2.4167673e-06, ...,
          1.7778671e-06,  9.5219139e-06,  4.3596765e-06],
        [ 5.0431458e-07,  1.3077916e-06,  3.8207031e-07, ...,
          2.8106561e-07,  1.5053333e-06,  6.8922765e-07],
        [-2.6572388e-06, -6.8907680e-06, -2.0131324e-06, ...,
         -1.4809377e-06, -7.9316169e-06, -3.6315478e-06]],

       [[ 1.0838507e-05,  1.1618777e-05,  1.1030359e-05, ...,
          2.5464944e-06,  1.0491865e-05,  5.8185051e-06],
        [-9.9084527e-06, -1.0621768e-05, -1.0083842e-05, ...,
         -2.3279795e-06, -9.5915566e-06, -5.3192184e-06],
        [-1.5034987e-06, -1.6117364e-06, -1.5301122e-06, ...,
         -3.5324527e-07, -1.4554133e-06, -8.0713289e-07],
        ...,
        [ 9.9419424e-07,  1.0657668e-06,  1.0117925e-06, ...,
          2.3358479e-07,  9.6239762e-07,  5.3371969e-07],
        [ 1.3294299e-06,  1.4251364e-06,  1.3529623e-06, ...,
          3.1234802e-07,  1.2869117e-06,  7.1368646e-07],
        [-6.6477387e-06, -7.1263130e-06, -6.7654105e-06, ...,
         -1.5618784e-06, -6.4351284e-06, -3.5687483e-06]]], dtype=float32), 'wcls': Array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32), 'wk': Array([[[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]]], dtype=float32), 'wo': Array([[[ 2.5211170e-07,  2.6817838e-07,  2.6122720e-07, ...,
          2.5612391e-07,  2.4704889e-07,  2.6379772e-07],
        [-9.1684535e-07, -9.7527436e-07, -9.4999530e-07, ...,
         -9.3143638e-07, -8.9843360e-07, -9.5934342e-07],
        [-7.3938693e-08, -7.8650679e-08, -7.6612054e-08, ...,
         -7.5115381e-08, -7.2453879e-08, -7.7365932e-08],
        ...,
        [ 1.6139436e-06,  1.7167976e-06,  1.6722981e-06, ...,
          1.6396285e-06,  1.5815330e-06,  1.6887539e-06],
        [ 7.8728803e-08,  8.3746059e-08,  8.1575365e-08, ...,
          7.9981724e-08,  7.7147803e-08,  8.2378079e-08],
        [-1.7059546e-06, -1.8146721e-06, -1.7676358e-06, ...,
         -1.7331038e-06, -1.6716962e-06, -1.7850297e-06]],

       [[-7.4160255e-07, -6.9608097e-07, -7.4464560e-07, ...,
         -7.3699795e-07, -7.0854247e-07, -7.5860277e-07],
        [-6.7127183e-07, -6.3006735e-07, -6.7402630e-07, ...,
         -6.6710396e-07, -6.4134707e-07, -6.8665986e-07],
        [-9.5938697e-07, -9.0049713e-07, -9.6332360e-07, ...,
         -9.5343012e-07, -9.1661821e-07, -9.8137957e-07],
        ...,
        [ 2.3889731e-06,  2.2423314e-06,  2.3987759e-06, ...,
          2.3741402e-06,  2.2824747e-06,  2.4437372e-06],
        [-1.5926791e-07, -1.4949161e-07, -1.5992144e-07, ...,
         -1.5827902e-07, -1.5216789e-07, -1.6291891e-07],
        [-1.4353344e-06, -1.3472296e-06, -1.4412241e-06, ...,
         -1.4264225e-06, -1.3713483e-06, -1.4682374e-06]],

       [[-7.6595751e-07, -7.4974855e-07, -7.9625852e-07, ...,
         -7.5697875e-07, -7.5542829e-07, -7.7191658e-07],
        [-6.8777882e-07, -6.7322424e-07, -7.1498715e-07, ...,
         -6.7971649e-07, -6.7832428e-07, -6.9312966e-07],
        [-9.8451960e-07, -9.6368547e-07, -1.0234669e-06, ...,
         -9.7297880e-07, -9.7098587e-07, -9.9217903e-07],
        ...,
        [ 2.4560272e-06,  2.4040535e-06,  2.5531870e-06, ...,
          2.4272372e-06,  2.4222654e-06,  2.4751350e-06],
        [-1.6426739e-07, -1.6079120e-07, -1.7076576e-07, ...,
         -1.6234181e-07, -1.6200929e-07, -1.6554537e-07],
        [-1.4771156e-06, -1.4458573e-06, -1.5355498e-06, ...,
         -1.4598004e-06, -1.4568103e-06, -1.4886074e-06]],

       [[-7.5559569e-07, -7.3336469e-07, -8.4079471e-07, ...,
         -7.8980622e-07, -8.3589470e-07, -7.9112533e-07],
        [-6.8145312e-07, -6.6140353e-07, -7.5829206e-07, ...,
         -7.1230676e-07, -7.5387283e-07, -7.1349643e-07],
        [-9.7462794e-07, -9.4595254e-07, -1.0845245e-06, ...,
         -1.0187554e-06, -1.0782039e-06, -1.0204569e-06],
        ...,
        [ 2.4245667e-06,  2.3532314e-06,  2.6979546e-06, ...,
          2.5343420e-06,  2.6822313e-06,  2.5385748e-06],
        [-1.6511213e-07, -1.6025422e-07, -1.8372974e-07, ...,
         -1.7258778e-07, -1.8265899e-07, -1.7287603e-07],
        [-1.4619472e-06, -1.4189339e-06, -1.6267926e-06, ...,
         -1.5281387e-06, -1.6173119e-06, -1.5306910e-06]],

       [[-7.1280272e-07, -7.6736785e-07, -7.6152338e-07, ...,
         -7.0458771e-07, -7.8551102e-07, -7.5898555e-07],
        [-6.4317248e-07, -6.9240741e-07, -6.8713382e-07, ...,
         -6.3575993e-07, -7.0877826e-07, -6.8484388e-07],
        [-9.1934436e-07, -9.8972032e-07, -9.8218231e-07, ...,
         -9.0874897e-07, -1.0131206e-06, -9.7890904e-07],
        ...,
        [ 2.2879751e-06,  2.4631199e-06,  2.4443602e-06, ...,
          2.2616064e-06,  2.5213565e-06,  2.4362141e-06],
        [-1.5560721e-07, -1.6751898e-07, -1.6624310e-07, ...,
         -1.5381386e-07, -1.7147968e-07, -1.6568907e-07],
        [-1.3785524e-06, -1.4840807e-06, -1.4727776e-06, ...,
         -1.3626646e-06, -1.5191694e-06, -1.4678693e-06]],

       [[-6.9852308e-07, -6.9982849e-07, -6.9935174e-07, ...,
         -7.2070242e-07, -7.0936545e-07, -7.6198722e-07],
        [-6.3073657e-07, -6.3191533e-07, -6.3148480e-07, ...,
         -6.5076358e-07, -6.4052682e-07, -6.8804201e-07],
        [-9.0104254e-07, -9.0272641e-07, -9.0211142e-07, ...,
         -9.2965223e-07, -9.1502841e-07, -9.8290661e-07],
        ...,
        [ 2.2422000e-06,  2.2463903e-06,  2.2448598e-06, ...,
          2.3133937e-06,  2.2770032e-06,  2.4459146e-06],
        [-1.5181728e-07, -1.5210099e-07, -1.5199737e-07, ...,
         -1.5663774e-07, -1.5417376e-07, -1.6561060e-07],
        [-1.3508316e-06, -1.3533560e-06, -1.3524340e-06, ...,
         -1.3937228e-06, -1.3717989e-06, -1.4735610e-06]]], dtype=float32), 'wq': Array([[[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]]], dtype=float32), 'wv': Array([[[ 8.33273450e-09,  3.17081650e-08,  1.31639965e-07, ...,
          3.71325157e-08,  1.14651563e-07,  1.41336827e-07],
        [-5.48908363e-10, -2.08873518e-09, -8.67161631e-09, ...,
         -2.44605736e-09, -7.55252660e-09, -9.31038446e-09],
        [-3.52132046e-10, -1.33995148e-09, -5.56295765e-09, ...,
         -1.56917856e-09, -4.84504659e-09, -5.97273608e-09],
        ...,
        [ 3.26836269e-09,  1.24369466e-08,  5.16333678e-08, ...,
          1.45645496e-08,  4.49699762e-08,  5.54367823e-08],
        [-3.82936260e-09, -1.45716932e-08, -6.04960064e-08, ...,
         -1.70644903e-08, -5.26888719e-08, -6.49522605e-08],
        [ 4.67006744e-09,  1.77707875e-08,  7.37774002e-08, ...,
          2.08108570e-08,  6.42562838e-08,  7.92119934e-08]],

       [[ 8.92418299e-08,  2.81410006e-08,  1.04813047e-07, ...,
          2.29284804e-08,  8.77959536e-08,  3.70077409e-08],
        [-8.53703384e-08, -2.69201870e-08, -1.00266043e-07, ...,
         -2.19337952e-08, -8.39871888e-08, -3.54022696e-08],
        [-1.01619402e-09, -3.20440730e-10, -1.19350296e-09, ...,
         -2.61085903e-10, -9.99729854e-10, -4.21406021e-10],
        ...,
        [ 1.55103237e-08,  4.89093566e-09,  1.82166175e-08, ...,
          3.98499411e-09,  1.52590296e-08,  6.43198428e-09],
        [-6.92746340e-08, -2.18446630e-08, -8.13619039e-08, ...,
         -1.77984045e-08, -6.81522678e-08, -2.87275341e-08],
        [-5.58610367e-08, -1.76148962e-08, -6.56078569e-08, ...,
         -1.43521115e-08, -5.49559900e-08, -2.31650432e-08]],

       [[-1.03414184e-08, -2.38561952e-08, -4.19625970e-08, ...,
         -1.85441991e-08, -2.38427145e-08, -2.57376076e-08],
        [ 1.53663073e-08,  3.54479042e-08,  6.23521927e-08, ...,
          2.75548135e-08,  3.54278740e-08,  3.82434919e-08],
        [ 2.45966021e-08,  5.67408946e-08,  9.98061580e-08, ...,
          4.41065495e-08,  5.67088350e-08,  6.12157507e-08],
        ...,
        [-2.26730901e-09, -5.23036192e-09, -9.20010823e-09, ...,
         -4.06573131e-09, -5.22740651e-09, -5.64285330e-09],
        [-1.50363799e-09, -3.46868068e-09, -6.10134387e-09, ...,
         -2.69631872e-09, -3.46672069e-09, -3.74223719e-09],
        [-5.25526289e-09, -1.21231505e-08, -2.13243929e-08, ...,
         -9.42372047e-09, -1.21163000e-08, -1.30792399e-08]],

       [[-3.51821718e-08, -1.46095033e-07, -6.23099528e-09, ...,
         -2.80888859e-08, -8.54807638e-08, -9.40197609e-08],
        [ 2.19111591e-08,  9.09867452e-08,  3.88061094e-09, ...,
          1.74935195e-08,  5.32366933e-08,  5.85547077e-08],
        [-1.05956994e-08, -4.39989627e-08, -1.87656846e-09, ...,
         -8.45943759e-09, -2.57439616e-08, -2.83156218e-08],
        ...,
        [-2.85509654e-11, -1.18558746e-10, -5.05656454e-12, ...,
         -2.27946342e-11, -6.93691701e-11, -7.62987243e-11],
        [-1.16440768e-08, -4.83523799e-08, -2.06224282e-09, ...,
         -9.29644539e-09, -2.82911632e-08, -3.11172741e-08],
        [-2.45677150e-08, -1.02018170e-07, -4.35110437e-09, ...,
         -1.96144700e-08, -5.96912244e-08, -6.56540067e-08]],

       [[-8.10783263e-09, -2.19628369e-08, -5.13717531e-08, ...,
         -2.78277379e-09, -2.97822993e-08, -3.15677724e-08],
        [ 1.68333401e-08,  4.55988598e-08,  1.06657140e-07, ...,
          5.77754644e-09,  6.18334894e-08,  6.55404619e-08],
        [ 2.82066654e-08,  7.64074031e-08,  1.78719276e-07, ...,
          9.68110481e-09,  1.03610844e-07,  1.09822409e-07],
        ...,
        [ 1.28267896e-09,  3.47457485e-09,  8.12713807e-09, ...,
          4.40241676e-10,  4.71163286e-09,  4.99409936e-09],
        [ 7.93404953e-10,  2.14920859e-09,  5.02706543e-09, ...,
          2.72312811e-10,  2.91439473e-09,  3.08911519e-09],
        [ 8.42940917e-09,  2.28339374e-08,  5.34092841e-08, ...,
          2.89314550e-09,  3.09635375e-08,  3.28198304e-08]],

       [[ 1.68797047e-08,  1.01267938e-09,  7.71280018e-09, ...,
          5.63233726e-09,  7.93342014e-09,  1.14855983e-08],
        [-4.72173625e-08, -2.83275381e-09, -2.15749072e-08, ...,
         -1.57552584e-08, -2.21920438e-08, -3.21285043e-08],
        [ 9.21601551e-09,  5.52904778e-10,  4.21105018e-09, ...,
          3.07515480e-09,  4.33150449e-09,  6.27093044e-09],
        ...,
        [ 4.72499515e-08,  2.83470913e-09,  2.15897984e-08, ...,
          1.57661333e-08,  2.22073613e-08,  3.21506803e-08],
        [-1.35296252e-09, -8.11695017e-11, -6.18205653e-10, ...,
         -4.51449905e-10, -6.35889064e-10, -9.20607590e-10],
        [ 7.78290996e-08,  4.66927164e-09,  3.55622518e-08, ...,
          2.59696336e-08,  3.65794861e-08,  5.29579047e-08]]],      dtype=float32)}, Array([[[-0.,  0.,  0., ...,  0.,  0.,  0.]],

       [[-0.,  0.,  0., ...,  0.,  0.,  0.]],

       [[-0.,  0.,  0., ...,  0.,  0.,  0.]],

       [[-0.,  0.,  0., ...,  0.,  0.,  0.]],

       [[-0.,  0.,  0., ...,  0.,  0.,  0.]],

       [[-0.,  0.,  0., ...,  0.,  0.,  0.]]], dtype=float32), Array([[[ 0., -0., -0., ...,  0., -0.,  0.]],

       [[ 0., -0., -0., ...,  0., -0., -0.]],

       [[-0.,  0.,  0., ..., -0., -0., -0.]],

       [[-0.,  0., -0., ..., -0., -0., -0.]],

       [[-0.,  0.,  0., ...,  0.,  0.,  0.]],

       [[ 0., -0.,  0., ...,  0., -0.,  0.]]], dtype=float32))
blehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.dot_general
Verifying module
Operation name: stablehlo.reshape
Verifying module
Operation name: stablehlo.concatenate
Verifying module
Operation name: stablehlo.multiply
Verifying module
Operation name: func.return
Verifying module
Operation name: func.func
Verifying module
Operation name: builtin.module
Verifying module
    %2736 = "stablehlo.dot_general"(%1393, %1341) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<768xf32>, tensor<288xf32>) -> tensor<768x288xf32>
        %2737 = "stablehlo.reshape"(%2736) : (tensor<768x288xf32>) -> tensor<1x768x288xf32>
        %2738 = "stablehlo.concatenate"(%2667, %2680, %2693, %2706, %2719, %2737) <{dimension = 0 : i64}> : (tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>, tensor<1x768x288xf32>) -> tensor<6x768x288xf32>
        %2739 = "stablehlo.dot_general"(%1380, %1355) <{dot_dimension_numbers = #stablehlo.dot<>, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]}> : (tensor<288xf32>, tensor<768xf32>) -> tensor<288x768xf32>
        %2740 = "stablehlo.reshape"(%2739) : (tensor<288x768xf32>) -> tensor<1x288x768xf32>
        %2741 = "stablehlo.concatenate"(%2669, %2682, %2695, %2708, %2721, %2740) <{dimension = 0 : i64}> : (tensor<1x288x768xf32>, tensor<1x288x768xf32>, tensor<1x288x768xf32>, tensor<1x288x768xf32>, tensor<1x288x768xf32>, tensor<1x288x768xf32>) -> tensor<6x288x768xf32>
        %2742 = "stablehlo.multiply"(%1378, %1359) : (tensor<288xf32>, tensor<288xf32>) -> tensor<288xf32>
        "func.return"(%2656, %2724, %2735, %2742, %2738, %2741, %2446, %0, %2624, %2732, %2601, %2727, %2626, %2729) : (tensor<288xf32>, tensor<6x288xf32>, tensor<6x288xf32>, tensor<288xf32>, tensor<6x768x288xf32>, tensor<6x288x768xf32>, tensor<6x768x288xf32>, tensor<32000x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x288x288xf32>, tensor<6x1x288xf32>, tensor<6x1x288xf32>) -> ()
      }) : () -> ()
    }) {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} : () -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()

